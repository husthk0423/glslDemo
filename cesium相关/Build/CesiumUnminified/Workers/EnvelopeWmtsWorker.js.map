{"version":3,"file":"EnvelopeWmtsWorker.js","sources":["../../../Source/WorkersES6/EnvelopeWmtsWorker.js"],"sourcesContent":["/**\r\n * Cesium - https://github.com/AnalyticalGraphicsInc/cesium\r\n *\r\n * Copyright 2011-2017 Cesium Contributors\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n * Columbus View (Pat. Pend.)\r\n *\r\n * Portions licensed separately.\r\n * See https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md for full licensing details.\r\n */\r\n\r\nimport createTaskProcessorWorker from './createTaskProcessorWorker.js';\r\nimport Resource from '../Core/Resource.js';\r\nimport Cartesian3 from '../Core/Cartesian3.js';\r\nimport HouseDrawer from './HouseDrawer.js';\r\nimport uncompress from './snappyJs.js';\r\nimport getPrimitiveData from './GetPrimitiveData.js';\r\nimport Cache from './Cache.js';\r\nimport PolygonBuffer from './PolygonBuffer.js';\r\nimport defer from \"../Core/defer.js\";\r\n\r\nlet options = {};\r\n\r\nlet indexDbNames;\r\nlet indexDbName;\r\nlet dbMap ={};\r\n\r\n//默认当前屏幕最多10万个房屋缓存\r\nlet cache = new Cache(100000);\r\n\r\n    function init(parameters){\r\n        let deferred = defer();\r\n        options = parameters;\r\n        deferred.resolve({});\r\n        return deferred.promise;\r\n    }\r\n\r\n    /* global require */\r\n  function createGeometry(parameters, transferableObjects) {\r\n            if(parameters.init ==true){\r\n                init(parameters);\r\n                return;\r\n            }\r\n\r\n            var url = parameters.url;\r\n            var resource = new Resource({url:url});\r\n            resource.request.throttle = false;\r\n            resource.request.throttleByServer = true;\r\n            resource.request.type = 1;\r\n\r\n            var jsonPromise = resource.fetchArrayBuffer();\r\n            if(!jsonPromise){\r\n                return true;\r\n            }\r\n\r\n\r\n            let deferred = defer();\r\n            jsonPromise.then(function(imageData) {\r\n                if(!imageData){\r\n                    deferred.resolve({});\r\n                    return;\r\n                }\r\n             //    let featureMap = {wmts:[{type:'Polygon',geometrys:[[0,0,tileSize,0,tileSize,tileSize,0,tileSize]]}]};\r\n             // //将瓦片内坐标转为地心坐标\r\n             //  featureMapToLonLat(featureMap,parameters);\r\n             //  toCartesian3(featureMap);\r\n              // let primitiveData = getPrimitiveData(featureMap, parameters.level, options, transferableObjects);\r\n              //   transferableObjects.push(imageData);\r\n              deferred.resolve(imageData);\r\n          },function (e){\r\n              deferred.reject(e);\r\n          });\r\n          return deferred.promise;\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        function featureMapToLonLat(featureMap,parameters){\r\n            for(let key in featureMap){\r\n                let features = featureMap[key];\r\n                for(let i = 0;i<features.length;i++){\r\n                    let feature = features[i];\r\n                    feature.polygons = [];\r\n                    for(let j =0;j<feature.geometrys.length;j++){\r\n                        let geometry = feature.geometrys[j];\r\n                        let positions = geometryToLonLat(geometry,parameters);\r\n                        feature.polygons.push(positions);\r\n                    }\r\n                    feature.geometrys = feature.polygons;\r\n                }\r\n            }\r\n        }\r\n\r\n        function geometryToLonLat(geometry,parameters){\r\n            let rectangle = parameters.rectangle ;\r\n            var positions = [];\r\n            for (var i = 0; i < geometry.length; i++) {\r\n                var pt = formatToDegrees(geometry[i],geometry[i+1],rectangle);\r\n                positions.push(pt[0]);\r\n                positions.push(pt[1]);\r\n                i++;\r\n            }\r\n            return positions;\r\n        }\r\n\r\n        function formatToDegrees(x,y,rectangle){\r\n            var lon = toDegrees(rectangle.west + rectangle.width/ tileSize* x);\r\n            var lat = toDegrees(rectangle.north - rectangle.height/ tileSize* y);\r\n            lon = Number(lon.toFixed(6));\r\n            lat = Number(lat.toFixed(6));\r\n            return [lon,lat];\r\n        }\r\n\r\n        function toDegrees (radians) {\r\n            return radians * 180.0 / Math.PI;\r\n        };\r\n\r\n\r\n        function toCartesian3(featureMap){\r\n            for(let key in featureMap){\r\n                let features = featureMap[key];\r\n                features.map((item) => {\r\n                    let polygons = [];\r\n                    for(let i =0;i<item.geometrys.length;i++){\r\n                        let geometry = item.geometrys[i];\r\n                        let positions = [];\r\n                        for(let j = 0;j<geometry.length;j++){\r\n                            let lon = geometry[j];\r\n                            let lat = geometry[j+1];\r\n                            let cartesian3 =Cartesian3.fromDegrees(lon, lat);\r\n                            positions.push(cartesian3);\r\n                            j++;\r\n                        }\r\n                        polygons.push(positions);\r\n                    }\r\n                    item.polygons = polygons;\r\n                    delete item.geometrys;\r\n                })\r\n            }\r\n        }\r\n\r\n    var result = createTaskProcessorWorker(createGeometry);\r\n    export default result;"],"names":["defer","Resource"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;EAAA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AAiBA;EACA;EACY,IAAI,KAAK,CAAC,MAAM,EAAE;AAC9B;EACA,IAAI,SAAS,IAAI,CAAC,UAAU,CAAC;EAC7B,QAAQ,IAAI,QAAQ,GAAGA,WAAK,EAAE,CAAC;EAE/B,QAAQ,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;EAC7B,QAAQ,OAAO,QAAQ,CAAC,OAAO,CAAC;EAChC,KAAK;AACL;EACA;EACA,EAAE,SAAS,cAAc,CAAC,UAAU,EAAE,mBAAmB,EAAE;EAC3D,YAAY,GAAG,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC;EACtC,gBAAgB,IAAI,CAAW,CAAC,CAAC;EACjC,gBAAgB,OAAO;EACvB,aAAa;AACb;EACA,YAAY,IAAI,GAAG,GAAG,UAAU,CAAC,GAAG,CAAC;EACrC,YAAY,IAAI,QAAQ,GAAG,IAAIC,iBAAQ,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;EACnD,YAAY,QAAQ,CAAC,OAAO,CAAC,QAAQ,GAAG,KAAK,CAAC;EAC9C,YAAY,QAAQ,CAAC,OAAO,CAAC,gBAAgB,GAAG,IAAI,CAAC;EACrD,YAAY,QAAQ,CAAC,OAAO,CAAC,IAAI,GAAG,CAAC,CAAC;AACtC;EACA,YAAY,IAAI,WAAW,GAAG,QAAQ,CAAC,gBAAgB,EAAE,CAAC;EAC1D,YAAY,GAAG,CAAC,WAAW,CAAC;EAC5B,gBAAgB,OAAO,IAAI,CAAC;EAC5B,aAAa;AACb;AACA;EACA,YAAY,IAAI,QAAQ,GAAGD,WAAK,EAAE,CAAC;EACnC,YAAY,WAAW,CAAC,IAAI,CAAC,SAAS,SAAS,EAAE;EACjD,gBAAgB,GAAG,CAAC,SAAS,CAAC;EAC9B,oBAAoB,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;EACzC,oBAAoB,OAAO;EAC3B,iBAAiB;EACjB;EACA;EACA;EACA;EACA;EACA;EACA,cAAc,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;EAC1C,WAAW,CAAC,UAAU,CAAC,CAAC;EACxB,cAAc,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;EACjC,WAAW,CAAC,CAAC;EACb,UAAU,OAAO,QAAQ,CAAC,OAAO,CAAC;EAClC,SAAS;AAuET;EACA,IAAO,IAAC,MAAM,GAAG,yBAAyB,CAAC,cAAc;;;;;;;;"}