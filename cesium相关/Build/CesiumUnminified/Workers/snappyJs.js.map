{"version":3,"file":"snappyJs.js","sources":["../../../Source/WorkersES6/snappyJs.js"],"sourcesContent":["/**\r\n * Modules in this bundle\r\n * @license\r\n *\r\n * snappyjs:\r\n *   license: MIT (http://opensource.org/licenses/MIT)\r\n *   author: Zhipeng Jia\r\n *   version: 0.6.0\r\n *\r\n * This header is generated by licensify (https://github.com/twada/licensify)\r\n */\r\n// define(['exports'], function (exports) {\r\n\r\n    'use strict'\r\n\r\n    var WORD_MASK = [0, 0xff, 0xffff, 0xffffff, 0xffffffff]\r\n\r\n    function copyBytes (fromArray, fromPos, toArray, toPos, length) {\r\n        var i\r\n        for (i = 0; i < length; i++) {\r\n            toArray[toPos + i] = fromArray[fromPos + i]\r\n        }\r\n    }\r\n\r\n    function selfCopyBytes (array, pos, offset, length) {\r\n        var i\r\n        for (i = 0; i < length; i++) {\r\n            array[pos + i] = array[pos - offset + i]\r\n        }\r\n    }\r\n\r\n    function SnappyDecompressor (compressed) {\r\n        this.array = compressed\r\n        this.pos = 0\r\n    }\r\n\r\n    SnappyDecompressor.prototype.readUncompressedLength = function () {\r\n        var result = 0\r\n        var shift = 0\r\n        var c, val\r\n        while (shift < 32 && this.pos < this.array.length) {\r\n            c = this.array[this.pos]\r\n            this.pos += 1\r\n            val = c & 0x7f\r\n            if (((val << shift) >>> shift) !== val) {\r\n                return -1\r\n            }\r\n            result |= val << shift\r\n            if (c < 128) {\r\n                return result\r\n            }\r\n            shift += 7\r\n        }\r\n        return -1\r\n    }\r\n\r\n    SnappyDecompressor.prototype.uncompressToBuffer = function (outBuffer) {\r\n        var array = this.array\r\n        var arrayLength = array.length\r\n        var pos = this.pos\r\n        var outPos = 0\r\n\r\n        var c, len, smallLen\r\n        var offset\r\n\r\n        while (pos < array.length) {\r\n            c = array[pos]\r\n            pos += 1\r\n            if ((c & 0x3) === 0) {\r\n                // Literal\r\n                len = (c >>> 2) + 1\r\n                if (len > 60) {\r\n                    if (pos + 3 >= arrayLength) {\r\n                        return false\r\n                    }\r\n                    smallLen = len - 60\r\n                    len = array[pos] + (array[pos + 1] << 8) + (array[pos + 2] << 16) + (array[pos + 3] << 24)\r\n                    len = (len & WORD_MASK[smallLen]) + 1\r\n                    pos += smallLen\r\n                }\r\n                if (pos + len > arrayLength) {\r\n                    return false\r\n                }\r\n                copyBytes(array, pos, outBuffer, outPos, len)\r\n                pos += len\r\n                outPos += len\r\n            } else {\r\n                switch (c & 0x3) {\r\n                    case 1:\r\n                        len = ((c >>> 2) & 0x7) + 4\r\n                        offset = array[pos] + ((c >>> 5) << 8)\r\n                        pos += 1\r\n                        break\r\n                    case 2:\r\n                        if (pos + 1 >= arrayLength) {\r\n                            return false\r\n                        }\r\n                        len = (c >>> 2) + 1\r\n                        offset = array[pos] + (array[pos + 1] << 8)\r\n                        pos += 2\r\n                        break\r\n                    case 3:\r\n                        if (pos + 3 >= arrayLength) {\r\n                            return false\r\n                        }\r\n                        len = (c >>> 2) + 1\r\n                        offset = array[pos] + (array[pos + 1] << 8) + (array[pos + 2] << 16) + (array[pos + 3] << 24)\r\n                        pos += 4\r\n                        break\r\n                    default:\r\n                        break\r\n                }\r\n                if (offset === 0 || offset > outPos) {\r\n                    return false\r\n                }\r\n                selfCopyBytes(outBuffer, outPos, offset, len)\r\n                outPos += len\r\n            }\r\n        }\r\n        return true\r\n    }\r\n\r\n\r\n    // var snappyJS = {};\r\n    // SnappyDecompressor.prototype.readUncompressedLength = function () {\r\n    //     var result = 0\r\n    //     var shift = 0\r\n    //     var c, val\r\n    //     while (shift < 32 && this.pos < this.array.length) {\r\n    //         c = this.array[this.pos]\r\n    //         this.pos += 1\r\n    //         val = c & 0x7f\r\n    //         if (((val << shift) >>> shift) !== val) {\r\n    //             return -1\r\n    //         }\r\n    //         result |= val << shift\r\n    //         if (c < 128) {\r\n    //             return result\r\n    //         }\r\n    //         shift += 7\r\n    //     }\r\n    //     return -1\r\n    // }\r\n    //\r\n    // SnappyDecompressor.prototype.uncompressToBuffer = function (outBuffer) {\r\n    //     var array = this.array\r\n    //     var arrayLength = array.length\r\n    //     var pos = this.pos\r\n    //     var outPos = 0\r\n    //\r\n    //     var c, len, smallLen\r\n    //     var offset\r\n    //\r\n    //     while (pos < array.length) {\r\n    //         c = array[pos]\r\n    //         pos += 1\r\n    //         if ((c & 0x3) === 0) {\r\n    //             // Literal\r\n    //             len = (c >>> 2) + 1\r\n    //             if (len > 60) {\r\n    //                 if (pos + 3 >= arrayLength) {\r\n    //                     return false\r\n    //                 }\r\n    //                 smallLen = len - 60\r\n    //                 len = array[pos] + (array[pos + 1] << 8) + (array[pos + 2] << 16) + (array[pos + 3] << 24)\r\n    //                 len = (len & WORD_MASK[smallLen]) + 1\r\n    //                 pos += smallLen\r\n    //             }\r\n    //             if (pos + len > arrayLength) {\r\n    //                 return false\r\n    //             }\r\n    //             copyBytes(array, pos, outBuffer, outPos, len)\r\n    //             pos += len\r\n    //             outPos += len\r\n    //         } else {\r\n    //             switch (c & 0x3) {\r\n    //                 case 1:\r\n    //                     len = ((c >>> 2) & 0x7) + 4\r\n    //                     offset = array[pos] + ((c >>> 5) << 8)\r\n    //                     pos += 1\r\n    //                     break\r\n    //                 case 2:\r\n    //                     if (pos + 1 >= arrayLength) {\r\n    //                         return false\r\n    //                     }\r\n    //                     len = (c >>> 2) + 1\r\n    //                     offset = array[pos] + (array[pos + 1] << 8)\r\n    //                     pos += 2\r\n    //                     break\r\n    //                 case 3:\r\n    //                     if (pos + 3 >= arrayLength) {\r\n    //                         return false\r\n    //                     }\r\n    //                     len = (c >>> 2) + 1\r\n    //                     offset = array[pos] + (array[pos + 1] << 8) + (array[pos + 2] << 16) + (array[pos + 3] << 24)\r\n    //                     pos += 4\r\n    //                     break\r\n    //                 default:\r\n    //                     break\r\n    //             }\r\n    //             if (offset === 0 || offset > outPos) {\r\n    //                 return false\r\n    //             }\r\n    //             selfCopyBytes(outBuffer, outPos, offset, len)\r\n    //             outPos += len\r\n    //         }\r\n    //     }\r\n    //     return true\r\n    // }\r\n\r\n\r\n    function isNode () {\r\n        if (typeof process === 'object') {\r\n            if (typeof process.versions === 'object') {\r\n                if (typeof process.versions.node !== 'undefined') {\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    function isUint8Array (object) {\r\n        return object instanceof Uint8Array && (!isNode() || !Buffer.isBuffer(object))\r\n    }\r\n\r\n    function isArrayBuffer (object) {\r\n        return object instanceof ArrayBuffer\r\n    }\r\n\r\n    function isBuffer (object) {\r\n        if (!isNode()) {\r\n            return false\r\n        }\r\n        return Buffer.isBuffer(object)\r\n    }\r\n    var TYPE_ERROR_MSG = 'Argument compressed must be type of ArrayBuffer, Buffer, or Uint8Array'\r\n    function uncompress (compressed) {\r\n        if (!isUint8Array(compressed) && !isArrayBuffer(compressed) && !isBuffer(compressed)) {\r\n            throw new TypeError(TYPE_ERROR_MSG)\r\n        }\r\n        var uint8Mode = false\r\n        var arrayBufferMode = false\r\n        if (isUint8Array(compressed)) {\r\n            uint8Mode = true\r\n        } else if (isArrayBuffer(compressed)) {\r\n            arrayBufferMode = true\r\n            compressed = new Uint8Array(compressed)\r\n        }\r\n        var decompressor = new SnappyDecompressor(compressed)\r\n        var length = decompressor.readUncompressedLength()\r\n        if (length === -1) {\r\n            throw new Error('Invalid Snappy bitstream')\r\n        }\r\n        var uncompressed, uncompressedView\r\n        if (uint8Mode) {\r\n            uncompressed = new Uint8Array(length)\r\n            if (!decompressor.uncompressToBuffer(uncompressed)) {\r\n                throw new Error('Invalid Snappy bitstream')\r\n            }\r\n        } else if (arrayBufferMode) {\r\n            uncompressed = new ArrayBuffer(length)\r\n            uncompressedView = new Uint8Array(uncompressed)\r\n            if (!decompressor.uncompressToBuffer(uncompressedView)) {\r\n                throw new Error('Invalid Snappy bitstream')\r\n            }\r\n        } else {\r\n            uncompressed = Buffer.alloc(length)\r\n            if (!decompressor.uncompressToBuffer(uncompressed)) {\r\n                throw new Error('Invalid Snappy bitstream')\r\n            }\r\n        }\r\n        return uncompressed\r\n    }\r\n\r\nexport default uncompress;\r\n"],"names":[],"mappings":"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"}