{"version":3,"file":"snappyJs.js","sources":["../../../../Source/WorkersES6/snappyJs.js"],"sourcesContent":["/**\n * Modules in this bundle\n * @license\n *\n * snappyjs:\n *   license: MIT (http://opensource.org/licenses/MIT)\n *   author: Zhipeng Jia\n *   version: 0.6.0\n *\n * This header is generated by licensify (https://github.com/twada/licensify)\n */\n// define(['exports'], function (exports) {\n\n    'use strict'\n\n    var WORD_MASK = [0, 0xff, 0xffff, 0xffffff, 0xffffffff]\n\n    function copyBytes (fromArray, fromPos, toArray, toPos, length) {\n        var i\n        for (i = 0; i < length; i++) {\n            toArray[toPos + i] = fromArray[fromPos + i]\n        }\n    }\n\n    function selfCopyBytes (array, pos, offset, length) {\n        var i\n        for (i = 0; i < length; i++) {\n            array[pos + i] = array[pos - offset + i]\n        }\n    }\n\n    function SnappyDecompressor (compressed) {\n        this.array = compressed\n        this.pos = 0\n    }\n\n    SnappyDecompressor.prototype.readUncompressedLength = function () {\n        var result = 0\n        var shift = 0\n        var c, val\n        while (shift < 32 && this.pos < this.array.length) {\n            c = this.array[this.pos]\n            this.pos += 1\n            val = c & 0x7f\n            if (((val << shift) >>> shift) !== val) {\n                return -1\n            }\n            result |= val << shift\n            if (c < 128) {\n                return result\n            }\n            shift += 7\n        }\n        return -1\n    }\n\n    SnappyDecompressor.prototype.uncompressToBuffer = function (outBuffer) {\n        var array = this.array\n        var arrayLength = array.length\n        var pos = this.pos\n        var outPos = 0\n\n        var c, len, smallLen\n        var offset\n\n        while (pos < array.length) {\n            c = array[pos]\n            pos += 1\n            if ((c & 0x3) === 0) {\n                // Literal\n                len = (c >>> 2) + 1\n                if (len > 60) {\n                    if (pos + 3 >= arrayLength) {\n                        return false\n                    }\n                    smallLen = len - 60\n                    len = array[pos] + (array[pos + 1] << 8) + (array[pos + 2] << 16) + (array[pos + 3] << 24)\n                    len = (len & WORD_MASK[smallLen]) + 1\n                    pos += smallLen\n                }\n                if (pos + len > arrayLength) {\n                    return false\n                }\n                copyBytes(array, pos, outBuffer, outPos, len)\n                pos += len\n                outPos += len\n            } else {\n                switch (c & 0x3) {\n                    case 1:\n                        len = ((c >>> 2) & 0x7) + 4\n                        offset = array[pos] + ((c >>> 5) << 8)\n                        pos += 1\n                        break\n                    case 2:\n                        if (pos + 1 >= arrayLength) {\n                            return false\n                        }\n                        len = (c >>> 2) + 1\n                        offset = array[pos] + (array[pos + 1] << 8)\n                        pos += 2\n                        break\n                    case 3:\n                        if (pos + 3 >= arrayLength) {\n                            return false\n                        }\n                        len = (c >>> 2) + 1\n                        offset = array[pos] + (array[pos + 1] << 8) + (array[pos + 2] << 16) + (array[pos + 3] << 24)\n                        pos += 4\n                        break\n                    default:\n                        break\n                }\n                if (offset === 0 || offset > outPos) {\n                    return false\n                }\n                selfCopyBytes(outBuffer, outPos, offset, len)\n                outPos += len\n            }\n        }\n        return true\n    }\n\n\n    // var snappyJS = {};\n    // SnappyDecompressor.prototype.readUncompressedLength = function () {\n    //     var result = 0\n    //     var shift = 0\n    //     var c, val\n    //     while (shift < 32 && this.pos < this.array.length) {\n    //         c = this.array[this.pos]\n    //         this.pos += 1\n    //         val = c & 0x7f\n    //         if (((val << shift) >>> shift) !== val) {\n    //             return -1\n    //         }\n    //         result |= val << shift\n    //         if (c < 128) {\n    //             return result\n    //         }\n    //         shift += 7\n    //     }\n    //     return -1\n    // }\n    //\n    // SnappyDecompressor.prototype.uncompressToBuffer = function (outBuffer) {\n    //     var array = this.array\n    //     var arrayLength = array.length\n    //     var pos = this.pos\n    //     var outPos = 0\n    //\n    //     var c, len, smallLen\n    //     var offset\n    //\n    //     while (pos < array.length) {\n    //         c = array[pos]\n    //         pos += 1\n    //         if ((c & 0x3) === 0) {\n    //             // Literal\n    //             len = (c >>> 2) + 1\n    //             if (len > 60) {\n    //                 if (pos + 3 >= arrayLength) {\n    //                     return false\n    //                 }\n    //                 smallLen = len - 60\n    //                 len = array[pos] + (array[pos + 1] << 8) + (array[pos + 2] << 16) + (array[pos + 3] << 24)\n    //                 len = (len & WORD_MASK[smallLen]) + 1\n    //                 pos += smallLen\n    //             }\n    //             if (pos + len > arrayLength) {\n    //                 return false\n    //             }\n    //             copyBytes(array, pos, outBuffer, outPos, len)\n    //             pos += len\n    //             outPos += len\n    //         } else {\n    //             switch (c & 0x3) {\n    //                 case 1:\n    //                     len = ((c >>> 2) & 0x7) + 4\n    //                     offset = array[pos] + ((c >>> 5) << 8)\n    //                     pos += 1\n    //                     break\n    //                 case 2:\n    //                     if (pos + 1 >= arrayLength) {\n    //                         return false\n    //                     }\n    //                     len = (c >>> 2) + 1\n    //                     offset = array[pos] + (array[pos + 1] << 8)\n    //                     pos += 2\n    //                     break\n    //                 case 3:\n    //                     if (pos + 3 >= arrayLength) {\n    //                         return false\n    //                     }\n    //                     len = (c >>> 2) + 1\n    //                     offset = array[pos] + (array[pos + 1] << 8) + (array[pos + 2] << 16) + (array[pos + 3] << 24)\n    //                     pos += 4\n    //                     break\n    //                 default:\n    //                     break\n    //             }\n    //             if (offset === 0 || offset > outPos) {\n    //                 return false\n    //             }\n    //             selfCopyBytes(outBuffer, outPos, offset, len)\n    //             outPos += len\n    //         }\n    //     }\n    //     return true\n    // }\n\n\n    function isNode () {\n        if (typeof process === 'object') {\n            if (typeof process.versions === 'object') {\n                if (typeof process.versions.node !== 'undefined') {\n                    return true\n                }\n            }\n        }\n        return false\n    }\n\n    function isUint8Array (object) {\n        return object instanceof Uint8Array && (!isNode() || !Buffer.isBuffer(object))\n    }\n\n    function isArrayBuffer (object) {\n        return object instanceof ArrayBuffer\n    }\n\n    function isBuffer (object) {\n        if (!isNode()) {\n            return false\n        }\n        return Buffer.isBuffer(object)\n    }\n    var TYPE_ERROR_MSG = 'Argument compressed must be type of ArrayBuffer, Buffer, or Uint8Array'\n    function uncompress (compressed) {\n        if (!isUint8Array(compressed) && !isArrayBuffer(compressed) && !isBuffer(compressed)) {\n            throw new TypeError(TYPE_ERROR_MSG)\n        }\n        var uint8Mode = false\n        var arrayBufferMode = false\n        if (isUint8Array(compressed)) {\n            uint8Mode = true\n        } else if (isArrayBuffer(compressed)) {\n            arrayBufferMode = true\n            compressed = new Uint8Array(compressed)\n        }\n        var decompressor = new SnappyDecompressor(compressed)\n        var length = decompressor.readUncompressedLength()\n        if (length === -1) {\n            throw new Error('Invalid Snappy bitstream')\n        }\n        var uncompressed, uncompressedView\n        if (uint8Mode) {\n            uncompressed = new Uint8Array(length)\n            if (!decompressor.uncompressToBuffer(uncompressed)) {\n                throw new Error('Invalid Snappy bitstream')\n            }\n        } else if (arrayBufferMode) {\n            uncompressed = new ArrayBuffer(length)\n            uncompressedView = new Uint8Array(uncompressed)\n            if (!decompressor.uncompressToBuffer(uncompressedView)) {\n                throw new Error('Invalid Snappy bitstream')\n            }\n        } else {\n            uncompressed = Buffer.alloc(length)\n            if (!decompressor.uncompressToBuffer(uncompressed)) {\n                throw new Error('Invalid Snappy bitstream')\n            }\n        }\n        return uncompressed\n    }\n\nexport default uncompress;\n"],"names":[],"mappings":"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"}