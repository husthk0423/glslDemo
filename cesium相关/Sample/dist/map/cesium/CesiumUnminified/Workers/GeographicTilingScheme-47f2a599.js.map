{"version":3,"file":"GeographicTilingScheme-47f2a599.js","sources":["../../../../Source/Core/GeographicTilingScheme.js"],"sourcesContent":["import Cartesian2 from './Cartesian2.js';\nimport Check from './Check.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport Ellipsoid from './Ellipsoid.js';\nimport GeographicProjection from './GeographicProjection.js';\nimport CesiumMath from './Math.js';\nimport Rectangle from './Rectangle.js';\n\n    /**\n     * A tiling scheme for geometry referenced to a simple {@link GeographicProjection} where\n     * longitude and latitude are directly mapped to X and Y.  This projection is commonly\n     * known as geographic, equirectangular, equidistant cylindrical, or plate carr√©e.\n     *\n     * @alias GeographicTilingScheme\n     * @constructor\n     *\n     * @param {Object} [options] Object with the following properties:\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid whose surface is being tiled. Defaults to\n     * the WGS84 ellipsoid.\n     * @param {Rectangle} [options.rectangle=Rectangle.MAX_VALUE] The rectangle, in radians, covered by the tiling scheme.\n     * @param {Number} [options.numberOfLevelZeroTilesX=2] The number of tiles in the X direction at level zero of\n     * the tile tree.\n     * @param {Number} [options.numberOfLevelZeroTilesY=1] The number of tiles in the Y direction at level zero of\n     * the tile tree.\n     */\n    function GeographicTilingScheme(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n        if(typeof Cesium == 'undefined'){\n            this.tileSize = defaultValue(options.tileSize,512);\n        }else{\n            this.tileSize = Cesium.tileSize;\n        }\n\n        this._ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n        this._rectangle = defaultValue(options.rectangle, Rectangle.MAX_VALUE);\n        this._projection = new GeographicProjection(this._ellipsoid);\n        this._numberOfLevelZeroTilesX = defaultValue(options.numberOfLevelZeroTilesX, 2);\n        this._numberOfLevelZeroTilesY = defaultValue(options.numberOfLevelZeroTilesY, 1);\n    }\n\n    Object.defineProperties(GeographicTilingScheme.prototype, {\n        /**\n         * Gets the ellipsoid that is tiled by this tiling scheme.\n         * @memberof GeographicTilingScheme.prototype\n         * @type {Ellipsoid}\n         */\n        ellipsoid : {\n            get : function() {\n                return this._ellipsoid;\n            }\n        },\n\n        /**\n         * Gets the rectangle, in radians, covered by this tiling scheme.\n         * @memberof GeographicTilingScheme.prototype\n         * @type {Rectangle}\n         */\n        rectangle : {\n            get : function() {\n                return this._rectangle;\n            }\n        },\n\n        /**\n         * Gets the map projection used by this tiling scheme.\n         * @memberof GeographicTilingScheme.prototype\n         * @type {MapProjection}\n         */\n        projection : {\n            get : function() {\n                return this._projection;\n            }\n        }\n    });\n\n    /**\n     * Gets the total number of tiles in the X direction at a specified level-of-detail.\n     *\n     * @param {Number} level The level-of-detail.\n     * @returns {Number} The number of tiles in the X direction at the given level.\n     */\n    GeographicTilingScheme.prototype.getNumberOfXTilesAtLevel = function(level) {\n        return this._numberOfLevelZeroTilesX << level;\n    };\n\n    /**\n     * Gets the total number of tiles in the Y direction at a specified level-of-detail.\n     *\n     * @param {Number} level The level-of-detail.\n     * @returns {Number} The number of tiles in the Y direction at the given level.\n     */\n    GeographicTilingScheme.prototype.getNumberOfYTilesAtLevel = function(level) {\n        return this._numberOfLevelZeroTilesY << level;\n    };\n\n    /**\n     * Transforms a rectangle specified in geodetic radians to the native coordinate system\n     * of this tiling scheme.\n     *\n     * @param {Rectangle} rectangle The rectangle to transform.\n     * @param {Rectangle} [result] The instance to which to copy the result, or undefined if a new instance\n     *        should be created.\n     * @returns {Rectangle} The specified 'result', or a new object containing the native rectangle if 'result'\n     *          is undefined.\n     */\n    GeographicTilingScheme.prototype.rectangleToNativeRectangle = function(rectangle, result) {\n        //>>includeStart('debug', pragmas.debug);\n        Check.defined('rectangle', rectangle);\n        //>>includeEnd('debug');\n\n        var west = CesiumMath.toDegrees(rectangle.west);\n        var south = CesiumMath.toDegrees(rectangle.south);\n        var east = CesiumMath.toDegrees(rectangle.east);\n        var north = CesiumMath.toDegrees(rectangle.north);\n\n        if (!defined(result)) {\n            return new Rectangle(west, south, east, north);\n        }\n\n        result.west = west;\n        result.south = south;\n        result.east = east;\n        result.north = north;\n        return result;\n    };\n\n    /**\n     * Converts tile x, y coordinates and level to a rectangle expressed in the native coordinates\n     * of the tiling scheme.\n     *\n     * @param {Number} x The integer x coordinate of the tile.\n     * @param {Number} y The integer y coordinate of the tile.\n     * @param {Number} level The tile level-of-detail.  Zero is the least detailed.\n     * @param {Object} [result] The instance to which to copy the result, or undefined if a new instance\n     *        should be created.\n     * @returns {Rectangle} The specified 'result', or a new object containing the rectangle\n     *          if 'result' is undefined.\n     */\n    GeographicTilingScheme.prototype.tileXYToNativeRectangle = function(x, y, level, result) {\n        var rectangleRadians = this.tileXYToRectangle(x, y, level, result);\n        rectangleRadians.west = CesiumMath.toDegrees(rectangleRadians.west);\n        rectangleRadians.south = CesiumMath.toDegrees(rectangleRadians.south);\n        rectangleRadians.east = CesiumMath.toDegrees(rectangleRadians.east);\n        rectangleRadians.north = CesiumMath.toDegrees(rectangleRadians.north);\n        return rectangleRadians;\n    };\n\n    /**\n     * Converts tile x, y coordinates and level to a cartographic rectangle in radians.\n     *\n     * @param {Number} x The integer x coordinate of the tile.\n     * @param {Number} y The integer y coordinate of the tile.\n     * @param {Number} level The tile level-of-detail.  Zero is the least detailed.\n     * @param {Object} [result] The instance to which to copy the result, or undefined if a new instance\n     *        should be created.\n     * @returns {Rectangle} The specified 'result', or a new object containing the rectangle\n     *          if 'result' is undefined.\n     */\n    GeographicTilingScheme.prototype.tileXYToRectangle = function(x, y, level, result) {\n        var rectangle = this._rectangle;\n\n        if(this.tileSize == 512){\n            level --;\n        }\n        var xTiles = this.getNumberOfXTilesAtLevel(level);\n        var yTiles = this.getNumberOfYTilesAtLevel(level);\n\n        var xTileWidth = rectangle.width / xTiles;\n        var west = x * xTileWidth + rectangle.west;\n        var east = (x + 1) * xTileWidth + rectangle.west;\n\n        var yTileHeight = rectangle.height / yTiles;\n        var north = rectangle.north - y * yTileHeight;\n        var south = rectangle.north - (y + 1) * yTileHeight;\n\n        if (!defined(result)) {\n            result = new Rectangle(west, south, east, north);\n        }\n\n        result.west = west;\n        result.south = south;\n        result.east = east;\n        result.north = north;\n        return result;\n    };\n\n    /**\n     * Calculates the tile x, y coordinates of the tile containing\n     * a given cartographic position.\n     *\n     * @param {Cartographic} position The position.\n     * @param {Number} level The tile level-of-detail.  Zero is the least detailed.\n     * @param {Cartesian2} [result] The instance to which to copy the result, or undefined if a new instance\n     *        should be created.\n     * @returns {Cartesian2} The specified 'result', or a new object containing the tile x, y coordinates\n     *          if 'result' is undefined.\n     */\n    GeographicTilingScheme.prototype.positionToTileXY = function(position, level, result) {\n        var rectangle = this._rectangle;\n        if (!Rectangle.contains(rectangle, position)) {\n            // outside the bounds of the tiling scheme\n            return undefined;\n        }\n\n        if(this.tileSize == 512){\n            level --;\n        }\n\n        var xTiles = this.getNumberOfXTilesAtLevel(level);\n        var yTiles = this.getNumberOfYTilesAtLevel(level);\n\n        var xTileWidth = rectangle.width / xTiles;\n        var yTileHeight = rectangle.height / yTiles;\n\n        var longitude = position.longitude;\n        if (rectangle.east < rectangle.west) {\n            longitude += CesiumMath.TWO_PI;\n        }\n\n        var xTileCoordinate = (longitude - rectangle.west) / xTileWidth | 0;\n        if (xTileCoordinate >= xTiles) {\n            xTileCoordinate = xTiles - 1;\n        }\n\n        var yTileCoordinate = (rectangle.north - position.latitude) / yTileHeight | 0;\n        if (yTileCoordinate >= yTiles) {\n            yTileCoordinate = yTiles - 1;\n        }\n\n        if (!defined(result)) {\n            return new Cartesian2(xTileCoordinate, yTileCoordinate);\n        }\n\n        result.x = xTileCoordinate;\n        result.y = yTileCoordinate;\n        return result;\n    };\nexport default GeographicTilingScheme;\n"],"names":["defaultValue","Ellipsoid","Rectangle","GeographicProjection","Check","CesiumMath","defined","Cartesian2"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;IASI;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,SAAS,sBAAsB,CAAC,OAAO,EAAE;IAC7C,QAAQ,OAAO,GAAGA,yBAAY,CAAC,OAAO,EAAEA,yBAAY,CAAC,YAAY,CAAC,CAAC;IACnE,QAAQ,GAAG,OAAO,MAAM,IAAI,WAAW,CAAC;IACxC,YAAY,IAAI,CAAC,QAAQ,GAAGA,yBAAY,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;IAC/D,SAAS,KAAI;IACb,YAAY,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;IAC5C,SAAS;AACT;IACA,QAAQ,IAAI,CAAC,UAAU,GAAGA,yBAAY,CAAC,OAAO,CAAC,SAAS,EAAEC,oBAAS,CAAC,KAAK,CAAC,CAAC;IAC3E,QAAQ,IAAI,CAAC,UAAU,GAAGD,yBAAY,CAAC,OAAO,CAAC,SAAS,EAAEE,mBAAS,CAAC,SAAS,CAAC,CAAC;IAC/E,QAAQ,IAAI,CAAC,WAAW,GAAG,IAAIC,yCAAoB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACrE,QAAQ,IAAI,CAAC,wBAAwB,GAAGH,yBAAY,CAAC,OAAO,CAAC,uBAAuB,EAAE,CAAC,CAAC,CAAC;IACzF,QAAQ,IAAI,CAAC,wBAAwB,GAAGA,yBAAY,CAAC,OAAO,CAAC,uBAAuB,EAAE,CAAC,CAAC,CAAC;IACzF,KAAK;AACL;IACA,IAAI,MAAM,CAAC,gBAAgB,CAAC,sBAAsB,CAAC,SAAS,EAAE;IAC9D;IACA;IACA;IACA;IACA;IACA,QAAQ,SAAS,GAAG;IACpB,YAAY,GAAG,GAAG,WAAW;IAC7B,gBAAgB,OAAO,IAAI,CAAC,UAAU,CAAC;IACvC,aAAa;IACb,SAAS;AACT;IACA;IACA;IACA;IACA;IACA;IACA,QAAQ,SAAS,GAAG;IACpB,YAAY,GAAG,GAAG,WAAW;IAC7B,gBAAgB,OAAO,IAAI,CAAC,UAAU,CAAC;IACvC,aAAa;IACb,SAAS;AACT;IACA;IACA;IACA;IACA;IACA;IACA,QAAQ,UAAU,GAAG;IACrB,YAAY,GAAG,GAAG,WAAW;IAC7B,gBAAgB,OAAO,IAAI,CAAC,WAAW,CAAC;IACxC,aAAa;IACb,SAAS;IACT,KAAK,CAAC,CAAC;AACP;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,sBAAsB,CAAC,SAAS,CAAC,wBAAwB,GAAG,SAAS,KAAK,EAAE;IAChF,QAAQ,OAAO,IAAI,CAAC,wBAAwB,IAAI,KAAK,CAAC;IACtD,KAAK,CAAC;AACN;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,sBAAsB,CAAC,SAAS,CAAC,wBAAwB,GAAG,SAAS,KAAK,EAAE;IAChF,QAAQ,OAAO,IAAI,CAAC,wBAAwB,IAAI,KAAK,CAAC;IACtD,KAAK,CAAC;AACN;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,sBAAsB,CAAC,SAAS,CAAC,0BAA0B,GAAG,SAAS,SAAS,EAAE,MAAM,EAAE;IAC9F;IACA,QAAQI,WAAK,CAAC,OAAO,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;IAC9C;AACA;IACA,QAAQ,IAAI,IAAI,GAAGC,gBAAU,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IACxD,QAAQ,IAAI,KAAK,GAAGA,gBAAU,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IAC1D,QAAQ,IAAI,IAAI,GAAGA,gBAAU,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IACxD,QAAQ,IAAI,KAAK,GAAGA,gBAAU,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;AAC1D;IACA,QAAQ,IAAI,CAACC,oBAAO,CAAC,MAAM,CAAC,EAAE;IAC9B,YAAY,OAAO,IAAIJ,mBAAS,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;IAC3D,SAAS;AACT;IACA,QAAQ,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;IAC3B,QAAQ,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;IAC7B,QAAQ,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;IAC3B,QAAQ,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;IAC7B,QAAQ,OAAO,MAAM,CAAC;IACtB,KAAK,CAAC;AACN;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,sBAAsB,CAAC,SAAS,CAAC,uBAAuB,GAAG,SAAS,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE;IAC7F,QAAQ,IAAI,gBAAgB,GAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;IAC3E,QAAQ,gBAAgB,CAAC,IAAI,GAAGG,gBAAU,CAAC,SAAS,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;IAC5E,QAAQ,gBAAgB,CAAC,KAAK,GAAGA,gBAAU,CAAC,SAAS,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;IAC9E,QAAQ,gBAAgB,CAAC,IAAI,GAAGA,gBAAU,CAAC,SAAS,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;IAC5E,QAAQ,gBAAgB,CAAC,KAAK,GAAGA,gBAAU,CAAC,SAAS,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;IAC9E,QAAQ,OAAO,gBAAgB,CAAC;IAChC,KAAK,CAAC;AACN;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,sBAAsB,CAAC,SAAS,CAAC,iBAAiB,GAAG,SAAS,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE;IACvF,QAAQ,IAAI,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC;AACxC;IACA,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,GAAG,CAAC;IAChC,YAAY,KAAK,GAAG,CAAC;IACrB,SAAS;IACT,QAAQ,IAAI,MAAM,GAAG,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC;IAC1D,QAAQ,IAAI,MAAM,GAAG,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC;AAC1D;IACA,QAAQ,IAAI,UAAU,GAAG,SAAS,CAAC,KAAK,GAAG,MAAM,CAAC;IAClD,QAAQ,IAAI,IAAI,GAAG,CAAC,GAAG,UAAU,GAAG,SAAS,CAAC,IAAI,CAAC;IACnD,QAAQ,IAAI,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,UAAU,GAAG,SAAS,CAAC,IAAI,CAAC;AACzD;IACA,QAAQ,IAAI,WAAW,GAAG,SAAS,CAAC,MAAM,GAAG,MAAM,CAAC;IACpD,QAAQ,IAAI,KAAK,GAAG,SAAS,CAAC,KAAK,GAAG,CAAC,GAAG,WAAW,CAAC;IACtD,QAAQ,IAAI,KAAK,GAAG,SAAS,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,WAAW,CAAC;AAC5D;IACA,QAAQ,IAAI,CAACC,oBAAO,CAAC,MAAM,CAAC,EAAE;IAC9B,YAAY,MAAM,GAAG,IAAIJ,mBAAS,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;IAC7D,SAAS;AACT;IACA,QAAQ,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;IAC3B,QAAQ,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;IAC7B,QAAQ,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;IAC3B,QAAQ,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;IAC7B,QAAQ,OAAO,MAAM,CAAC;IACtB,KAAK,CAAC;AACN;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,sBAAsB,CAAC,SAAS,CAAC,gBAAgB,GAAG,SAAS,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE;IAC1F,QAAQ,IAAI,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC;IACxC,QAAQ,IAAI,CAACA,mBAAS,CAAC,QAAQ,CAAC,SAAS,EAAE,QAAQ,CAAC,EAAE;IACtD;IACA,YAAY,OAAO,SAAS,CAAC;IAC7B,SAAS;AACT;IACA,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,GAAG,CAAC;IAChC,YAAY,KAAK,GAAG,CAAC;IACrB,SAAS;AACT;IACA,QAAQ,IAAI,MAAM,GAAG,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC;IAC1D,QAAQ,IAAI,MAAM,GAAG,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC;AAC1D;IACA,QAAQ,IAAI,UAAU,GAAG,SAAS,CAAC,KAAK,GAAG,MAAM,CAAC;IAClD,QAAQ,IAAI,WAAW,GAAG,SAAS,CAAC,MAAM,GAAG,MAAM,CAAC;AACpD;IACA,QAAQ,IAAI,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC;IAC3C,QAAQ,IAAI,SAAS,CAAC,IAAI,GAAG,SAAS,CAAC,IAAI,EAAE;IAC7C,YAAY,SAAS,IAAIG,gBAAU,CAAC,MAAM,CAAC;IAC3C,SAAS;AACT;IACA,QAAQ,IAAI,eAAe,GAAG,CAAC,SAAS,GAAG,SAAS,CAAC,IAAI,IAAI,UAAU,GAAG,CAAC,CAAC;IAC5E,QAAQ,IAAI,eAAe,IAAI,MAAM,EAAE;IACvC,YAAY,eAAe,GAAG,MAAM,GAAG,CAAC,CAAC;IACzC,SAAS;AACT;IACA,QAAQ,IAAI,eAAe,GAAG,CAAC,SAAS,CAAC,KAAK,GAAG,QAAQ,CAAC,QAAQ,IAAI,WAAW,GAAG,CAAC,CAAC;IACtF,QAAQ,IAAI,eAAe,IAAI,MAAM,EAAE;IACvC,YAAY,eAAe,GAAG,MAAM,GAAG,CAAC,CAAC;IACzC,SAAS;AACT;IACA,QAAQ,IAAI,CAACC,oBAAO,CAAC,MAAM,CAAC,EAAE;IAC9B,YAAY,OAAO,IAAIC,qBAAU,CAAC,eAAe,EAAE,eAAe,CAAC,CAAC;IACpE,SAAS;AACT;IACA,QAAQ,MAAM,CAAC,CAAC,GAAG,eAAe,CAAC;IACnC,QAAQ,MAAM,CAAC,CAAC,GAAG,eAAe,CAAC;IACnC,QAAQ,OAAO,MAAM,CAAC;IACtB,KAAK;;;;;;;;"}