define(["./Color-f5223c05","./GeometryInstance-0944d7d9","./GeometryAttribute-c4e682f4","./ComponentDatatype-c1201c79","./Cartesian2-cce28994","./BoundingSphere-2b618cd6","./Check-edea0f91","./defaultValue-81eec7ed","./Transforms-599d3866","./when-422ea0ae","./Matrix4-da4bb68c","./Math-29cbc3fa","./RuntimeError-94b0bf5f","./Resource-721e53e7","./combine-0897f2e3","./Matrix2-c857e514","./WebGLConstants-1c8239cc","./Rectangle-1bad9972","./GeographicProjection-54ec8d9d"],(function(t,e,s,i,o,r,n,a,h,c,p,u,l,m,y,d,g,b,f){"use strict";return class{constructor(e){this.positions=null,this.normals=null,this.sts=null,this.indices=null,this.geometrys=e.positions,this.color=e.color,this.u_tcolor=e.u_tcolor||t.Color.YELLOW,this.height=e.height||500,this.speed=e.speed||600,this.direction=e.direction||-1,this.translucent=e.translucent||!1,this.type=e.type||1}createGeometryInstances(){let t=[];for(let s=0;s<this.geometrys.length;s++){let i=this.geometrys[s],o=this.computePositions_dws(i,this.height);this.positions=o.pos,this.normals=o.normals,this.sts=o.sts,this.indices=o.indices;let r=this.createGeometry(this.positions,this.normals,this.sts,this.indices),n=new e.GeometryInstance({id:Math.random(),geometry:r});t.push(n)}return t}createGeometry(t,e,o,n){let a=new Float64Array(t),h=new Float32Array(e),c=new Float32Array(o),p=new Uint16Array(n);return new s.Geometry({attributes:{position:new s.GeometryAttribute({componentDatatype:i.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:a}),normal:new s.GeometryAttribute({componentDatatype:i.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:h}),st:new s.GeometryAttribute({componentDatatype:i.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:c})},indices:p,primitiveType:s.PrimitiveType.TRIANGLES,boundingSphere:r.BoundingSphere.fromVertices(a)})}computePositions_dws(t,e){let s=t.length,i=[];for(let s in t)i.push(this.addHeight(t[s],e));let o=[],r=[],n=[],a=[];for(let e=0;e<s-1;e++){let s=e+1;o.push(t[e].x,t[e].y,t[e].z),o.push(t[s].x,t[s].y,t[s].z),o.push(i[s].x,i[s].y,i[s].z),o.push(i[e].x,i[e].y,i[e].z),a.push(0,0,1),a.push(0,0,1),a.push(0,0,1),a.push(0,0,1),r.push(0,0,1,0,1,1,0,1);let h=4*e,c=h+1,p=h+2,u=h+3;n.push(h,c,p,p,u,h)}return{pos:o,normals:a,sts:r,indices:n}}addHeight(t,e){let s=e||0;if(t.hasOwnProperty("height"))return t.height+=s,t;{let e=o.Cartographic.fromCartesian(t);return e.height+=s,o.Cartographic.toCartesian(e)}}}}));
