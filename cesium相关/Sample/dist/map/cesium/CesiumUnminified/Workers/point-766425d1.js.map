{"version":3,"file":"point-766425d1.js","sources":["../../../../Source/mapbox/data/segment.js","../../../../Source/mapbox/data/bucket/Bucket.js","../../../../Source/ThirdParty/quickselect.js","../../../../Source/mapbox/data/bucket/ClassifyRings.js","../../../../Source/mapbox/data/bucket/tess2.js","../../../../Source/mapbox/util/BufferUtil.js","../../../../Source/mapbox/util/StructArray.js","../../../../Source/mapbox/util/ElementArrayType.js","../../../../Source/mapbox/util/VertexArrayType.js","../../../../Source/mapbox/data/bucket/FillBucket.js","../../../../Source/mapbox/data/bucket/LineBucket.js","../../../../Source/util/Simplify.js","../../../../Source/mapbox/data/point.js"],"sourcesContent":["// @flow\nclass SegmentVector {\n    constructor(segments) {\n        if(segments){\n            this.segments = segments;\n        }else{\n            this.segments = [];\n        }\n    }\n\n    prepareSegment(numVertices, layoutVertexArray, indexArray, sortKey) {\n        let segment = this.segments[this.segments.length - 1];\n        if (numVertices > SegmentVector.MAX_VERTEX_ARRAY_LENGTH) console.log(`Max vertices per segment is ${SegmentVector.MAX_VERTEX_ARRAY_LENGTH}: bucket requested ${numVertices}`);\n        if (!segment || segment.vertexLength + numVertices > SegmentVector.MAX_VERTEX_ARRAY_LENGTH || segment.sortKey !== sortKey) {\n            segment = ({\n                vertexOffset: layoutVertexArray.length,\n                primitiveOffset: indexArray.length,\n                vertexLength: 0,\n                primitiveLength: 0\n            });\n            if (sortKey !== undefined) segment.sortKey = sortKey;\n            this.segments.push(segment);\n        }\n        return segment;\n    }\n\n    get() {\n        return this.segments;\n    }\n\n    destroy() {\n        for (const segment of this.segments) {\n            // for (const k in segment.vaos) {\n            //     segment.vaos[k].destroy();\n            // }\n            if(segment.vao){\n                segment.vao.destroy();\n            }\n        }\n    }\n\n    static simpleSegment(vertexOffset, primitiveOffset, vertexLength, primitiveLength){\n        return new SegmentVector([{\n            vertexOffset,\n            primitiveOffset,\n            vertexLength,\n            primitiveLength,\n            // vaos: {},\n            sortKey: 0\n        }]);\n    }\n}\n\n/*\n * The maximum size of a vertex array. This limit is imposed by WebGL's 16 bit\n * addressing of vertex buffers.\n * @private\n * @readonly\n */\nSegmentVector.MAX_VERTEX_ARRAY_LENGTH = Math.pow(2, 16) - 1;\n\nexport default SegmentVector;\n","'use strict';\n\n\n/**\n * The `Bucket` class is the single point of knowledge about turning vector\n * tiles into WebGL buffers.\n *\n * `Bucket` is an abstract class. A subclass exists for each style layer type.\n * Create a bucket via the `StyleLayer#createBucket` method.\n *\n * The concrete bucket types, using layout options from the style layer,\n * transform feature geometries into vertex and element data for use by the\n * vertex shader.  They also (via `ProgramConfiguration`) use feature\n * properties and the zoom level to populate the attributes needed for\n * data-driven styling.\n *\n * Buckets are designed to be built on a worker thread and then serialized and\n * transferred back to the main thread for rendering.  On the worker side, a\n * bucket's vertex, element, and attribute data is stored in `bucket.arrays:\n * ArrayGroup`.  When a bucket's data is serialized and sent back to the main\n * thread, is gets deserialized (using `new Bucket(serializedBucketData)`, with\n * the array data now stored in `bucket.buffers: BufferGroup`.  BufferGroups\n * hold the same data as ArrayGroups, but are tuned for consumption by WebGL.\n *\n * @private\n */\nclass Bucket {\n    /**\n     * @param options\n     * @param {number} options.zoom Zoom level of the buffers being built. May be\n     *     a fractional zoom level.\n     * @param options.layer A Mapbox style layer object\n     * @param {Object.<string, Buffer>} options.buffers The set of `Buffer`s being\n     *     built for this tile. This object facilitates sharing of `Buffer`s be\n           between `Bucket`s.\n     */\n    constructor (options) {\n        this.style= options.style;\n        this.type = options.type;\n        this.tileSize = options.tileSize;\n    }\n\n\n    serialize(transferables) {\n\n    }\n\n    /**\n     * Release the WebGL resources associated with the buffers. Note that because\n     * buckets are shared between layers having the same layout properties, they\n     * must be destroyed in groups (all buckets for a tile, or all symbol buckets).\n     *\n     * @private\n     */\n    destroy() {\n    }\n}\n\nexport default Bucket;\n","\nfunction quickselect(arr, k, left, right, compare) {\n    quickselectStep(arr, k, left || 0, right || (arr.length - 1), compare || defaultCompare);\n};\n\nfunction quickselectStep(arr, k, left, right, compare) {\n\n    while (right > left) {\n        if (right - left > 600) {\n            var n = right - left + 1;\n            var m = k - left + 1;\n            var z = Math.log(n);\n            var s = 0.5 * Math.exp(2 * z / 3);\n            var sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n            var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n            var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n            quickselectStep(arr, k, newLeft, newRight, compare);\n        }\n\n        var t = arr[k];\n        var i = left;\n        var j = right;\n\n        swap(arr, left, k);\n        if (compare(arr[right], t) > 0) swap(arr, left, right);\n\n        while (i < j) {\n            swap(arr, i, j);\n            i++;\n            j--;\n            while (compare(arr[i], t) < 0) i++;\n            while (compare(arr[j], t) > 0) j--;\n        }\n\n        if (compare(arr[left], t) === 0) swap(arr, left, j);\n        else {\n            j++;\n            swap(arr, j, right);\n        }\n\n        if (j <= k) left = j + 1;\n        if (k <= j) right = j - 1;\n    }\n}\n\nfunction swap(arr, i, j) {\n    var tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\nfunction defaultCompare(a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n}\n\nexport default quickselect;\n","import quickselect from '../../../ThirdParty/quickselect';\n\n// classifies an array of rings into polygons with outer rings and holes\n\n function calculateSignedArea(ring){\n    let sum = 0;\n    for (let i = 0, len = ring.length, j = len - 1, p1, p2; i < len; j = i++) {\n        p1 = ring[i];\n        p2 = ring[j];\n        sum += (p2.x - p1.x) * (p1.y + p2.y);\n    }\n    return sum;\n};\n\nexport default function classifyRings(rings, maxRings) {\n    const len = rings.length;\n\n    if (len <= 0) return [];\n\n    const polygons = [];\n    let polygon =[];\n        // ccw;\n\n    for (let i = 0; i < len; i++) {\n        const area = calculateSignedArea(rings[i]);\n        if (area === 0) continue;\n\n        rings[i].area = Math.abs(area);\n\n        // if (ccw === undefined) ccw = area < 0;\n        //\n        // if (ccw === area < 0) {\n        //     if (polygon) polygons.push(polygon);\n        //     polygon = [rings[i]];\n        //\n        // } else {\n            polygon.push(rings[i]);\n        // }\n    }\n    if (polygon) polygons.push(polygon);\n\n    // Earcut performance degrages with the # of rings in a polygon. For this\n    // reason, we limit strip out all but the `maxRings` largest rings.\n    if (maxRings > 1) {\n        for (let j = 0; j < polygons.length; j++) {\n            if (polygons[j].length <= maxRings) continue;\n            quickselect(polygons[j], maxRings, 1, polygons[j].length - 1, compareAreas);\n            polygons[j] = polygons[j].slice(0, maxRings);\n        }\n    }\n\n    return polygons;\n};\n\nfunction compareAreas(a, b) {\n    return b.area - a.area;\n}\n","/*\n ** SGI FREE SOFTWARE LICENSE B (Version 2.0, Sept. 18, 2008)\n ** Copyright (C) [dates of first publication] Silicon Graphics, Inc.\n ** All Rights Reserved.\n **\n ** Permission is hereby granted, free of charge, to any person obtaining a copy\n ** of this software and associated documentation files (the \"Software\"), to deal\n ** in the Software without restriction, including without limitation the rights\n ** to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\n ** of the Software, and to permit persons to whom the Software is furnished to do so,\n ** subject to the following conditions:\n **\n ** The above copyright notice including the dates of first publication and either this\n ** permission notice or a reference to http://oss.sgi.com/projects/FreeB/ shall be\n ** included in all copies or substantial portions of the Software.\n **\n ** THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n ** INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n ** PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL SILICON GRAPHICS, INC.\n ** BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n ** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE\n ** OR OTHER DEALINGS IN THE SOFTWARE.\n **\n ** Except as contained in this notice, the name of Silicon Graphics, Inc. shall not\n ** be used in advertising or otherwise to promote the sale, use or other dealings in\n ** this Software without prior written authorization from Silicon Graphics, Inc.\n */\n/*\n ** Author: Mikko Mononen, Aug 2013.\n ** The code is based on GLU libtess by Eric Veach, July 1994\n */\n\n\"use strict\";\n\n/* Public API */\n\nvar Tess2 = {};\n\nexport default Tess2;\n\nTess2.WINDING_ODD = 0;\nTess2.WINDING_NONZERO = 1;\nTess2.WINDING_POSITIVE = 2;\nTess2.WINDING_NEGATIVE = 3;\nTess2.WINDING_ABS_GEQ_TWO = 4;\n\nTess2.POLYGONS = 0;\nTess2.CONNECTED_POLYGONS = 1;\nTess2.BOUNDARY_CONTOURS = 2;\n\nTess2.tesselate = function(opts) {\n    var debug =  opts.debug || false;\n    var tess = new Tesselator();\n    for (var i = 0; i < opts.contours.length; i++) {\n        tess.addContour(opts.vertexSize || 2, opts.contours[i]);\n    }\n    tess.tesselate(opts.windingRule || Tess2.WINDING_ODD,\n        opts.elementType || Tess2.POLYGONS,\n        opts.polySize || 3,\n        opts.vertexSize || 2,\n        opts.normal || [0,0,1]);\n    return {\n        vertices: tess.vertices,\n        vertexIndices: tess.vertexIndices,\n        vertexCount: tess.vertexCount,\n        elements: tess.elements,\n        elementCount: tess.elementCount,\n        mesh: debug ? tess.mesh : undefined\n    };\n};\n\n/* Internal */\n\nvar assert = function(cond) {\n    if (!cond) {\n        throw \"Assertion Failed!\";\n    }\n}\n\n/* The mesh structure is similar in spirit, notation, and operations\n * to the \"quad-edge\" structure (see L. Guibas and J. Stolfi, Primitives\n * for the manipulation of general subdivisions and the computation of\n * Voronoi diagrams, ACM Transactions on Graphics, 4(2):74-123, April 1985).\n * For a simplified description, see the course notes for CS348a,\n * \"Mathematical Foundations of Computer Graphics\", available at the\n * Stanford bookstore (and taught during the fall quarter).\n * The implementation also borrows a tiny subset of the graph-based approach\n * use in Mantyla's Geometric Work Bench (see M. Mantyla, An Introduction\n * to Sold Modeling, Computer Science Press, Rockville, Maryland, 1988).\n *\n * The fundamental data structure is the \"half-edge\".  Two half-edges\n * go together to make an edge, but they point in opposite directions.\n * Each half-edge has a pointer to its mate (the \"symmetric\" half-edge Sym),\n * its origin vertex (Org), the face on its left side (Lface), and the\n * adjacent half-edges in the CCW direction around the origin vertex\n * (Onext) and around the left face (Lnext).  There is also a \"next\"\n * pointer for the global edge list (see below).\n *\n * The notation used for mesh navigation:\n *  Sym   = the mate of a half-edge (same edge, but opposite direction)\n *  Onext = edge CCW around origin vertex (keep same origin)\n *  Dnext = edge CCW around destination vertex (keep same dest)\n *  Lnext = edge CCW around left face (dest becomes new origin)\n *  Rnext = edge CCW around right face (origin becomes new dest)\n *\n * \"prev\" means to substitute CW for CCW in the definitions above.\n *\n * The mesh keeps global lists of all vertices, faces, and edges,\n * stored as doubly-linked circular lists with a dummy header node.\n * The mesh stores pointers to these dummy headers (vHead, fHead, eHead).\n *\n * The circular edge list is special; since half-edges always occur\n * in pairs (e and e->Sym), each half-edge stores a pointer in only\n * one direction.  Starting at eHead and following the e->next pointers\n * will visit each *edge* once (ie. e or e->Sym, but not both).\n * e->Sym stores a pointer in the opposite direction, thus it is\n * always true that e->Sym->next->Sym->next == e.\n *\n * Each vertex has a pointer to next and previous vertices in the\n * circular list, and a pointer to a half-edge with this vertex as\n * the origin (NULL if this is the dummy header).  There is also a\n * field \"data\" for client data.\n *\n * Each face has a pointer to the next and previous faces in the\n * circular list, and a pointer to a half-edge with this face as\n * the left face (NULL if this is the dummy header).  There is also\n * a field \"data\" for client data.\n *\n * Note that what we call a \"face\" is really a loop; faces may consist\n * of more than one loop (ie. not simply connected), but there is no\n * record of this in the data structure.  The mesh may consist of\n * several disconnected regions, so it may not be possible to visit\n * the entire mesh by starting at a half-edge and traversing the edge\n * structure.\n *\n * The mesh does NOT support isolated vertices; a vertex is deleted along\n * with its last edge.  Similarly when two faces are merged, one of the\n * faces is deleted (see tessMeshDelete below).  For mesh operations,\n * all face (loop) and vertex pointers must not be NULL.  However, once\n * mesh manipulation is finished, TESSmeshZapFace can be used to delete\n * faces of the mesh, one at a time.  All external faces can be \"zapped\"\n * before the mesh is returned to the client; then a NULL face indicates\n * a region which is not part of the output polygon.\n */\n\nfunction TESSvertex() {\n    this.next = null;\t/* next vertex (never NULL) */\n    this.prev = null;\t/* previous vertex (never NULL) */\n    this.anEdge = null;\t/* a half-edge with this origin */\n\n\t/* Internal data (keep hidden) */\n    this.coords = [0,0,0];\t/* vertex location in 3D */\n    this.s = 0.0;\n    this.t = 0.0;\t\t\t/* projection onto the sweep plane */\n    this.pqHandle = 0;\t\t/* to allow deletion from priority queue */\n    this.n = 0;\t\t\t\t/* to allow identify unique vertices */\n    this.idx = 0;\t\t\t/* to allow map result to original verts */\n}\n\nfunction TESSface() {\n    this.next = null;\t\t/* next face (never NULL) */\n    this.prev = null;\t\t/* previous face (never NULL) */\n    this.anEdge = null;\t\t/* a half edge with this left face */\n\n\t/* Internal data (keep hidden) */\n    this.trail = null;\t\t/* \"stack\" for conversion to strips */\n    this.n = 0;\t\t\t\t/* to allow identiy unique faces */\n    this.marked = false;\t/* flag for conversion to strips */\n    this.inside = false;\t/* this face is in the polygon interior */\n};\n\nfunction TESShalfEdge(side) {\n    this.next = null;\t\t/* doubly-linked list (prev==Sym->next) */\n    this.Sym = null;\t\t/* same edge, opposite direction */\n    this.Onext = null;\t\t/* next edge CCW around origin */\n    this.Lnext = null;\t\t/* next edge CCW around left face */\n    this.Org = null;\t\t/* origin vertex (Overtex too long) */\n    this.Lface = null;\t\t/* left face */\n\n\t/* Internal data (keep hidden) */\n    this.activeRegion = null;\t/* a region with this upper edge (sweep.c) */\n    this.winding = 0;\t\t\t/* change in winding number when crossing\n\t from the right face to the left face */\n    this.side = side;\n};\n\nTESShalfEdge.prototype = {\n    get Rface() { return this.Sym.Lface; },\n    set Rface(v) { this.Sym.Lface = v; },\n    get Dst() { return this.Sym.Org; },\n    set Dst(v) { this.Sym.Org = v; },\n    get Oprev() { return this.Sym.Lnext; },\n    set Oprev(v) { this.Sym.Lnext = v; },\n    get Lprev() { return this.Onext.Sym; },\n    set Lprev(v) { this.Onext.Sym = v; },\n    get Dprev() { return this.Lnext.Sym; },\n    set Dprev(v) { this.Lnext.Sym = v; },\n    get Rprev() { return this.Sym.Onext; },\n    set Rprev(v) { this.Sym.Onext = v; },\n    get Dnext() { return /*this.Rprev*/this.Sym.Onext.Sym; },  /* 3 pointers */\n    set Dnext(v) { /*this.Rprev*/this.Sym.Onext.Sym = v; },  /* 3 pointers */\n    get Rnext() { return /*this.Oprev*/this.Sym.Lnext.Sym; },  /* 3 pointers */\n    set Rnext(v) { /*this.Oprev*/this.Sym.Lnext.Sym = v; },  /* 3 pointers */\n};\n\n\n\nfunction TESSmesh() {\n    var v = new TESSvertex();\n    var f = new TESSface();\n    var e = new TESShalfEdge(0);\n    var eSym = new TESShalfEdge(1);\n\n    v.next = v.prev = v;\n    v.anEdge = null;\n\n    f.next = f.prev = f;\n    f.anEdge = null;\n    f.trail = null;\n    f.marked = false;\n    f.inside = false;\n\n    e.next = e;\n    e.Sym = eSym;\n    e.Onext = null;\n    e.Lnext = null;\n    e.Org = null;\n    e.Lface = null;\n    e.winding = 0;\n    e.activeRegion = null;\n\n    eSym.next = eSym;\n    eSym.Sym = e;\n    eSym.Onext = null;\n    eSym.Lnext = null;\n    eSym.Org = null;\n    eSym.Lface = null;\n    eSym.winding = 0;\n    eSym.activeRegion = null;\n\n    this.vHead = v;\t\t/* dummy header for vertex list */\n    this.fHead = f;\t\t/* dummy header for face list */\n    this.eHead = e;\t\t/* dummy header for edge list */\n    this.eHeadSym = eSym;\t/* and its symmetric counterpart */\n};\n\n/* The mesh operations below have three motivations: completeness,\n * convenience, and efficiency.  The basic mesh operations are MakeEdge,\n * Splice, and Delete.  All the other edge operations can be implemented\n * in terms of these.  The other operations are provided for convenience\n * and/or efficiency.\n *\n * When a face is split or a vertex is added, they are inserted into the\n * global list *before* the existing vertex or face (ie. e->Org or e->Lface).\n * This makes it easier to process all vertices or faces in the global lists\n * without worrying about processing the same data twice.  As a convenience,\n * when a face is split, the \"inside\" flag is copied from the old face.\n * Other internal data (v->data, v->activeRegion, f->data, f->marked,\n * f->trail, e->winding) is set to zero.\n *\n * ********************** Basic Edge Operations **************************\n *\n * tessMeshMakeEdge( mesh ) creates one edge, two vertices, and a loop.\n * The loop (face) consists of the two new half-edges.\n *\n * tessMeshSplice( eOrg, eDst ) is the basic operation for changing the\n * mesh connectivity and topology.  It changes the mesh so that\n *  eOrg->Onext <- OLD( eDst->Onext )\n *  eDst->Onext <- OLD( eOrg->Onext )\n * where OLD(...) means the value before the meshSplice operation.\n *\n * This can have two effects on the vertex structure:\n *  - if eOrg->Org != eDst->Org, the two vertices are merged together\n *  - if eOrg->Org == eDst->Org, the origin is split into two vertices\n * In both cases, eDst->Org is changed and eOrg->Org is untouched.\n *\n * Similarly (and independently) for the face structure,\n *  - if eOrg->Lface == eDst->Lface, one loop is split into two\n *  - if eOrg->Lface != eDst->Lface, two distinct loops are joined into one\n * In both cases, eDst->Lface is changed and eOrg->Lface is unaffected.\n *\n * tessMeshDelete( eDel ) removes the edge eDel.  There are several cases:\n * if (eDel->Lface != eDel->Rface), we join two loops into one; the loop\n * eDel->Lface is deleted.  Otherwise, we are splitting one loop into two;\n * the newly created loop will contain eDel->Dst.  If the deletion of eDel\n * would create isolated vertices, those are deleted as well.\n *\n * ********************** Other Edge Operations **************************\n *\n * tessMeshAddEdgeVertex( eOrg ) creates a new edge eNew such that\n * eNew == eOrg->Lnext, and eNew->Dst is a newly created vertex.\n * eOrg and eNew will have the same left face.\n *\n * tessMeshSplitEdge( eOrg ) splits eOrg into two edges eOrg and eNew,\n * such that eNew == eOrg->Lnext.  The new vertex is eOrg->Dst == eNew->Org.\n * eOrg and eNew will have the same left face.\n *\n * tessMeshConnect( eOrg, eDst ) creates a new edge from eOrg->Dst\n * to eDst->Org, and returns the corresponding half-edge eNew.\n * If eOrg->Lface == eDst->Lface, this splits one loop into two,\n * and the newly created loop is eNew->Lface.  Otherwise, two disjoint\n * loops are merged into one, and the loop eDst->Lface is destroyed.\n *\n * ************************ Other Operations *****************************\n *\n * tessMeshNewMesh() creates a new mesh with no edges, no vertices,\n * and no loops (what we usually call a \"face\").\n *\n * tessMeshUnion( mesh1, mesh2 ) forms the union of all structures in\n * both meshes, and returns the new mesh (the old meshes are destroyed).\n *\n * tessMeshDeleteMesh( mesh ) will free all storage for any valid mesh.\n *\n * tessMeshZapFace( fZap ) destroys a face and removes it from the\n * global face list.  All edges of fZap will have a NULL pointer as their\n * left face.  Any edges which also have a NULL pointer as their right face\n * are deleted entirely (along with any isolated vertices this produces).\n * An entire mesh can be deleted by zapping its faces, one at a time,\n * in any order.  Zapped faces cannot be used in further mesh operations!\n *\n * tessMeshCheckMesh( mesh ) checks a mesh for self-consistency.\n */\n\nTESSmesh.prototype = {\n\n\t/* MakeEdge creates a new pair of half-edges which form their own loop.\n\t * No vertex or face structures are allocated, but these must be assigned\n\t * before the current edge operation is completed.\n\t */\n    //static TESShalfEdge *MakeEdge( TESSmesh* mesh, TESShalfEdge *eNext )\n    makeEdge_: function(eNext) {\n        var e = new TESShalfEdge(0);\n        var eSym = new TESShalfEdge(1);\n\n\t\t/* Make sure eNext points to the first edge of the edge pair */\n        if( eNext.Sym.side < eNext.side ) { eNext = eNext.Sym; }\n\n\t\t/* Insert in circular doubly-linked list before eNext.\n\t\t * Note that the prev pointer is stored in Sym->next.\n\t\t */\n        var ePrev = eNext.Sym.next;\n        eSym.next = ePrev;\n        ePrev.Sym.next = e;\n        e.next = eNext;\n        eNext.Sym.next = eSym;\n\n        e.Sym = eSym;\n        e.Onext = e;\n        e.Lnext = eSym;\n        e.Org = null;\n        e.Lface = null;\n        e.winding = 0;\n        e.activeRegion = null;\n\n        eSym.Sym = e;\n        eSym.Onext = eSym;\n        eSym.Lnext = e;\n        eSym.Org = null;\n        eSym.Lface = null;\n        eSym.winding = 0;\n        eSym.activeRegion = null;\n\n        return e;\n    },\n\n\t/* Splice( a, b ) is best described by the Guibas/Stolfi paper or the\n\t * CS348a notes (see mesh.h).  Basically it modifies the mesh so that\n\t * a->Onext and b->Onext are exchanged.  This can have various effects\n\t * depending on whether a and b belong to different face or vertex rings.\n\t * For more explanation see tessMeshSplice() below.\n\t */\n    // static void Splice( TESShalfEdge *a, TESShalfEdge *b )\n    splice_: function(a, b) {\n        var aOnext = a.Onext;\n        var bOnext = b.Onext;\n        aOnext.Sym.Lnext = b;\n        bOnext.Sym.Lnext = a;\n        a.Onext = bOnext;\n        b.Onext = aOnext;\n    },\n\n\t/* MakeVertex( newVertex, eOrig, vNext ) attaches a new vertex and makes it the\n\t * origin of all edges in the vertex loop to which eOrig belongs. \"vNext\" gives\n\t * a place to insert the new vertex in the global vertex list.  We insert\n\t * the new vertex *before* vNext so that algorithms which walk the vertex\n\t * list will not see the newly created vertices.\n\t */\n    //static void MakeVertex( TESSvertex *newVertex, TESShalfEdge *eOrig, TESSvertex *vNext )\n    makeVertex_: function(newVertex, eOrig, vNext) {\n        var vNew = newVertex;\n        assert(vNew !== null);\n\n\t\t/* insert in circular doubly-linked list before vNext */\n        var vPrev = vNext.prev;\n        vNew.prev = vPrev;\n        vPrev.next = vNew;\n        vNew.next = vNext;\n        vNext.prev = vNew;\n\n        vNew.anEdge = eOrig;\n\t\t/* leave coords, s, t undefined */\n\n\t\t/* fix other edges on this vertex loop */\n        var e = eOrig;\n        do {\n            e.Org = vNew;\n            e = e.Onext;\n        } while(e !== eOrig);\n    },\n\n\t/* MakeFace( newFace, eOrig, fNext ) attaches a new face and makes it the left\n\t * face of all edges in the face loop to which eOrig belongs.  \"fNext\" gives\n\t * a place to insert the new face in the global face list.  We insert\n\t * the new face *before* fNext so that algorithms which walk the face\n\t * list will not see the newly created faces.\n\t */\n    // static void MakeFace( TESSface *newFace, TESShalfEdge *eOrig, TESSface *fNext )\n    makeFace_: function(newFace, eOrig, fNext) {\n        var fNew = newFace;\n        assert(fNew !== null);\n\n\t\t/* insert in circular doubly-linked list before fNext */\n        var fPrev = fNext.prev;\n        fNew.prev = fPrev;\n        fPrev.next = fNew;\n        fNew.next = fNext;\n        fNext.prev = fNew;\n\n        fNew.anEdge = eOrig;\n        fNew.trail = null;\n        fNew.marked = false;\n\n\t\t/* The new face is marked \"inside\" if the old one was.  This is a\n\t\t * convenience for the common case where a face has been split in two.\n\t\t */\n        fNew.inside = fNext.inside;\n\n\t\t/* fix other edges on this face loop */\n        var e = eOrig;\n        do {\n            e.Lface = fNew;\n            e = e.Lnext;\n        } while(e !== eOrig);\n    },\n\n\t/* KillEdge( eDel ) destroys an edge (the half-edges eDel and eDel->Sym),\n\t * and removes from the global edge list.\n\t */\n    //static void KillEdge( TESSmesh *mesh, TESShalfEdge *eDel )\n    killEdge_: function(eDel) {\n\t\t/* Half-edges are allocated in pairs, see EdgePair above */\n        if( eDel.Sym.side < eDel.side ) { eDel = eDel.Sym; }\n\n\t\t/* delete from circular doubly-linked list */\n        var eNext = eDel.next;\n        var ePrev = eDel.Sym.next;\n        eNext.Sym.next = ePrev;\n        ePrev.Sym.next = eNext;\n    },\n\n\n\t/* KillVertex( vDel ) destroys a vertex and removes it from the global\n\t * vertex list.  It updates the vertex loop to point to a given new vertex.\n\t */\n    //static void KillVertex( TESSmesh *mesh, TESSvertex *vDel, TESSvertex *newOrg )\n    killVertex_: function(vDel, newOrg) {\n        var eStart = vDel.anEdge;\n\t\t/* change the origin of all affected edges */\n        var e = eStart;\n        do {\n            e.Org = newOrg;\n            e = e.Onext;\n        } while(e !== eStart);\n\n\t\t/* delete from circular doubly-linked list */\n        var vPrev = vDel.prev;\n        var vNext = vDel.next;\n        vNext.prev = vPrev;\n        vPrev.next = vNext;\n    },\n\n\t/* KillFace( fDel ) destroys a face and removes it from the global face\n\t * list.  It updates the face loop to point to a given new face.\n\t */\n    //static void KillFace( TESSmesh *mesh, TESSface *fDel, TESSface *newLface )\n    killFace_: function(fDel, newLface) {\n        var eStart = fDel.anEdge;\n\n\t\t/* change the left face of all affected edges */\n        var e = eStart;\n        do {\n            e.Lface = newLface;\n            e = e.Lnext;\n        } while(e !== eStart);\n\n\t\t/* delete from circular doubly-linked list */\n        var fPrev = fDel.prev;\n        var fNext = fDel.next;\n        fNext.prev = fPrev;\n        fPrev.next = fNext;\n    },\n\n    /****************** Basic Edge Operations **********************/\n\n\t/* tessMeshMakeEdge creates one edge, two vertices, and a loop (face).\n\t * The loop consists of the two new half-edges.\n\t */\n    //TESShalfEdge *tessMeshMakeEdge( TESSmesh *mesh )\n    makeEdge: function() {\n        var newVertex1 = new TESSvertex();\n        var newVertex2 = new TESSvertex();\n        var newFace = new TESSface();\n        var e = this.makeEdge_( this.eHead);\n        this.makeVertex_( newVertex1, e, this.vHead );\n        this.makeVertex_( newVertex2, e.Sym, this.vHead );\n        this.makeFace_( newFace, e, this.fHead );\n        return e;\n    },\n\n\t/* tessMeshSplice( eOrg, eDst ) is the basic operation for changing the\n\t * mesh connectivity and topology.  It changes the mesh so that\n\t *\teOrg->Onext <- OLD( eDst->Onext )\n\t *\teDst->Onext <- OLD( eOrg->Onext )\n\t * where OLD(...) means the value before the meshSplice operation.\n\t *\n\t * This can have two effects on the vertex structure:\n\t *  - if eOrg->Org != eDst->Org, the two vertices are merged together\n\t *  - if eOrg->Org == eDst->Org, the origin is split into two vertices\n\t * In both cases, eDst->Org is changed and eOrg->Org is untouched.\n\t *\n\t * Similarly (and independently) for the face structure,\n\t *  - if eOrg->Lface == eDst->Lface, one loop is split into two\n\t *  - if eOrg->Lface != eDst->Lface, two distinct loops are joined into one\n\t * In both cases, eDst->Lface is changed and eOrg->Lface is unaffected.\n\t *\n\t * Some special cases:\n\t * If eDst == eOrg, the operation has no effect.\n\t * If eDst == eOrg->Lnext, the new face will have a single edge.\n\t * If eDst == eOrg->Lprev, the old face will have a single edge.\n\t * If eDst == eOrg->Onext, the new vertex will have a single edge.\n\t * If eDst == eOrg->Oprev, the old vertex will have a single edge.\n\t */\n    //int tessMeshSplice( TESSmesh* mesh, TESShalfEdge *eOrg, TESShalfEdge *eDst )\n    splice: function(eOrg, eDst) {\n        var joiningLoops = false;\n        var joiningVertices = false;\n\n        if( eOrg === eDst ) return;\n\n        if( eDst.Org !== eOrg.Org ) {\n\t\t\t/* We are merging two disjoint vertices -- destroy eDst->Org */\n            joiningVertices = true;\n            this.killVertex_( eDst.Org, eOrg.Org );\n        }\n        if( eDst.Lface !== eOrg.Lface ) {\n\t\t\t/* We are connecting two disjoint loops -- destroy eDst->Lface */\n            joiningLoops = true;\n            this.killFace_( eDst.Lface, eOrg.Lface );\n        }\n\n\t\t/* Change the edge structure */\n        this.splice_( eDst, eOrg );\n\n        if( ! joiningVertices ) {\n            var newVertex = new TESSvertex();\n\n\t\t\t/* We split one vertex into two -- the new vertex is eDst->Org.\n\t\t\t * Make sure the old vertex points to a valid half-edge.\n\t\t\t */\n            this.makeVertex_( newVertex, eDst, eOrg.Org );\n            eOrg.Org.anEdge = eOrg;\n        }\n        if( ! joiningLoops ) {\n            var newFace = new TESSface();\n\n\t\t\t/* We split one loop into two -- the new loop is eDst->Lface.\n\t\t\t * Make sure the old face points to a valid half-edge.\n\t\t\t */\n            this.makeFace_( newFace, eDst, eOrg.Lface );\n            eOrg.Lface.anEdge = eOrg;\n        }\n    },\n\n\t/* tessMeshDelete( eDel ) removes the edge eDel.  There are several cases:\n\t * if (eDel->Lface != eDel->Rface), we join two loops into one; the loop\n\t * eDel->Lface is deleted.  Otherwise, we are splitting one loop into two;\n\t * the newly created loop will contain eDel->Dst.  If the deletion of eDel\n\t * would create isolated vertices, those are deleted as well.\n\t *\n\t * This function could be implemented as two calls to tessMeshSplice\n\t * plus a few calls to memFree, but this would allocate and delete\n\t * unnecessary vertices and faces.\n\t */\n    //int tessMeshDelete( TESSmesh *mesh, TESShalfEdge *eDel )\n    delete: function(eDel) {\n        var eDelSym = eDel.Sym;\n        var joiningLoops = false;\n\n\t\t/* First step: disconnect the origin vertex eDel->Org.  We make all\n\t\t * changes to get a consistent mesh in this \"intermediate\" state.\n\t\t */\n        if( eDel.Lface !== eDel.Rface ) {\n\t\t\t/* We are joining two loops into one -- remove the left face */\n            joiningLoops = true;\n            this.killFace_( eDel.Lface, eDel.Rface );\n        }\n\n        if( eDel.Onext === eDel ) {\n            this.killVertex_( eDel.Org, null );\n        } else {\n\t\t\t/* Make sure that eDel->Org and eDel->Rface point to valid half-edges */\n            eDel.Rface.anEdge = eDel.Oprev;\n            eDel.Org.anEdge = eDel.Onext;\n\n            this.splice_( eDel, eDel.Oprev );\n            if( ! joiningLoops ) {\n                var newFace = new TESSface();\n\n\t\t\t\t/* We are splitting one loop into two -- create a new loop for eDel. */\n                this.makeFace_( newFace, eDel, eDel.Lface );\n            }\n        }\n\n\t\t/* Claim: the mesh is now in a consistent state, except that eDel->Org\n\t\t * may have been deleted.  Now we disconnect eDel->Dst.\n\t\t */\n        if( eDelSym.Onext === eDelSym ) {\n            this.killVertex_( eDelSym.Org, null );\n            this.killFace_( eDelSym.Lface, null );\n        } else {\n\t\t\t/* Make sure that eDel->Dst and eDel->Lface point to valid half-edges */\n            eDel.Lface.anEdge = eDelSym.Oprev;\n            eDelSym.Org.anEdge = eDelSym.Onext;\n            this.splice_( eDelSym, eDelSym.Oprev );\n        }\n\n\t\t/* Any isolated vertices or faces have already been freed. */\n        this.killEdge_( eDel );\n    },\n\n    /******************** Other Edge Operations **********************/\n\n\t/* All these routines can be implemented with the basic edge\n\t * operations above.  They are provided for convenience and efficiency.\n\t */\n\n\n\t/* tessMeshAddEdgeVertex( eOrg ) creates a new edge eNew such that\n\t * eNew == eOrg->Lnext, and eNew->Dst is a newly created vertex.\n\t * eOrg and eNew will have the same left face.\n\t */\n    // TESShalfEdge *tessMeshAddEdgeVertex( TESSmesh *mesh, TESShalfEdge *eOrg );\n    addEdgeVertex: function(eOrg) {\n        var eNew = this.makeEdge_( eOrg );\n        var eNewSym = eNew.Sym;\n\n\t\t/* Connect the new edge appropriately */\n        this.splice_( eNew, eOrg.Lnext );\n\n\t\t/* Set the vertex and face information */\n        eNew.Org = eOrg.Dst;\n\n        var newVertex = new TESSvertex();\n        this.makeVertex_( newVertex, eNewSym, eNew.Org );\n\n        eNew.Lface = eNewSym.Lface = eOrg.Lface;\n\n        return eNew;\n    },\n\n\n\t/* tessMeshSplitEdge( eOrg ) splits eOrg into two edges eOrg and eNew,\n\t * such that eNew == eOrg->Lnext.  The new vertex is eOrg->Dst == eNew->Org.\n\t * eOrg and eNew will have the same left face.\n\t */\n    // TESShalfEdge *tessMeshSplitEdge( TESSmesh *mesh, TESShalfEdge *eOrg );\n    splitEdge: function(eOrg, eDst) {\n        var tempHalfEdge = this.addEdgeVertex( eOrg );\n        var eNew = tempHalfEdge.Sym;\n\n\t\t/* Disconnect eOrg from eOrg->Dst and connect it to eNew->Org */\n        this.splice_( eOrg.Sym, eOrg.Sym.Oprev );\n        this.splice_( eOrg.Sym, eNew );\n\n\t\t/* Set the vertex and face information */\n        eOrg.Dst = eNew.Org;\n        eNew.Dst.anEdge = eNew.Sym;\t/* may have pointed to eOrg->Sym */\n        eNew.Rface = eOrg.Rface;\n        eNew.winding = eOrg.winding;\t/* copy old winding information */\n        eNew.Sym.winding = eOrg.Sym.winding;\n\n        return eNew;\n    },\n\n\n\t/* tessMeshConnect( eOrg, eDst ) creates a new edge from eOrg->Dst\n\t * to eDst->Org, and returns the corresponding half-edge eNew.\n\t * If eOrg->Lface == eDst->Lface, this splits one loop into two,\n\t * and the newly created loop is eNew->Lface.  Otherwise, two disjoint\n\t * loops are merged into one, and the loop eDst->Lface is destroyed.\n\t *\n\t * If (eOrg == eDst), the new face will have only two edges.\n\t * If (eOrg->Lnext == eDst), the old face is reduced to a single edge.\n\t * If (eOrg->Lnext->Lnext == eDst), the old face is reduced to two edges.\n\t */\n\n    // TESShalfEdge *tessMeshConnect( TESSmesh *mesh, TESShalfEdge *eOrg, TESShalfEdge *eDst );\n    connect: function(eOrg, eDst) {\n        var joiningLoops = false;\n        var eNew = this.makeEdge_( eOrg );\n        var eNewSym = eNew.Sym;\n\n        if( eDst.Lface !== eOrg.Lface ) {\n\t\t\t/* We are connecting two disjoint loops -- destroy eDst->Lface */\n            joiningLoops = true;\n            this.killFace_( eDst.Lface, eOrg.Lface );\n        }\n\n\t\t/* Connect the new edge appropriately */\n        this.splice_( eNew, eOrg.Lnext );\n        this.splice_( eNewSym, eDst );\n\n\t\t/* Set the vertex and face information */\n        eNew.Org = eOrg.Dst;\n        eNewSym.Org = eDst.Org;\n        eNew.Lface = eNewSym.Lface = eOrg.Lface;\n\n\t\t/* Make sure the old face points to a valid half-edge */\n        eOrg.Lface.anEdge = eNewSym;\n\n        if( ! joiningLoops ) {\n            var newFace = new TESSface();\n\t\t\t/* We split one loop into two -- the new loop is eNew->Lface */\n            this.makeFace_( newFace, eNew, eOrg.Lface );\n        }\n        return eNew;\n    },\n\n\t/* tessMeshZapFace( fZap ) destroys a face and removes it from the\n\t * global face list.  All edges of fZap will have a NULL pointer as their\n\t * left face.  Any edges which also have a NULL pointer as their right face\n\t * are deleted entirely (along with any isolated vertices this produces).\n\t * An entire mesh can be deleted by zapping its faces, one at a time,\n\t * in any order.  Zapped faces cannot be used in further mesh operations!\n\t */\n    zapFace: function( fZap )\n    {\n        var eStart = fZap.anEdge;\n        var e, eNext, eSym;\n        var fPrev, fNext;\n\n\t\t/* walk around face, deleting edges whose right face is also NULL */\n        eNext = eStart.Lnext;\n        do {\n            e = eNext;\n            eNext = e.Lnext;\n\n            e.Lface = null;\n            if( e.Rface === null ) {\n\t\t\t\t/* delete the edge -- see TESSmeshDelete above */\n\n                if( e.Onext === e ) {\n                    this.killVertex_( e.Org, null );\n                } else {\n\t\t\t\t\t/* Make sure that e->Org points to a valid half-edge */\n                    e.Org.anEdge = e.Onext;\n                    this.splice_( e, e.Oprev );\n                }\n                eSym = e.Sym;\n                if( eSym.Onext === eSym ) {\n                    this.killVertex_( eSym.Org, null );\n                } else {\n\t\t\t\t\t/* Make sure that eSym->Org points to a valid half-edge */\n                    eSym.Org.anEdge = eSym.Onext;\n                    this.splice_( eSym, eSym.Oprev );\n                }\n                this.killEdge_( e );\n            }\n        } while( e != eStart );\n\n\t\t/* delete from circular doubly-linked list */\n        fPrev = fZap.prev;\n        fNext = fZap.next;\n        fNext.prev = fPrev;\n        fPrev.next = fNext;\n    },\n\n    countFaceVerts_: function(f) {\n        var eCur = f.anEdge;\n        var n = 0;\n        do\n        {\n            n++;\n            eCur = eCur.Lnext;\n        }\n        while (eCur !== f.anEdge);\n        return n;\n    },\n\n    //int tessMeshMergeConvexFaces( TESSmesh *mesh, int maxVertsPerFace )\n    mergeConvexFaces: function(maxVertsPerFace) {\n        var f;\n        var eCur, eNext, eSym;\n        var vStart;\n        var curNv, symNv;\n\n        for( f = this.fHead.next; f !== this.fHead; f = f.next )\n        {\n            // Skip faces which are outside the result.\n            if( !f.inside )\n                continue;\n\n            eCur = f.anEdge;\n            vStart = eCur.Org;\n\n            while (true)\n            {\n                eNext = eCur.Lnext;\n                eSym = eCur.Sym;\n\n                // Try to merge if the neighbour face is valid.\n                if( eSym && eSym.Lface && eSym.Lface.inside )\n                {\n                    // Try to merge the neighbour faces if the resulting polygons\n                    // does not exceed maximum number of vertices.\n                    curNv = this.countFaceVerts_( f );\n                    symNv = this.countFaceVerts_( eSym.Lface );\n                    if( (curNv+symNv-2) <= maxVertsPerFace )\n                    {\n                        // Merge if the resulting poly is convex.\n                        if( Geom.vertCCW( eCur.Lprev.Org, eCur.Org, eSym.Lnext.Lnext.Org ) &&\n                            Geom.vertCCW( eSym.Lprev.Org, eSym.Org, eCur.Lnext.Lnext.Org ) )\n                        {\n                            eNext = eSym.Lnext;\n                            this.delete( eSym );\n                            eCur = null;\n                            eSym = null;\n                        }\n                    }\n                }\n\n                if( eCur && eCur.Lnext.Org === vStart )\n                    break;\n\n                // Continue to next edge.\n                eCur = eNext;\n            }\n        }\n\n        return true;\n    },\n\n\t/* tessMeshCheckMesh( mesh ) checks a mesh for self-consistency.\n\t */\n    check: function() {\n        var fHead = this.fHead;\n        var vHead = this.vHead;\n        var eHead = this.eHead;\n        var f, fPrev, v, vPrev, e, ePrev;\n\n        fPrev = fHead;\n        for( fPrev = fHead ; (f = fPrev.next) !== fHead; fPrev = f) {\n            assert( f.prev === fPrev );\n            e = f.anEdge;\n            do {\n                assert( e.Sym !== e );\n                assert( e.Sym.Sym === e );\n                assert( e.Lnext.Onext.Sym === e );\n                assert( e.Onext.Sym.Lnext === e );\n                assert( e.Lface === f );\n                e = e.Lnext;\n            } while( e !== f.anEdge );\n        }\n        assert( f.prev === fPrev && f.anEdge === null );\n\n        vPrev = vHead;\n        for( vPrev = vHead ; (v = vPrev.next) !== vHead; vPrev = v) {\n            assert( v.prev === vPrev );\n            e = v.anEdge;\n            do {\n                assert( e.Sym !== e );\n                assert( e.Sym.Sym === e );\n                assert( e.Lnext.Onext.Sym === e );\n                assert( e.Onext.Sym.Lnext === e );\n                assert( e.Org === v );\n                e = e.Onext;\n            } while( e !== v.anEdge );\n        }\n        assert( v.prev === vPrev && v.anEdge === null );\n\n        ePrev = eHead;\n        for( ePrev = eHead ; (e = ePrev.next) !== eHead; ePrev = e) {\n            assert( e.Sym.next === ePrev.Sym );\n            assert( e.Sym !== e );\n            assert( e.Sym.Sym === e );\n            assert( e.Org !== null );\n            assert( e.Dst !== null );\n            assert( e.Lnext.Onext.Sym === e );\n            assert( e.Onext.Sym.Lnext === e );\n        }\n        assert( e.Sym.next === ePrev.Sym\n            && e.Sym === this.eHeadSym\n            && e.Sym.Sym === e\n            && e.Org === null && e.Dst === null\n            && e.Lface === null && e.Rface === null );\n    }\n\n};\n\nvar Geom = {};\n\nGeom.vertEq = function(u,v) {\n    return (u.s === v.s && u.t === v.t);\n};\n\n/* Returns TRUE if u is lexicographically <= v. */\nGeom.vertLeq = function(u,v) {\n    return ((u.s < v.s) || (u.s === v.s && u.t <= v.t));\n};\n\n/* Versions of VertLeq, EdgeSign, EdgeEval with s and t transposed. */\nGeom.transLeq = function(u,v) {\n    return ((u.t < v.t) || (u.t === v.t && u.s <= v.s));\n};\n\nGeom.edgeGoesLeft = function(e) {\n    return Geom.vertLeq( e.Dst, e.Org );\n};\n\nGeom.edgeGoesRight = function(e) {\n    return Geom.vertLeq( e.Org, e.Dst );\n};\n\nGeom.vertL1dist = function(u,v) {\n    return (Math.abs(u.s - v.s) + Math.abs(u.t - v.t));\n};\n\n//TESSreal tesedgeEval( TESSvertex *u, TESSvertex *v, TESSvertex *w )\nGeom.edgeEval = function( u, v, w ) {\n\t/* Given three vertices u,v,w such that VertLeq(u,v) && VertLeq(v,w),\n\t * evaluates the t-coord of the edge uw at the s-coord of the vertex v.\n\t * Returns v->t - (uw)(v->s), ie. the signed distance from uw to v.\n\t * If uw is vertical (and thus passes thru v), the result is zero.\n\t *\n\t * The calculation is extremely accurate and stable, even when v\n\t * is very close to u or w.  In particular if we set v->t = 0 and\n\t * let r be the negated result (this evaluates (uw)(v->s)), then\n\t * r is guaranteed to satisfy MIN(u->t,w->t) <= r <= MAX(u->t,w->t).\n\t */\n    assert( Geom.vertLeq( u, v ) && Geom.vertLeq( v, w ));\n\n    var gapL = v.s - u.s;\n    var gapR = w.s - v.s;\n\n    if( gapL + gapR > 0.0 ) {\n        if( gapL < gapR ) {\n            return (v.t - u.t) + (u.t - w.t) * (gapL / (gapL + gapR));\n        } else {\n            return (v.t - w.t) + (w.t - u.t) * (gapR / (gapL + gapR));\n        }\n    }\n\t/* vertical line */\n    return 0.0;\n};\n\n//TESSreal tesedgeSign( TESSvertex *u, TESSvertex *v, TESSvertex *w )\nGeom.edgeSign = function( u, v, w ) {\n\t/* Returns a number whose sign matches EdgeEval(u,v,w) but which\n\t * is cheaper to evaluate.  Returns > 0, == 0 , or < 0\n\t * as v is above, on, or below the edge uw.\n\t */\n    assert( Geom.vertLeq( u, v ) && Geom.vertLeq( v, w ));\n\n    var gapL = v.s - u.s;\n    var gapR = w.s - v.s;\n\n    if( gapL + gapR > 0.0 ) {\n        return (v.t - w.t) * gapL + (v.t - u.t) * gapR;\n    }\n\t/* vertical line */\n    return 0.0;\n};\n\n\n/***********************************************************************\n * Define versions of EdgeSign, EdgeEval with s and t transposed.\n */\n\n//TESSreal testransEval( TESSvertex *u, TESSvertex *v, TESSvertex *w )\nGeom.transEval = function( u, v, w ) {\n\t/* Given three vertices u,v,w such that TransLeq(u,v) && TransLeq(v,w),\n\t * evaluates the t-coord of the edge uw at the s-coord of the vertex v.\n\t * Returns v->s - (uw)(v->t), ie. the signed distance from uw to v.\n\t * If uw is vertical (and thus passes thru v), the result is zero.\n\t *\n\t * The calculation is extremely accurate and stable, even when v\n\t * is very close to u or w.  In particular if we set v->s = 0 and\n\t * let r be the negated result (this evaluates (uw)(v->t)), then\n\t * r is guaranteed to satisfy MIN(u->s,w->s) <= r <= MAX(u->s,w->s).\n\t */\n    assert( Geom.transLeq( u, v ) && Geom.transLeq( v, w ));\n\n    var gapL = v.t - u.t;\n    var gapR = w.t - v.t;\n\n    if( gapL + gapR > 0.0 ) {\n        if( gapL < gapR ) {\n            return (v.s - u.s) + (u.s - w.s) * (gapL / (gapL + gapR));\n        } else {\n            return (v.s - w.s) + (w.s - u.s) * (gapR / (gapL + gapR));\n        }\n    }\n\t/* vertical line */\n    return 0.0;\n};\n\n//TESSreal testransSign( TESSvertex *u, TESSvertex *v, TESSvertex *w )\nGeom.transSign = function( u, v, w ) {\n\t/* Returns a number whose sign matches TransEval(u,v,w) but which\n\t * is cheaper to evaluate.  Returns > 0, == 0 , or < 0\n\t * as v is above, on, or below the edge uw.\n\t */\n    assert( Geom.transLeq( u, v ) && Geom.transLeq( v, w ));\n\n    var gapL = v.t - u.t;\n    var gapR = w.t - v.t;\n\n    if( gapL + gapR > 0.0 ) {\n        return (v.s - w.s) * gapL + (v.s - u.s) * gapR;\n    }\n\t/* vertical line */\n    return 0.0;\n};\n\n\n//int tesvertCCW( TESSvertex *u, TESSvertex *v, TESSvertex *w )\nGeom.vertCCW = function( u, v, w ) {\n\t/* For almost-degenerate situations, the results are not reliable.\n\t * Unless the floating-point arithmetic can be performed without\n\t * rounding errors, *any* implementation will give incorrect results\n\t * on some degenerate inputs, so the client must have some way to\n\t * handle this situation.\n\t */\n    return (u.s*(v.t - w.t) + v.s*(w.t - u.t) + w.s*(u.t - v.t)) >= 0.0;\n};\n\n/* Given parameters a,x,b,y returns the value (b*x+a*y)/(a+b),\n * or (x+y)/2 if a==b==0.  It requires that a,b >= 0, and enforces\n * this in the rare case that one argument is slightly negative.\n * The implementation is extremely stable numerically.\n * In particular it guarantees that the result r satisfies\n * MIN(x,y) <= r <= MAX(x,y), and the results are very accurate\n * even when a and b differ greatly in magnitude.\n */\nGeom.interpolate = function(a,x,b,y) {\n    return (a = (a < 0) ? 0 : a, b = (b < 0) ? 0 : b, ((a <= b) ? ((b == 0) ? ((x+y) / 2) : (x + (y-x) * (a/(a+b)))) : (y + (x-y) * (b/(a+b)))));\n};\n\n/*\n #ifndef FOR_TRITE_TEST_PROGRAM\n #define Interpolate(a,x,b,y)\tRealInterpolate(a,x,b,y)\n #else\n\n // Claim: the ONLY property the sweep algorithm relies on is that\n // MIN(x,y) <= r <= MAX(x,y).  This is a nasty way to test that.\n #include <stdlib.h>\n extern int RandomInterpolate;\n\n double Interpolate( double a, double x, double b, double y)\n {\n printf(\"*********************%d\\n\",RandomInterpolate);\n if( RandomInterpolate ) {\n a = 1.2 * drand48() - 0.1;\n a = (a < 0) ? 0 : ((a > 1) ? 1 : a);\n b = 1.0 - a;\n }\n return RealInterpolate(a,x,b,y);\n }\n #endif*/\n\nGeom.intersect = function( o1, d1, o2, d2, v ) {\n\t/* Given edges (o1,d1) and (o2,d2), compute their point of intersection.\n\t * The computed point is guaranteed to lie in the intersection of the\n\t * bounding rectangles defined by each edge.\n\t */\n    var z1, z2;\n    var t;\n\n\t/* This is certainly not the most efficient way to find the intersection\n\t * of two line segments, but it is very numerically stable.\n\t *\n\t * Strategy: find the two middle vertices in the VertLeq ordering,\n\t * and interpolate the intersection s-value from these.  Then repeat\n\t * using the TransLeq ordering to find the intersection t-value.\n\t */\n\n    if( ! Geom.vertLeq( o1, d1 )) { t = o1; o1 = d1; d1 = t; } //swap( o1, d1 ); }\n    if( ! Geom.vertLeq( o2, d2 )) { t = o2; o2 = d2; d2 = t; } //swap( o2, d2 ); }\n    if( ! Geom.vertLeq( o1, o2 )) { t = o1; o1 = o2; o2 = t; t = d1; d1 = d2; d2 = t; }//swap( o1, o2 ); swap( d1, d2 ); }\n\n    if( ! Geom.vertLeq( o2, d1 )) {\n\t\t/* Technically, no intersection -- do our best */\n        v.s = (o2.s + d1.s) / 2;\n    } else if( Geom.vertLeq( d1, d2 )) {\n\t\t/* Interpolate between o2 and d1 */\n        z1 = Geom.edgeEval( o1, o2, d1 );\n        z2 = Geom.edgeEval( o2, d1, d2 );\n        if( z1+z2 < 0 ) { z1 = -z1; z2 = -z2; }\n        v.s = Geom.interpolate( z1, o2.s, z2, d1.s );\n    } else {\n\t\t/* Interpolate between o2 and d2 */\n        z1 = Geom.edgeSign( o1, o2, d1 );\n        z2 = -Geom.edgeSign( o1, d2, d1 );\n        if( z1+z2 < 0 ) { z1 = -z1; z2 = -z2; }\n        v.s = Geom.interpolate( z1, o2.s, z2, d2.s );\n    }\n\n\t/* Now repeat the process for t */\n\n    if( ! Geom.transLeq( o1, d1 )) { t = o1; o1 = d1; d1 = t; } //swap( o1, d1 ); }\n    if( ! Geom.transLeq( o2, d2 )) { t = o2; o2 = d2; d2 = t; } //swap( o2, d2 ); }\n    if( ! Geom.transLeq( o1, o2 )) { t = o1; o1 = o2; o2 = t; t = d1; d1 = d2; d2 = t; } //swap( o1, o2 ); swap( d1, d2 ); }\n\n    if( ! Geom.transLeq( o2, d1 )) {\n\t\t/* Technically, no intersection -- do our best */\n        v.t = (o2.t + d1.t) / 2;\n    } else if( Geom.transLeq( d1, d2 )) {\n\t\t/* Interpolate between o2 and d1 */\n        z1 = Geom.transEval( o1, o2, d1 );\n        z2 = Geom.transEval( o2, d1, d2 );\n        if( z1+z2 < 0 ) { z1 = -z1; z2 = -z2; }\n        v.t = Geom.interpolate( z1, o2.t, z2, d1.t );\n    } else {\n\t\t/* Interpolate between o2 and d2 */\n        z1 = Geom.transSign( o1, o2, d1 );\n        z2 = -Geom.transSign( o1, d2, d1 );\n        if( z1+z2 < 0 ) { z1 = -z1; z2 = -z2; }\n        v.t = Geom.interpolate( z1, o2.t, z2, d2.t );\n    }\n};\n\n\n\nfunction DictNode() {\n    this.key = null;\n    this.next = null;\n    this.prev = null;\n};\n\nfunction Dict(frame, leq) {\n    this.head = new DictNode();\n    this.head.next = this.head;\n    this.head.prev = this.head;\n    this.frame = frame;\n    this.leq = leq;\n};\n\nDict.prototype = {\n    min: function() {\n        return this.head.next;\n    },\n\n    max: function() {\n        return this.head.prev;\n    },\n\n    insert: function(k) {\n        return this.insertBefore(this.head, k);\n    },\n\n    search: function(key) {\n\t\t/* Search returns the node with the smallest key greater than or equal\n\t\t * to the given key.  If there is no such key, returns a node whose\n\t\t * key is NULL.  Similarly, Succ(Max(d)) has a NULL key, etc.\n\t\t */\n        var node = this.head;\n        do {\n            node = node.next;\n        } while( node.key !== null && ! this.leq(this.frame, key, node.key));\n\n        return node;\n    },\n\n    insertBefore: function(node, key) {\n        do {\n            node = node.prev;\n        } while( node.key !== null && ! this.leq(this.frame, node.key, key));\n\n        var newNode = new DictNode();\n        newNode.key = key;\n        newNode.next = node.next;\n        node.next.prev = newNode;\n        newNode.prev = node;\n        node.next = newNode;\n\n        return newNode;\n    },\n\n    delete: function(node) {\n        node.next.prev = node.prev;\n        node.prev.next = node.next;\n    }\n};\n\n\nfunction PQnode() {\n    this.handle = null;\n}\n\nfunction PQhandleElem() {\n    this.key = null;\n    this.node = null;\n}\n\nfunction PriorityQ(size, leq) {\n    this.size = 0;\n    this.max = size;\n\n    this.nodes = [];\n    this.nodes.length = size+1;\n    for (var i = 0; i < this.nodes.length; i++)\n        this.nodes[i] = new PQnode();\n\n    this.handles = [];\n    this.handles.length = size+1;\n    for (var i = 0; i < this.handles.length; i++)\n        this.handles[i] = new PQhandleElem();\n\n    this.initialized = false;\n    this.freeList = 0;\n    this.leq = leq;\n\n    this.nodes[1].handle = 1;\t/* so that Minimum() returns NULL */\n    this.handles[1].key = null;\n};\n\nPriorityQ.prototype = {\n\n    floatDown_: function( curr )\n    {\n        var n = this.nodes;\n        var h = this.handles;\n        var hCurr, hChild;\n        var child;\n\n        hCurr = n[curr].handle;\n        for( ;; ) {\n            child = curr << 1;\n            if( child < this.size && this.leq( h[n[child+1].handle].key, h[n[child].handle].key )) {\n                ++child;\n            }\n\n            assert(child <= this.max);\n\n            hChild = n[child].handle;\n            if( child > this.size || this.leq( h[hCurr].key, h[hChild].key )) {\n                n[curr].handle = hCurr;\n                h[hCurr].node = curr;\n                break;\n            }\n            n[curr].handle = hChild;\n            h[hChild].node = curr;\n            curr = child;\n        }\n    },\n\n    floatUp_: function( curr )\n    {\n        var n = this.nodes;\n        var h = this.handles;\n        var hCurr, hParent;\n        var parent;\n\n        hCurr = n[curr].handle;\n        for( ;; ) {\n            parent = curr >> 1;\n            hParent = n[parent].handle;\n            if( parent == 0 || this.leq( h[hParent].key, h[hCurr].key )) {\n                n[curr].handle = hCurr;\n                h[hCurr].node = curr;\n                break;\n            }\n            n[curr].handle = hParent;\n            h[hParent].node = curr;\n            curr = parent;\n        }\n    },\n\n    init: function() {\n\t\t/* This method of building a heap is O(n), rather than O(n lg n). */\n        for( var i = this.size; i >= 1; --i ) {\n            this.floatDown_( i );\n        }\n        this.initialized = true;\n    },\n\n    min: function() {\n        return this.handles[this.nodes[1].handle].key;\n    },\n\n    isEmpty: function() {\n        this.size === 0;\n    },\n\n\t/* really pqHeapInsert */\n\t/* returns INV_HANDLE iff out of memory */\n    //PQhandle pqHeapInsert( TESSalloc* alloc, PriorityQHeap *pq, PQkey keyNew )\n    insert: function(keyNew)\n    {\n        var curr;\n        var free;\n\n        curr = ++this.size;\n        if( (curr*2) > this.max ) {\n            this.max *= 2;\n            var s;\n            s = this.nodes.length;\n            this.nodes.length = this.max+1;\n            for (var i = s; i < this.nodes.length; i++)\n                this.nodes[i] = new PQnode();\n\n            s = this.handles.length;\n            this.handles.length = this.max+1;\n            for (var i = s; i < this.handles.length; i++)\n                this.handles[i] = new PQhandleElem();\n        }\n\n        if( this.freeList === 0 ) {\n            free = curr;\n        } else {\n            free = this.freeList;\n            this.freeList = this.handles[free].node;\n        }\n\n        this.nodes[curr].handle = free;\n        this.handles[free].node = curr;\n        this.handles[free].key = keyNew;\n\n        if( this.initialized ) {\n            this.floatUp_( curr );\n        }\n        return free;\n    },\n\n    //PQkey pqHeapExtractMin( PriorityQHeap *pq )\n    extractMin: function() {\n        var n = this.nodes;\n        var h = this.handles;\n        var hMin = n[1].handle;\n        var min = h[hMin].key;\n\n        if( this.size > 0 ) {\n            n[1].handle = n[this.size].handle;\n            h[n[1].handle].node = 1;\n\n            h[hMin].key = null;\n            h[hMin].node = this.freeList;\n            this.freeList = hMin;\n\n            --this.size;\n            if( this.size > 0 ) {\n                this.floatDown_( 1 );\n            }\n        }\n        return min;\n    },\n\n    delete: function( hCurr ) {\n        var n = this.nodes;\n        var h = this.handles;\n        var curr;\n\n        assert( hCurr >= 1 && hCurr <= this.max && h[hCurr].key !== null );\n\n        curr = h[hCurr].node;\n        n[curr].handle = n[this.size].handle;\n        h[n[curr].handle].node = curr;\n\n        --this.size;\n        if( curr <= this.size ) {\n            if( curr <= 1 || this.leq( h[n[curr>>1].handle].key, h[n[curr].handle].key )) {\n                this.floatDown_( curr );\n            } else {\n                this.floatUp_( curr );\n            }\n        }\n        h[hCurr].key = null;\n        h[hCurr].node = this.freeList;\n        this.freeList = hCurr;\n    }\n};\n\n\n/* For each pair of adjacent edges crossing the sweep line, there is\n * an ActiveRegion to represent the region between them.  The active\n * regions are kept in sorted order in a dynamic dictionary.  As the\n * sweep line crosses each vertex, we update the affected regions.\n */\n\nfunction ActiveRegion() {\n    this.eUp = null;\t\t/* upper edge, directed right to left */\n    this.nodeUp = null;\t/* dictionary node corresponding to eUp */\n    this.windingNumber = 0;\t/* used to determine which regions are\n\t * inside the polygon */\n    this.inside = false;\t\t/* is this region inside the polygon? */\n    this.sentinel = false;\t/* marks fake edges at t = +/-infinity */\n    this.dirty = false;\t\t/* marks regions where the upper or lower\n\t * edge has changed, but we haven't checked\n\t * whether they intersect yet */\n    this.fixUpperEdge = false;\t/* marks temporary edges introduced when\n\t * we process a \"right vertex\" (one without\n\t * any edges leaving to the right) */\n};\n\nvar Sweep = {};\n\nSweep.regionBelow = function(r) {\n    return r.nodeUp.prev.key;\n}\n\nSweep.regionAbove = function(r) {\n    return r.nodeUp.next.key;\n}\n\nSweep.debugEvent = function( tess ) {\n    // empty\n}\n\n\n/*\n * Invariants for the Edge Dictionary.\n * - each pair of adjacent edges e2=Succ(e1) satisfies EdgeLeq(e1,e2)\n *   at any valid location of the sweep event\n * - if EdgeLeq(e2,e1) as well (at any valid sweep event), then e1 and e2\n *   share a common endpoint\n * - for each e, e->Dst has been processed, but not e->Org\n * - each edge e satisfies VertLeq(e->Dst,event) && VertLeq(event,e->Org)\n *   where \"event\" is the current sweep line event.\n * - no edge e has zero length\n *\n * Invariants for the Mesh (the processed portion).\n * - the portion of the mesh left of the sweep line is a planar graph,\n *   ie. there is *some* way to embed it in the plane\n * - no processed edge has zero length\n * - no two processed vertices have identical coordinates\n * - each \"inside\" region is monotone, ie. can be broken into two chains\n *   of monotonically increasing vertices according to VertLeq(v1,v2)\n *   - a non-invariant: these chains may intersect (very slightly)\n *\n * Invariants for the Sweep.\n * - if none of the edges incident to the event vertex have an activeRegion\n *   (ie. none of these edges are in the edge dictionary), then the vertex\n *   has only right-going edges.\n * - if an edge is marked \"fixUpperEdge\" (it is a temporary edge introduced\n *   by ConnectRightVertex), then it is the only right-going edge from\n *   its associated vertex.  (This says that these edges exist only\n *   when it is necessary.)\n */\n\n/* When we merge two edges into one, we need to compute the combined\n * winding of the new edge.\n */\nSweep.addWinding = function(eDst,eSrc) {\n    eDst.winding += eSrc.winding;\n    eDst.Sym.winding += eSrc.Sym.winding;\n}\n\n\n//static int EdgeLeq( TESStesselator *tess, ActiveRegion *reg1, ActiveRegion *reg2 )\nSweep.edgeLeq = function( tess, reg1, reg2 ) {\n\t/*\n\t * Both edges must be directed from right to left (this is the canonical\n\t * direction for the upper edge of each region).\n\t *\n\t * The strategy is to evaluate a \"t\" value for each edge at the\n\t * current sweep line position, given by tess->event.  The calculations\n\t * are designed to be very stable, but of course they are not perfect.\n\t *\n\t * Special case: if both edge destinations are at the sweep event,\n\t * we sort the edges by slope (they would otherwise compare equally).\n\t */\n    var ev = tess.event;\n    var t1, t2;\n\n    var e1 = reg1.eUp;\n    var e2 = reg2.eUp;\n\n    if( e1.Dst === ev ) {\n        if( e2.Dst === ev ) {\n\t\t\t/* Two edges right of the sweep line which meet at the sweep event.\n\t\t\t * Sort them by slope.\n\t\t\t */\n            if( Geom.vertLeq( e1.Org, e2.Org )) {\n                return Geom.edgeSign( e2.Dst, e1.Org, e2.Org ) <= 0;\n            }\n            return Geom.edgeSign( e1.Dst, e2.Org, e1.Org ) >= 0;\n        }\n        return Geom.edgeSign( e2.Dst, ev, e2.Org ) <= 0;\n    }\n    if( e2.Dst === ev ) {\n        return Geom.edgeSign( e1.Dst, ev, e1.Org ) >= 0;\n    }\n\n\t/* General case - compute signed distance *from* e1, e2 to event */\n    var t1 = Geom.edgeEval( e1.Dst, ev, e1.Org );\n    var t2 = Geom.edgeEval( e2.Dst, ev, e2.Org );\n    return (t1 >= t2);\n}\n\n\n//static void DeleteRegion( TESStesselator *tess, ActiveRegion *reg )\nSweep.deleteRegion = function( tess, reg ) {\n    if( reg.fixUpperEdge ) {\n\t\t/* It was created with zero winding number, so it better be\n\t\t * deleted with zero winding number (ie. it better not get merged\n\t\t * with a real edge).\n\t\t */\n        assert( reg.eUp.winding === 0 );\n    }\n    reg.eUp.activeRegion = null;\n    tess.dict.delete( reg.nodeUp );\n}\n\n//static int FixUpperEdge( TESStesselator *tess, ActiveRegion *reg, TESShalfEdge *newEdge )\nSweep.fixUpperEdge = function( tess, reg, newEdge ) {\n\t/*\n\t * Replace an upper edge which needs fixing (see ConnectRightVertex).\n\t */\n    assert( reg.fixUpperEdge );\n    tess.mesh.delete( reg.eUp );\n    reg.fixUpperEdge = false;\n    reg.eUp = newEdge;\n    newEdge.activeRegion = reg;\n}\n\n//static ActiveRegion *TopLeftRegion( TESStesselator *tess, ActiveRegion *reg )\nSweep.topLeftRegion = function( tess, reg ) {\n    var org = reg.eUp.Org;\n    var e;\n\n\t/* Find the region above the uppermost edge with the same origin */\n    do {\n        reg = Sweep.regionAbove( reg );\n    } while( reg.eUp.Org === org );\n\n\t/* If the edge above was a temporary edge introduced by ConnectRightVertex,\n\t * now is the time to fix it.\n\t */\n    if( reg.fixUpperEdge ) {\n        e = tess.mesh.connect( Sweep.regionBelow(reg).eUp.Sym, reg.eUp.Lnext );\n        if (e === null) return null;\n        Sweep.fixUpperEdge( tess, reg, e );\n        reg = Sweep.regionAbove( reg );\n    }\n    return reg;\n}\n\n//static ActiveRegion *TopRightRegion( ActiveRegion *reg )\nSweep.topRightRegion = function( reg )\n{\n    var dst = reg.eUp.Dst;\n    // var reg = null;\n\t/* Find the region above the uppermost edge with the same destination */\n    do {\n        reg = Sweep.regionAbove( reg );\n    } while( reg.eUp.Dst === dst );\n    return reg;\n}\n\n//static ActiveRegion *AddRegionBelow( TESStesselator *tess, ActiveRegion *regAbove, TESShalfEdge *eNewUp )\nSweep.addRegionBelow = function( tess, regAbove, eNewUp ) {\n\t/*\n\t * Add a new active region to the sweep line, *somewhere* below \"regAbove\"\n\t * (according to where the new edge belongs in the sweep-line dictionary).\n\t * The upper edge of the new region will be \"eNewUp\".\n\t * Winding number and \"inside\" flag are not updated.\n\t */\n    var regNew = new ActiveRegion();\n    regNew.eUp = eNewUp;\n    regNew.nodeUp = tess.dict.insertBefore( regAbove.nodeUp, regNew );\n    //\tif (regNew->nodeUp == NULL) longjmp(tess->env,1);\n    regNew.fixUpperEdge = false;\n    regNew.sentinel = false;\n    regNew.dirty = false;\n\n    eNewUp.activeRegion = regNew;\n    return regNew;\n}\n\n//static int IsWindingInside( TESStesselator *tess, int n )\nSweep.isWindingInside = function( tess, n ) {\n    switch( tess.windingRule ) {\n        case Tess2.WINDING_ODD:\n            return (n & 1) != 0;\n        case Tess2.WINDING_NONZERO:\n            return (n != 0);\n        case Tess2.WINDING_POSITIVE:\n            return (n > 0);\n        case Tess2.WINDING_NEGATIVE:\n            return (n < 0);\n        case Tess2.WINDING_ABS_GEQ_TWO:\n            return (n >= 2) || (n <= -2);\n    }\n    assert( false );\n    return false;\n}\n\n//static void ComputeWinding( TESStesselator *tess, ActiveRegion *reg )\nSweep.computeWinding = function( tess, reg ) {\n    reg.windingNumber = Sweep.regionAbove(reg).windingNumber + reg.eUp.winding;\n    reg.inside = Sweep.isWindingInside( tess, reg.windingNumber );\n}\n\n\n//static void FinishRegion( TESStesselator *tess, ActiveRegion *reg )\nSweep.finishRegion = function( tess, reg ) {\n\t/*\n\t * Delete a region from the sweep line.  This happens when the upper\n\t * and lower chains of a region meet (at a vertex on the sweep line).\n\t * The \"inside\" flag is copied to the appropriate mesh face (we could\n\t * not do this before -- since the structure of the mesh is always\n\t * changing, this face may not have even existed until now).\n\t */\n    var e = reg.eUp;\n    var f = e.Lface;\n\n    f.inside = reg.inside;\n    f.anEdge = e;   /* optimization for tessMeshTessellateMonoRegion() */\n    Sweep.deleteRegion( tess, reg );\n}\n\n\n//static TESShalfEdge *FinishLeftRegions( TESStesselator *tess, ActiveRegion *regFirst, ActiveRegion *regLast )\nSweep.finishLeftRegions = function( tess, regFirst, regLast ) {\n\t/*\n\t * We are given a vertex with one or more left-going edges.  All affected\n\t * edges should be in the edge dictionary.  Starting at regFirst->eUp,\n\t * we walk down deleting all regions where both edges have the same\n\t * origin vOrg.  At the same time we copy the \"inside\" flag from the\n\t * active region to the face, since at this point each face will belong\n\t * to at most one region (this was not necessarily true until this point\n\t * in the sweep).  The walk stops at the region above regLast; if regLast\n\t * is NULL we walk as far as possible.  At the same time we relink the\n\t * mesh if necessary, so that the ordering of edges around vOrg is the\n\t * same as in the dictionary.\n\t */\n    var e, ePrev;\n    var reg = null;\n    var regPrev = regFirst;\n    var ePrev = regFirst.eUp;\n    while( regPrev !== regLast ) {\n        regPrev.fixUpperEdge = false;\t/* placement was OK */\n        reg = Sweep.regionBelow( regPrev );\n        e = reg.eUp;\n        if( e.Org != ePrev.Org ) {\n            if( ! reg.fixUpperEdge ) {\n\t\t\t\t/* Remove the last left-going edge.  Even though there are no further\n\t\t\t\t * edges in the dictionary with this origin, there may be further\n\t\t\t\t * such edges in the mesh (if we are adding left edges to a vertex\n\t\t\t\t * that has already been processed).  Thus it is important to call\n\t\t\t\t * FinishRegion rather than just DeleteRegion.\n\t\t\t\t */\n                Sweep.finishRegion( tess, regPrev );\n                break;\n            }\n\t\t\t/* If the edge below was a temporary edge introduced by\n\t\t\t * ConnectRightVertex, now is the time to fix it.\n\t\t\t */\n            e = tess.mesh.connect( ePrev.Lprev, e.Sym );\n            //\t\t\tif (e == NULL) longjmp(tess->env,1);\n            Sweep.fixUpperEdge( tess, reg, e );\n        }\n\n\t\t/* Relink edges so that ePrev->Onext == e */\n        if( ePrev.Onext !== e ) {\n            tess.mesh.splice( e.Oprev, e );\n            tess.mesh.splice( ePrev, e );\n        }\n        Sweep.finishRegion( tess, regPrev );\t/* may change reg->eUp */\n        ePrev = reg.eUp;\n        regPrev = reg;\n    }\n    return ePrev;\n}\n\n\n//static void AddRightEdges( TESStesselator *tess, ActiveRegion *regUp, TESShalfEdge *eFirst, TESShalfEdge *eLast, TESShalfEdge *eTopLeft, int cleanUp )\nSweep.addRightEdges = function( tess, regUp, eFirst, eLast, eTopLeft, cleanUp ) {\n\t/*\n\t * Purpose: insert right-going edges into the edge dictionary, and update\n\t * winding numbers and mesh connectivity appropriately.  All right-going\n\t * edges share a common origin vOrg.  Edges are inserted CCW starting at\n\t * eFirst; the last edge inserted is eLast->Oprev.  If vOrg has any\n\t * left-going edges already processed, then eTopLeft must be the edge\n\t * such that an imaginary upward vertical segment from vOrg would be\n\t * contained between eTopLeft->Oprev and eTopLeft; otherwise eTopLeft\n\t * should be NULL.\n\t */\n    var reg, regPrev;\n    var e, ePrev;\n    var firstTime = true;\n\n\t/* Insert the new right-going edges in the dictionary */\n    e = eFirst;\n    do {\n        assert( Geom.vertLeq( e.Org, e.Dst ));\n        Sweep.addRegionBelow( tess, regUp, e.Sym );\n        e = e.Onext;\n    } while ( e !== eLast );\n\n\t/* Walk *all* right-going edges from e->Org, in the dictionary order,\n\t * updating the winding numbers of each region, and re-linking the mesh\n\t * edges to match the dictionary ordering (if necessary).\n\t */\n    if( eTopLeft === null ) {\n        eTopLeft = Sweep.regionBelow( regUp ).eUp.Rprev;\n    }\n    regPrev = regUp;\n    ePrev = eTopLeft;\n    for( ;; ) {\n        reg = Sweep.regionBelow( regPrev );\n        e = reg.eUp.Sym;\n        if( e.Org !== ePrev.Org ) break;\n\n        if( e.Onext !== ePrev ) {\n\t\t\t/* Unlink e from its current position, and relink below ePrev */\n            tess.mesh.splice( e.Oprev, e );\n            tess.mesh.splice( ePrev.Oprev, e );\n        }\n\t\t/* Compute the winding number and \"inside\" flag for the new regions */\n        reg.windingNumber = regPrev.windingNumber - e.winding;\n        reg.inside = Sweep.isWindingInside( tess, reg.windingNumber );\n\n\t\t/* Check for two outgoing edges with same slope -- process these\n\t\t * before any intersection tests (see example in tessComputeInterior).\n\t\t */\n        regPrev.dirty = true;\n        if( ! firstTime && Sweep.checkForRightSplice( tess, regPrev )) {\n            Sweep.addWinding( e, ePrev );\n            Sweep.deleteRegion( tess, regPrev );\n            tess.mesh.delete( ePrev );\n        }\n        firstTime = false;\n        regPrev = reg;\n        ePrev = e;\n    }\n    regPrev.dirty = true;\n    assert( regPrev.windingNumber - e.winding === reg.windingNumber );\n\n    if( cleanUp ) {\n\t\t/* Check for intersections between newly adjacent edges. */\n        Sweep.walkDirtyRegions( tess, regPrev );\n    }\n}\n\n\n//static void SpliceMergeVertices( TESStesselator *tess, TESShalfEdge *e1, TESShalfEdge *e2 )\nSweep.spliceMergeVertices = function( tess, e1, e2 ) {\n\t/*\n\t * Two vertices with idential coordinates are combined into one.\n\t * e1->Org is kept, while e2->Org is discarded.\n\t */\n    tess.mesh.splice( e1, e2 );\n}\n\n//static void VertexWeights( TESSvertex *isect, TESSvertex *org, TESSvertex *dst, TESSreal *weights )\nSweep.vertexWeights = function( isect, org, dst ) {\n\t/*\n\t * Find some weights which describe how the intersection vertex is\n\t * a linear combination of \"org\" and \"dest\".  Each of the two edges\n\t * which generated \"isect\" is allocated 50% of the weight; each edge\n\t * splits the weight between its org and dst according to the\n\t * relative distance to \"isect\".\n\t */\n    var t1 = Geom.vertL1dist( org, isect );\n    var t2 = Geom.vertL1dist( dst, isect );\n    var w0 = 0.5 * t2 / (t1 + t2);\n    var w1 = 0.5 * t1 / (t1 + t2);\n    isect.coords[0] += w0*org.coords[0] + w1*dst.coords[0];\n    isect.coords[1] += w0*org.coords[1] + w1*dst.coords[1];\n    isect.coords[2] += w0*org.coords[2] + w1*dst.coords[2];\n}\n\n\n//static void GetIntersectData( TESStesselator *tess, TESSvertex *isect, TESSvertex *orgUp, TESSvertex *dstUp, TESSvertex *orgLo, TESSvertex *dstLo )\nSweep.getIntersectData = function( tess, isect, orgUp, dstUp, orgLo, dstLo ) {\n\t/*\n\t * We've computed a new intersection point, now we need a \"data\" pointer\n\t * from the user so that we can refer to this new vertex in the\n\t * rendering callbacks.\n\t */\n    isect.coords[0] = isect.coords[1] = isect.coords[2] = 0;\n    isect.idx = -1;\n    Sweep.vertexWeights( isect, orgUp, dstUp );\n    Sweep.vertexWeights( isect, orgLo, dstLo );\n}\n\n//static int CheckForRightSplice( TESStesselator *tess, ActiveRegion *regUp )\nSweep.checkForRightSplice = function( tess, regUp ) {\n\t/*\n\t * Check the upper and lower edge of \"regUp\", to make sure that the\n\t * eUp->Org is above eLo, or eLo->Org is below eUp (depending on which\n\t * origin is leftmost).\n\t *\n\t * The main purpose is to splice right-going edges with the same\n\t * dest vertex and nearly identical slopes (ie. we can't distinguish\n\t * the slopes numerically).  However the splicing can also help us\n\t * to recover from numerical errors.  For example, suppose at one\n\t * point we checked eUp and eLo, and decided that eUp->Org is barely\n\t * above eLo.  Then later, we split eLo into two edges (eg. from\n\t * a splice operation like this one).  This can change the result of\n\t * our test so that now eUp->Org is incident to eLo, or barely below it.\n\t * We must correct this condition to maintain the dictionary invariants.\n\t *\n\t * One possibility is to check these edges for intersection again\n\t * (ie. CheckForIntersect).  This is what we do if possible.  However\n\t * CheckForIntersect requires that tess->event lies between eUp and eLo,\n\t * so that it has something to fall back on when the intersection\n\t * calculation gives us an unusable answer.  So, for those cases where\n\t * we can't check for intersection, this routine fixes the problem\n\t * by just splicing the offending vertex into the other edge.\n\t * This is a guaranteed solution, no matter how degenerate things get.\n\t * Basically this is a combinatorial solution to a numerical problem.\n\t */\n    var regLo = Sweep.regionBelow(regUp);\n    var eUp = regUp.eUp;\n    var eLo = regLo.eUp;\n\n    if( Geom.vertLeq( eUp.Org, eLo.Org )) {\n        if( Geom.edgeSign( eLo.Dst, eUp.Org, eLo.Org ) > 0 ) return false;\n\n\t\t/* eUp->Org appears to be below eLo */\n        if( ! Geom.vertEq( eUp.Org, eLo.Org )) {\n\t\t\t/* Splice eUp->Org into eLo */\n            tess.mesh.splitEdge( eLo.Sym );\n            tess.mesh.splice( eUp, eLo.Oprev );\n            regUp.dirty = regLo.dirty = true;\n\n        } else if( eUp.Org !== eLo.Org ) {\n\t\t\t/* merge the two vertices, discarding eUp->Org */\n            tess.pq.delete( eUp.Org.pqHandle );\n            Sweep.spliceMergeVertices( tess, eLo.Oprev, eUp );\n        }\n    } else {\n        if( Geom.edgeSign( eUp.Dst, eLo.Org, eUp.Org ) < 0 ) return false;\n\n\t\t/* eLo->Org appears to be above eUp, so splice eLo->Org into eUp */\n        Sweep.regionAbove(regUp).dirty = regUp.dirty = true;\n        tess.mesh.splitEdge( eUp.Sym );\n        tess.mesh.splice( eLo.Oprev, eUp );\n    }\n    return true;\n}\n\n//static int CheckForLeftSplice( TESStesselator *tess, ActiveRegion *regUp )\nSweep.checkForLeftSplice = function( tess, regUp ) {\n\t/*\n\t * Check the upper and lower edge of \"regUp\", to make sure that the\n\t * eUp->Dst is above eLo, or eLo->Dst is below eUp (depending on which\n\t * destination is rightmost).\n\t *\n\t * Theoretically, this should always be true.  However, splitting an edge\n\t * into two pieces can change the results of previous tests.  For example,\n\t * suppose at one point we checked eUp and eLo, and decided that eUp->Dst\n\t * is barely above eLo.  Then later, we split eLo into two edges (eg. from\n\t * a splice operation like this one).  This can change the result of\n\t * the test so that now eUp->Dst is incident to eLo, or barely below it.\n\t * We must correct this condition to maintain the dictionary invariants\n\t * (otherwise new edges might get inserted in the wrong place in the\n\t * dictionary, and bad stuff will happen).\n\t *\n\t * We fix the problem by just splicing the offending vertex into the\n\t * other edge.\n\t */\n    var regLo = Sweep.regionBelow(regUp);\n    var eUp = regUp.eUp;\n    var eLo = regLo.eUp;\n    var e;\n\n    assert( ! Geom.vertEq( eUp.Dst, eLo.Dst ));\n\n    if( Geom.vertLeq( eUp.Dst, eLo.Dst )) {\n        if( Geom.edgeSign( eUp.Dst, eLo.Dst, eUp.Org ) < 0 ) return false;\n\n\t\t/* eLo->Dst is above eUp, so splice eLo->Dst into eUp */\n        Sweep.regionAbove(regUp).dirty = regUp.dirty = true;\n        e = tess.mesh.splitEdge( eUp );\n        tess.mesh.splice( eLo.Sym, e );\n        e.Lface.inside = regUp.inside;\n    } else {\n        if( Geom.edgeSign( eLo.Dst, eUp.Dst, eLo.Org ) > 0 ) return false;\n\n\t\t/* eUp->Dst is below eLo, so splice eUp->Dst into eLo */\n        regUp.dirty = regLo.dirty = true;\n        e = tess.mesh.splitEdge( eLo );\n        tess.mesh.splice( eUp.Lnext, eLo.Sym );\n        e.Rface.inside = regUp.inside;\n    }\n    return true;\n}\n\n\n//static int CheckForIntersect( TESStesselator *tess, ActiveRegion *regUp )\nSweep.checkForIntersect = function( tess, regUp ) {\n\t/*\n\t * Check the upper and lower edges of the given region to see if\n\t * they intersect.  If so, create the intersection and add it\n\t * to the data structures.\n\t *\n\t * Returns TRUE if adding the new intersection resulted in a recursive\n\t * call to AddRightEdges(); in this case all \"dirty\" regions have been\n\t * checked for intersections, and possibly regUp has been deleted.\n\t */\n    var regLo = Sweep.regionBelow(regUp);\n    var eUp = regUp.eUp;\n    var eLo = regLo.eUp;\n    var orgUp = eUp.Org;\n    var orgLo = eLo.Org;\n    var dstUp = eUp.Dst;\n    var dstLo = eLo.Dst;\n    var tMinUp, tMaxLo;\n    var isect = new TESSvertex, orgMin;\n    var e;\n\n    assert( ! Geom.vertEq( dstLo, dstUp ));\n    assert( Geom.edgeSign( dstUp, tess.event, orgUp ) <= 0 );\n    assert( Geom.edgeSign( dstLo, tess.event, orgLo ) >= 0 );\n    assert( orgUp !== tess.event && orgLo !== tess.event );\n    assert( ! regUp.fixUpperEdge && ! regLo.fixUpperEdge );\n\n    if( orgUp === orgLo ) return false;\t/* right endpoints are the same */\n\n    tMinUp = Math.min( orgUp.t, dstUp.t );\n    tMaxLo = Math.max( orgLo.t, dstLo.t );\n    if( tMinUp > tMaxLo ) return false;\t/* t ranges do not overlap */\n\n    if( Geom.vertLeq( orgUp, orgLo )) {\n        if( Geom.edgeSign( dstLo, orgUp, orgLo ) > 0 ) return false;\n    } else {\n        if( Geom.edgeSign( dstUp, orgLo, orgUp ) < 0 ) return false;\n    }\n\n\t/* At this point the edges intersect, at least marginally */\n    Sweep.debugEvent( tess );\n\n    Geom.intersect( dstUp, orgUp, dstLo, orgLo, isect );\n\t/* The following properties are guaranteed: */\n    assert( Math.min( orgUp.t, dstUp.t ) <= isect.t );\n    assert( isect.t <= Math.max( orgLo.t, dstLo.t ));\n    assert( Math.min( dstLo.s, dstUp.s ) <= isect.s );\n    assert( isect.s <= Math.max( orgLo.s, orgUp.s ));\n\n    if( Geom.vertLeq( isect, tess.event )) {\n\t\t/* The intersection point lies slightly to the left of the sweep line,\n\t\t * so move it until it''s slightly to the right of the sweep line.\n\t\t * (If we had perfect numerical precision, this would never happen\n\t\t * in the first place).  The easiest and safest thing to do is\n\t\t * replace the intersection by tess->event.\n\t\t */\n        isect.s = tess.event.s;\n        isect.t = tess.event.t;\n    }\n\t/* Similarly, if the computed intersection lies to the right of the\n\t * rightmost origin (which should rarely happen), it can cause\n\t * unbelievable inefficiency on sufficiently degenerate inputs.\n\t * (If you have the test program, try running test54.d with the\n\t * \"X zoom\" option turned on).\n\t */\n    orgMin = Geom.vertLeq( orgUp, orgLo ) ? orgUp : orgLo;\n    if( Geom.vertLeq( orgMin, isect )) {\n        isect.s = orgMin.s;\n        isect.t = orgMin.t;\n    }\n\n    if( Geom.vertEq( isect, orgUp ) || Geom.vertEq( isect, orgLo )) {\n\t\t/* Easy case -- intersection at one of the right endpoints */\n        Sweep.checkForRightSplice( tess, regUp );\n        return false;\n    }\n\n    if(    (! Geom.vertEq( dstUp, tess.event )\n        && Geom.edgeSign( dstUp, tess.event, isect ) >= 0)\n        || (! Geom.vertEq( dstLo, tess.event )\n        && Geom.edgeSign( dstLo, tess.event, isect ) <= 0 ))\n    {\n\t\t/* Very unusual -- the new upper or lower edge would pass on the\n\t\t * wrong side of the sweep event, or through it.  This can happen\n\t\t * due to very small numerical errors in the intersection calculation.\n\t\t */\n        if( dstLo === tess.event ) {\n\t\t\t/* Splice dstLo into eUp, and process the new region(s) */\n            tess.mesh.splitEdge( eUp.Sym );\n            tess.mesh.splice( eLo.Sym, eUp );\n            regUp = Sweep.topLeftRegion( tess, regUp );\n            //\t\t\tif (regUp == NULL) longjmp(tess->env,1);\n            eUp = Sweep.regionBelow(regUp).eUp;\n            Sweep.finishLeftRegions( tess, Sweep.regionBelow(regUp), regLo );\n            Sweep.addRightEdges( tess, regUp, eUp.Oprev, eUp, eUp, true );\n            return true;\n        }\n        if( dstUp === tess.event ) {\n\t\t\t/* Splice dstUp into eLo, and process the new region(s) */\n            tess.mesh.splitEdge( eLo.Sym );\n            tess.mesh.splice( eUp.Lnext, eLo.Oprev );\n            regLo = regUp;\n            regUp = Sweep.topRightRegion( regUp );\n            e = Sweep.regionBelow(regUp).eUp.Rprev;\n            regLo.eUp = eLo.Oprev;\n            eLo = Sweep.finishLeftRegions( tess, regLo, null );\n            Sweep.addRightEdges( tess, regUp, eLo.Onext, eUp.Rprev, e, true );\n            return true;\n        }\n\t\t/* Special case: called from ConnectRightVertex.  If either\n\t\t * edge passes on the wrong side of tess->event, split it\n\t\t * (and wait for ConnectRightVertex to splice it appropriately).\n\t\t */\n        if( Geom.edgeSign( dstUp, tess.event, isect ) >= 0 ) {\n            Sweep.regionAbove(regUp).dirty = regUp.dirty = true;\n            tess.mesh.splitEdge( eUp.Sym );\n            eUp.Org.s = tess.event.s;\n            eUp.Org.t = tess.event.t;\n        }\n        if( Geom.edgeSign( dstLo, tess.event, isect ) <= 0 ) {\n            regUp.dirty = regLo.dirty = true;\n            tess.mesh.splitEdge( eLo.Sym );\n            eLo.Org.s = tess.event.s;\n            eLo.Org.t = tess.event.t;\n        }\n\t\t/* leave the rest for ConnectRightVertex */\n        return false;\n    }\n\n\t/* General case -- split both edges, splice into new vertex.\n\t * When we do the splice operation, the order of the arguments is\n\t * arbitrary as far as correctness goes.  However, when the operation\n\t * creates a new face, the work done is proportional to the size of\n\t * the new face.  We expect the faces in the processed part of\n\t * the mesh (ie. eUp->Lface) to be smaller than the faces in the\n\t * unprocessed original contours (which will be eLo->Oprev->Lface).\n\t */\n    tess.mesh.splitEdge( eUp.Sym );\n    tess.mesh.splitEdge( eLo.Sym );\n    tess.mesh.splice( eLo.Oprev, eUp );\n    eUp.Org.s = isect.s;\n    eUp.Org.t = isect.t;\n    eUp.Org.pqHandle = tess.pq.insert( eUp.Org );\n    Sweep.getIntersectData( tess, eUp.Org, orgUp, dstUp, orgLo, dstLo );\n    Sweep.regionAbove(regUp).dirty = regUp.dirty = regLo.dirty = true;\n    return false;\n}\n\n//static void WalkDirtyRegions( TESStesselator *tess, ActiveRegion *regUp )\nSweep.walkDirtyRegions = function( tess, regUp ) {\n\t/*\n\t * When the upper or lower edge of any region changes, the region is\n\t * marked \"dirty\".  This routine walks through all the dirty regions\n\t * and makes sure that the dictionary invariants are satisfied\n\t * (see the comments at the beginning of this file).  Of course\n\t * new dirty regions can be created as we make changes to restore\n\t * the invariants.\n\t */\n    var regLo = Sweep.regionBelow(regUp);\n    var eUp, eLo;\n\n    for( ;; ) {\n\t\t/* Find the lowest dirty region (we walk from the bottom up). */\n        while( regLo.dirty ) {\n            regUp = regLo;\n            regLo = Sweep.regionBelow(regLo);\n        }\n        if( ! regUp.dirty ) {\n            regLo = regUp;\n            regUp = Sweep.regionAbove( regUp );\n            if( regUp == null || ! regUp.dirty ) {\n\t\t\t\t/* We've walked all the dirty regions */\n                return;\n            }\n        }\n        regUp.dirty = false;\n        eUp = regUp.eUp;\n        eLo = regLo.eUp;\n\n        if( eUp.Dst !== eLo.Dst ) {\n\t\t\t/* Check that the edge ordering is obeyed at the Dst vertices. */\n            if( Sweep.checkForLeftSplice( tess, regUp )) {\n\n\t\t\t\t/* If the upper or lower edge was marked fixUpperEdge, then\n\t\t\t\t * we no longer need it (since these edges are needed only for\n\t\t\t\t * vertices which otherwise have no right-going edges).\n\t\t\t\t */\n                if( regLo.fixUpperEdge ) {\n                    Sweep.deleteRegion( tess, regLo );\n                    tess.mesh.delete( eLo );\n                    regLo = Sweep.regionBelow( regUp );\n                    eLo = regLo.eUp;\n                } else if( regUp.fixUpperEdge ) {\n                    Sweep.deleteRegion( tess, regUp );\n                    tess.mesh.delete( eUp );\n                    regUp = Sweep.regionAbove( regLo );\n                    eUp = regUp.eUp;\n                }\n            }\n        }\n        if( eUp.Org !== eLo.Org ) {\n            if(    eUp.Dst !== eLo.Dst\n                && ! regUp.fixUpperEdge && ! regLo.fixUpperEdge\n                && (eUp.Dst === tess.event || eLo.Dst === tess.event) )\n            {\n\t\t\t\t/* When all else fails in CheckForIntersect(), it uses tess->event\n\t\t\t\t * as the intersection location.  To make this possible, it requires\n\t\t\t\t * that tess->event lie between the upper and lower edges, and also\n\t\t\t\t * that neither of these is marked fixUpperEdge (since in the worst\n\t\t\t\t * case it might splice one of these edges into tess->event, and\n\t\t\t\t * violate the invariant that fixable edges are the only right-going\n\t\t\t\t * edge from their associated vertex).\n\t\t\t\t */\n                if( Sweep.checkForIntersect( tess, regUp )) {\n\t\t\t\t\t/* WalkDirtyRegions() was called recursively; we're done */\n                    return;\n                }\n            } else {\n\t\t\t\t/* Even though we can't use CheckForIntersect(), the Org vertices\n\t\t\t\t * may violate the dictionary edge ordering.  Check and correct this.\n\t\t\t\t */\n                Sweep.checkForRightSplice( tess, regUp );\n            }\n        }\n        if( eUp.Org === eLo.Org && eUp.Dst === eLo.Dst ) {\n\t\t\t/* A degenerate loop consisting of only two edges -- delete it. */\n            Sweep.addWinding( eLo, eUp );\n            Sweep.deleteRegion( tess, regUp );\n            tess.mesh.delete( eUp );\n            regUp = Sweep.regionAbove( regLo );\n        }\n    }\n}\n\n\n//static void ConnectRightVertex( TESStesselator *tess, ActiveRegion *regUp, TESShalfEdge *eBottomLeft )\nSweep.connectRightVertex = function( tess, regUp, eBottomLeft ) {\n\t/*\n\t * Purpose: connect a \"right\" vertex vEvent (one where all edges go left)\n\t * to the unprocessed portion of the mesh.  Since there are no right-going\n\t * edges, two regions (one above vEvent and one below) are being merged\n\t * into one.  \"regUp\" is the upper of these two regions.\n\t *\n\t * There are two reasons for doing this (adding a right-going edge):\n\t *  - if the two regions being merged are \"inside\", we must add an edge\n\t *    to keep them separated (the combined region would not be monotone).\n\t *  - in any case, we must leave some record of vEvent in the dictionary,\n\t *    so that we can merge vEvent with features that we have not seen yet.\n\t *    For example, maybe there is a vertical edge which passes just to\n\t *    the right of vEvent; we would like to splice vEvent into this edge.\n\t *\n\t * However, we don't want to connect vEvent to just any vertex.  We don''t\n\t * want the new edge to cross any other edges; otherwise we will create\n\t * intersection vertices even when the input data had no self-intersections.\n\t * (This is a bad thing; if the user's input data has no intersections,\n\t * we don't want to generate any false intersections ourselves.)\n\t *\n\t * Our eventual goal is to connect vEvent to the leftmost unprocessed\n\t * vertex of the combined region (the union of regUp and regLo).\n\t * But because of unseen vertices with all right-going edges, and also\n\t * new vertices which may be created by edge intersections, we don''t\n\t * know where that leftmost unprocessed vertex is.  In the meantime, we\n\t * connect vEvent to the closest vertex of either chain, and mark the region\n\t * as \"fixUpperEdge\".  This flag says to delete and reconnect this edge\n\t * to the next processed vertex on the boundary of the combined region.\n\t * Quite possibly the vertex we connected to will turn out to be the\n\t * closest one, in which case we won''t need to make any changes.\n\t */\n    var eNew;\n    var eTopLeft = eBottomLeft.Onext;\n    var regLo = Sweep.regionBelow(regUp);\n    var eUp = regUp.eUp;\n    var eLo = regLo.eUp;\n    var degenerate = false;\n\n    if( eUp.Dst !== eLo.Dst ) {\n        Sweep.checkForIntersect( tess, regUp );\n    }\n\n\t/* Possible new degeneracies: upper or lower edge of regUp may pass\n\t * through vEvent, or may coincide with new intersection vertex\n\t */\n    if( Geom.vertEq( eUp.Org, tess.event )) {\n        tess.mesh.splice( eTopLeft.Oprev, eUp );\n        regUp = Sweep.topLeftRegion( tess, regUp );\n        eTopLeft = Sweep.regionBelow( regUp ).eUp;\n        Sweep.finishLeftRegions( tess, Sweep.regionBelow(regUp), regLo );\n        degenerate = true;\n    }\n    if( Geom.vertEq( eLo.Org, tess.event )) {\n        tess.mesh.splice( eBottomLeft, eLo.Oprev );\n        eBottomLeft = Sweep.finishLeftRegions( tess, regLo, null );\n        degenerate = true;\n    }\n    if( degenerate ) {\n        Sweep.addRightEdges( tess, regUp, eBottomLeft.Onext, eTopLeft, eTopLeft, true );\n        return;\n    }\n\n\t/* Non-degenerate situation -- need to add a temporary, fixable edge.\n\t * Connect to the closer of eLo->Org, eUp->Org.\n\t */\n    if( Geom.vertLeq( eLo.Org, eUp.Org )) {\n        eNew = eLo.Oprev;\n    } else {\n        eNew = eUp;\n    }\n    eNew = tess.mesh.connect( eBottomLeft.Lprev, eNew );\n\n\t/* Prevent cleanup, otherwise eNew might disappear before we've even\n\t * had a chance to mark it as a temporary edge.\n\t */\n    Sweep.addRightEdges( tess, regUp, eNew, eNew.Onext, eNew.Onext, false );\n    eNew.Sym.activeRegion.fixUpperEdge = true;\n    Sweep.walkDirtyRegions( tess, regUp );\n}\n\n/* Because vertices at exactly the same location are merged together\n * before we process the sweep event, some degenerate cases can't occur.\n * However if someone eventually makes the modifications required to\n * merge features which are close together, the cases below marked\n * TOLERANCE_NONZERO will be useful.  They were debugged before the\n * code to merge identical vertices in the main loop was added.\n */\n//#define TOLERANCE_NONZERO\tFALSE\n\n//static void ConnectLeftDegenerate( TESStesselator *tess, ActiveRegion *regUp, TESSvertex *vEvent )\nSweep.connectLeftDegenerate = function( tess, regUp, vEvent ) {\n\t/*\n\t * The event vertex lies exacty on an already-processed edge or vertex.\n\t * Adding the new vertex involves splicing it into the already-processed\n\t * part of the mesh.\n\t */\n    var e, eTopLeft, eTopRight, eLast;\n    var reg;\n\n    e = regUp.eUp;\n    if( Geom.vertEq( e.Org, vEvent )) {\n\t\t/* e->Org is an unprocessed vertex - just combine them, and wait\n\t\t * for e->Org to be pulled from the queue\n\t\t */\n        assert( false /*TOLERANCE_NONZERO*/ );\n        Sweep.spliceMergeVertices( tess, e, vEvent.anEdge );\n        return;\n    }\n\n    if( ! Geom.vertEq( e.Dst, vEvent )) {\n\t\t/* General case -- splice vEvent into edge e which passes through it */\n        tess.mesh.splitEdge( e.Sym );\n        if( regUp.fixUpperEdge ) {\n\t\t\t/* This edge was fixable -- delete unused portion of original edge */\n            tess.mesh.delete( e.Onext );\n            regUp.fixUpperEdge = false;\n        }\n        tess.mesh.splice( vEvent.anEdge, e );\n        Sweep.sweepEvent( tess, vEvent );\t/* recurse */\n        return;\n    }\n\n\t/* vEvent coincides with e->Dst, which has already been processed.\n\t * Splice in the additional right-going edges.\n\t */\n    assert( false /*TOLERANCE_NONZERO*/ );\n    regUp = Sweep.topRightRegion( regUp );\n    reg = Sweep.regionBelow( regUp );\n    eTopRight = reg.eUp.Sym;\n    eTopLeft = eLast = eTopRight.Onext;\n    if( reg.fixUpperEdge ) {\n\t\t/* Here e->Dst has only a single fixable edge going right.\n\t\t * We can delete it since now we have some real right-going edges.\n\t\t */\n        assert( eTopLeft !== eTopRight );   /* there are some left edges too */\n        Sweep.deleteRegion( tess, reg );\n        tess.mesh.delete( eTopRight );\n        eTopRight = eTopLeft.Oprev;\n    }\n    tess.mesh.splice( vEvent.anEdge, eTopRight );\n    if( ! Geom.edgeGoesLeft( eTopLeft )) {\n\t\t/* e->Dst had no left-going edges -- indicate this to AddRightEdges() */\n        eTopLeft = null;\n    }\n    Sweep.addRightEdges( tess, regUp, eTopRight.Onext, eLast, eTopLeft, true );\n}\n\n\n//static void ConnectLeftVertex( TESStesselator *tess, TESSvertex *vEvent )\nSweep.connectLeftVertex = function( tess, vEvent ) {\n\t/*\n\t * Purpose: connect a \"left\" vertex (one where both edges go right)\n\t * to the processed portion of the mesh.  Let R be the active region\n\t * containing vEvent, and let U and L be the upper and lower edge\n\t * chains of R.  There are two possibilities:\n\t *\n\t * - the normal case: split R into two regions, by connecting vEvent to\n\t *   the rightmost vertex of U or L lying to the left of the sweep line\n\t *\n\t * - the degenerate case: if vEvent is close enough to U or L, we\n\t *   merge vEvent into that edge chain.  The subcases are:\n\t *\t- merging with the rightmost vertex of U or L\n\t *\t- merging with the active edge of U or L\n\t *\t- merging with an already-processed portion of U or L\n\t */\n    var regUp, regLo, reg;\n    var eUp, eLo, eNew;\n    var tmp = new ActiveRegion();\n\n\t/* assert( vEvent->anEdge->Onext->Onext == vEvent->anEdge ); */\n\n\t/* Get a pointer to the active region containing vEvent */\n    tmp.eUp = vEvent.anEdge.Sym;\n\t/* __GL_DICTLISTKEY */ /* tessDictListSearch */\n    regUp = tess.dict.search( tmp ).key;\n    regLo = Sweep.regionBelow( regUp );\n    if( !regLo ) {\n        // This may happen if the input polygon is coplanar.\n        return;\n    }\n    eUp = regUp.eUp;\n    eLo = regLo.eUp;\n\n\t/* Try merging with U or L first */\n    if( Geom.edgeSign( eUp.Dst, vEvent, eUp.Org ) === 0.0 ) {\n        Sweep.connectLeftDegenerate( tess, regUp, vEvent );\n        return;\n    }\n\n\t/* Connect vEvent to rightmost processed vertex of either chain.\n\t * e->Dst is the vertex that we will connect to vEvent.\n\t */\n    reg = Geom.vertLeq( eLo.Dst, eUp.Dst ) ? regUp : regLo;\n\n    if( regUp.inside || reg.fixUpperEdge) {\n        if( reg === regUp ) {\n            eNew = tess.mesh.connect( vEvent.anEdge.Sym, eUp.Lnext );\n        } else {\n            var tempHalfEdge = tess.mesh.connect( eLo.Dnext, vEvent.anEdge);\n            eNew = tempHalfEdge.Sym;\n        }\n        if( reg.fixUpperEdge ) {\n            Sweep.fixUpperEdge( tess, reg, eNew );\n        } else {\n            Sweep.computeWinding( tess, Sweep.addRegionBelow( tess, regUp, eNew ));\n        }\n        Sweep.sweepEvent( tess, vEvent );\n    } else {\n\t\t/* The new vertex is in a region which does not belong to the polygon.\n\t\t * We don''t need to connect this vertex to the rest of the mesh.\n\t\t */\n        Sweep.addRightEdges( tess, regUp, vEvent.anEdge, vEvent.anEdge, null, true );\n    }\n};\n\n\n//static void SweepEvent( TESStesselator *tess, TESSvertex *vEvent )\nSweep.sweepEvent = function( tess, vEvent ) {\n\t/*\n\t * Does everything necessary when the sweep line crosses a vertex.\n\t * Updates the mesh and the edge dictionary.\n\t */\n\n    tess.event = vEvent;\t\t/* for access in EdgeLeq() */\n    Sweep.debugEvent( tess );\n\n\t/* Check if this vertex is the right endpoint of an edge that is\n\t * already in the dictionary.  In this case we don't need to waste\n\t * time searching for the location to insert new edges.\n\t */\n    var e = vEvent.anEdge;\n    while( e.activeRegion === null ) {\n        e = e.Onext;\n        if( e == vEvent.anEdge ) {\n\t\t\t/* All edges go right -- not incident to any processed edges */\n            Sweep.connectLeftVertex( tess, vEvent );\n            return;\n        }\n    }\n\n\t/* Processing consists of two phases: first we \"finish\" all the\n\t * active regions where both the upper and lower edges terminate\n\t * at vEvent (ie. vEvent is closing off these regions).\n\t * We mark these faces \"inside\" or \"outside\" the polygon according\n\t * to their winding number, and delete the edges from the dictionary.\n\t * This takes care of all the left-going edges from vEvent.\n\t */\n    var regUp = Sweep.topLeftRegion( tess, e.activeRegion );\n    assert( regUp !== null );\n    //\tif (regUp == NULL) longjmp(tess->env,1);\n    var reg = Sweep.regionBelow( regUp );\n    var eTopLeft = reg.eUp;\n    var eBottomLeft = Sweep.finishLeftRegions( tess, reg, null );\n\n\t/* Next we process all the right-going edges from vEvent.  This\n\t * involves adding the edges to the dictionary, and creating the\n\t * associated \"active regions\" which record information about the\n\t * regions between adjacent dictionary edges.\n\t */\n    if( eBottomLeft.Onext === eTopLeft ) {\n\t\t/* No right-going edges -- add a temporary \"fixable\" edge */\n        Sweep.connectRightVertex( tess, regUp, eBottomLeft );\n    } else {\n        Sweep.addRightEdges( tess, regUp, eBottomLeft.Onext, eTopLeft, eTopLeft, true );\n    }\n};\n\n\n/* Make the sentinel coordinates big enough that they will never be\n * merged with real input features.\n */\n\n//static void AddSentinel( TESStesselator *tess, TESSreal smin, TESSreal smax, TESSreal t )\nSweep.addSentinel = function( tess, smin, smax, t ) {\n\t/*\n\t * We add two sentinel edges above and below all other edges,\n\t * to avoid special cases at the top and bottom.\n\t */\n    var reg = new ActiveRegion();\n    var e = tess.mesh.makeEdge();\n    //\tif (e == NULL) longjmp(tess->env,1);\n\n    e.Org.s = smax;\n    e.Org.t = t;\n    e.Dst.s = smin;\n    e.Dst.t = t;\n    tess.event = e.Dst;\t\t/* initialize it */\n\n    reg.eUp = e;\n    reg.windingNumber = 0;\n    reg.inside = false;\n    reg.fixUpperEdge = false;\n    reg.sentinel = true;\n    reg.dirty = false;\n    reg.nodeUp = tess.dict.insert( reg );\n    //\tif (reg->nodeUp == NULL) longjmp(tess->env,1);\n}\n\n\n//static void InitEdgeDict( TESStesselator *tess )\nSweep.initEdgeDict = function( tess ) {\n\t/*\n\t * We maintain an ordering of edge intersections with the sweep line.\n\t * This order is maintained in a dynamic dictionary.\n\t */\n    tess.dict = new Dict( tess, Sweep.edgeLeq );\n    //\tif (tess->dict == NULL) longjmp(tess->env,1);\n\n    var w = (tess.bmax[0] - tess.bmin[0]);\n    var h = (tess.bmax[1] - tess.bmin[1]);\n\n    var smin = tess.bmin[0] - w;\n    var smax = tess.bmax[0] + w;\n    var tmin = tess.bmin[1] - h;\n    var tmax = tess.bmax[1] + h;\n\n    Sweep.addSentinel( tess, smin, smax, tmin );\n    Sweep.addSentinel( tess, smin, smax, tmax );\n}\n\n\nSweep.doneEdgeDict = function( tess )\n{\n    var reg;\n    var fixedEdges = 0;\n\n    while( (reg = tess.dict.min().key) !== null ) {\n\t\t/*\n\t\t * At the end of all processing, the dictionary should contain\n\t\t * only the two sentinel edges, plus at most one \"fixable\" edge\n\t\t * created by ConnectRightVertex().\n\t\t */\n        if( ! reg.sentinel ) {\n            assert( reg.fixUpperEdge );\n            assert( ++fixedEdges == 1 );\n        }\n        assert( reg.windingNumber == 0 );\n        Sweep.deleteRegion( tess, reg );\n\t\t/*    tessMeshDelete( reg->eUp );*/\n    }\n    //\tdictDeleteDict( &tess->alloc, tess->dict );\n}\n\n\nSweep.removeDegenerateEdges = function( tess ) {\n\t/*\n\t * Remove zero-length edges, and contours with fewer than 3 vertices.\n\t */\n    var e, eNext, eLnext;\n    var eHead = tess.mesh.eHead;\n\n\t/*LINTED*/\n    for( e = eHead.next; e !== eHead; e = eNext ) {\n        eNext = e.next;\n        eLnext = e.Lnext;\n\n        if( Geom.vertEq( e.Org, e.Dst ) && e.Lnext.Lnext !== e ) {\n\t\t\t/* Zero-length edge, contour has at least 3 edges */\n            Sweep.spliceMergeVertices( tess, eLnext, e );\t/* deletes e->Org */\n            tess.mesh.delete( e ); /* e is a self-loop */\n            e = eLnext;\n            eLnext = e.Lnext;\n        }\n        if( eLnext.Lnext === e ) {\n\t\t\t/* Degenerate contour (one or two edges) */\n            if( eLnext !== e ) {\n                if( eLnext === eNext || eLnext === eNext.Sym ) { eNext = eNext.next; }\n                tess.mesh.delete( eLnext );\n            }\n            if( e === eNext || e === eNext.Sym ) { eNext = eNext.next; }\n            tess.mesh.delete( e );\n        }\n    }\n}\n\nSweep.initPriorityQ = function( tess ) {\n\t/*\n\t * Insert all vertices into the priority queue which determines the\n\t * order in which vertices cross the sweep line.\n\t */\n    var pq;\n    var v, vHead;\n    var vertexCount = 0;\n\n    vHead = tess.mesh.vHead;\n    for( v = vHead.next; v !== vHead; v = v.next ) {\n        vertexCount++;\n    }\n\t/* Make sure there is enough space for sentinels. */\n    vertexCount += 8; //MAX( 8, tess->alloc.extraVertices );\n\n    pq = tess.pq = new PriorityQ( vertexCount, Geom.vertLeq );\n    //\tif (pq == NULL) return 0;\n\n    vHead = tess.mesh.vHead;\n    for( v = vHead.next; v !== vHead; v = v.next ) {\n        v.pqHandle = pq.insert( v );\n        //\t\tif (v.pqHandle == INV_HANDLE)\n        //\t\t\tbreak;\n    }\n\n    if (v !== vHead) {\n        return false;\n    }\n\n    pq.init();\n\n    return true;\n}\n\n\nSweep.donePriorityQ = function( tess ) {\n    tess.pq = null;\n}\n\n\nSweep.removeDegenerateFaces = function( tess, mesh ) {\n\t/*\n\t * Delete any degenerate faces with only two edges.  WalkDirtyRegions()\n\t * will catch almost all of these, but it won't catch degenerate faces\n\t * produced by splice operations on already-processed edges.\n\t * The two places this can happen are in FinishLeftRegions(), when\n\t * we splice in a \"temporary\" edge produced by ConnectRightVertex(),\n\t * and in CheckForLeftSplice(), where we splice already-processed\n\t * edges to ensure that our dictionary invariants are not violated\n\t * by numerical errors.\n\t *\n\t * In both these cases it is *very* dangerous to delete the offending\n\t * edge at the time, since one of the routines further up the stack\n\t * will sometimes be keeping a pointer to that edge.\n\t */\n    var f, fNext;\n    var e;\n\n\t/*LINTED*/\n    for( f = mesh.fHead.next; f !== mesh.fHead; f = fNext ) {\n        fNext = f.next;\n        e = f.anEdge;\n        assert( e.Lnext !== e );\n\n        if( e.Lnext.Lnext === e ) {\n\t\t\t/* A face with only two edges */\n            Sweep.addWinding( e.Onext, e );\n            tess.mesh.delete( e );\n        }\n    }\n    return true;\n}\n\nSweep.computeInterior = function( tess ) {\n\t/*\n\t * tessComputeInterior( tess ) computes the planar arrangement specified\n\t * by the given contours, and further subdivides this arrangement\n\t * into regions.  Each region is marked \"inside\" if it belongs\n\t * to the polygon, according to the rule given by tess->windingRule.\n\t * Each interior region is guaranteed be monotone.\n\t */\n    var v, vNext;\n\n\t/* Each vertex defines an event for our sweep line.  Start by inserting\n\t * all the vertices in a priority queue.  Events are processed in\n\t * lexicographic order, ie.\n\t *\n\t *\te1 < e2  iff  e1.x < e2.x || (e1.x == e2.x && e1.y < e2.y)\n\t */\n    Sweep.removeDegenerateEdges( tess );\n    if ( !Sweep.initPriorityQ( tess ) ) return false; /* if error */\n    Sweep.initEdgeDict( tess );\n\n    while( (v = tess.pq.extractMin()) !== null ) {\n        for( ;; ) {\n            vNext = tess.pq.min();\n            if( vNext === null || ! Geom.vertEq( vNext, v )) break;\n\n\t\t\t/* Merge together all vertices at exactly the same location.\n\t\t\t * This is more efficient than processing them one at a time,\n\t\t\t * simplifies the code (see ConnectLeftDegenerate), and is also\n\t\t\t * important for correct handling of certain degenerate cases.\n\t\t\t * For example, suppose there are two identical edges A and B\n\t\t\t * that belong to different contours (so without this code they would\n\t\t\t * be processed by separate sweep events).  Suppose another edge C\n\t\t\t * crosses A and B from above.  When A is processed, we split it\n\t\t\t * at its intersection point with C.  However this also splits C,\n\t\t\t * so when we insert B we may compute a slightly different\n\t\t\t * intersection point.  This might leave two edges with a small\n\t\t\t * gap between them.  This kind of error is especially obvious\n\t\t\t * when using boundary extraction (TESS_BOUNDARY_ONLY).\n\t\t\t */\n            vNext = tess.pq.extractMin();\n            Sweep.spliceMergeVertices( tess, v.anEdge, vNext.anEdge );\n        }\n        Sweep.sweepEvent( tess, v );\n    }\n\n\t/* Set tess->event for debugging purposes */\n    tess.event = tess.dict.min().key.eUp.Org;\n    Sweep.debugEvent( tess );\n    Sweep.doneEdgeDict( tess );\n    Sweep.donePriorityQ( tess );\n\n    if ( !Sweep.removeDegenerateFaces( tess, tess.mesh ) ) return false;\n    tess.mesh.check();\n\n    return true;\n}\n\n\nfunction Tesselator() {\n\n    /*** state needed for collecting the input data ***/\n    this.mesh = null;\t\t/* stores the input contours, and eventually\n\t the tessellation itself */\n\n    /*** state needed for projecting onto the sweep plane ***/\n\n    this.normal = [0.0, 0.0, 0.0];\t/* user-specified normal (if provided) */\n    this.sUnit = [0.0, 0.0, 0.0];\t/* unit vector in s-direction (debugging) */\n    this.tUnit = [0.0, 0.0, 0.0];\t/* unit vector in t-direction (debugging) */\n\n    this.bmin = [0.0, 0.0];\n    this.bmax = [0.0, 0.0];\n\n    /*** state needed for the line sweep ***/\n    this.windingRule = Tess2.WINDING_ODD;\t/* rule for determining polygon interior */\n\n    this.dict = null;\t\t/* edge dictionary for sweep line */\n    this.pq = null;\t\t/* priority queue of vertex events */\n    this.event = null;\t\t/* current sweep event being processed */\n\n    this.vertexIndexCounter = 0;\n\n    this.vertices = [];\n    this.vertexIndices = [];\n    this.vertexCount = 0;\n    this.elements = [];\n    this.elementCount = 0;\n};\n\nTesselator.prototype = {\n\n    dot_: function(u, v) {\n        return (u[0]*v[0] + u[1]*v[1] + u[2]*v[2]);\n    },\n\n    normalize_: function( v ) {\n        var len = v[0]*v[0] + v[1]*v[1] + v[2]*v[2];\n        assert( len > 0.0 );\n        len = Math.sqrt( len );\n        v[0] /= len;\n        v[1] /= len;\n        v[2] /= len;\n    },\n\n    longAxis_: function( v ) {\n        var i = 0;\n        if( Math.abs(v[1]) > Math.abs(v[0]) ) { i = 1; }\n        if( Math.abs(v[2]) > Math.abs(v[i]) ) { i = 2; }\n        return i;\n    },\n\n    computeNormal_: function( norm )\n    {\n        var v, v1, v2;\n        var c, tLen2, maxLen2;\n        var maxVal = [0,0,0], minVal = [0,0,0], d1 = [0,0,0], d2 = [0,0,0], tNorm = [0,0,0];\n        var maxVert = [null,null,null], minVert = [null,null,null];\n        var vHead = this.mesh.vHead;\n        var i;\n\n        v = vHead.next;\n        for( i = 0; i < 3; ++i ) {\n            c = v.coords[i];\n            minVal[i] = c;\n            minVert[i] = v;\n            maxVal[i] = c;\n            maxVert[i] = v;\n        }\n\n        for( v = vHead.next; v !== vHead; v = v.next ) {\n            for( i = 0; i < 3; ++i ) {\n                c = v.coords[i];\n                if( c < minVal[i] ) { minVal[i] = c; minVert[i] = v; }\n                if( c > maxVal[i] ) { maxVal[i] = c; maxVert[i] = v; }\n            }\n        }\n\n\t\t/* Find two vertices separated by at least 1/sqrt(3) of the maximum\n\t\t * distance between any two vertices\n\t\t */\n        i = 0;\n        if( maxVal[1] - minVal[1] > maxVal[0] - minVal[0] ) { i = 1; }\n        if( maxVal[2] - minVal[2] > maxVal[i] - minVal[i] ) { i = 2; }\n        if( minVal[i] >= maxVal[i] ) {\n\t\t\t/* All vertices are the same -- normal doesn't matter */\n            norm[0] = 0; norm[1] = 0; norm[2] = 1;\n            return;\n        }\n\n\t\t/* Look for a third vertex which forms the triangle with maximum area\n\t\t * (Length of normal == twice the triangle area)\n\t\t */\n        maxLen2 = 0;\n        v1 = minVert[i];\n        v2 = maxVert[i];\n        d1[0] = v1.coords[0] - v2.coords[0];\n        d1[1] = v1.coords[1] - v2.coords[1];\n        d1[2] = v1.coords[2] - v2.coords[2];\n        for( v = vHead.next; v !== vHead; v = v.next ) {\n            d2[0] = v.coords[0] - v2.coords[0];\n            d2[1] = v.coords[1] - v2.coords[1];\n            d2[2] = v.coords[2] - v2.coords[2];\n            tNorm[0] = d1[1]*d2[2] - d1[2]*d2[1];\n            tNorm[1] = d1[2]*d2[0] - d1[0]*d2[2];\n            tNorm[2] = d1[0]*d2[1] - d1[1]*d2[0];\n            tLen2 = tNorm[0]*tNorm[0] + tNorm[1]*tNorm[1] + tNorm[2]*tNorm[2];\n            if( tLen2 > maxLen2 ) {\n                maxLen2 = tLen2;\n                norm[0] = tNorm[0];\n                norm[1] = tNorm[1];\n                norm[2] = tNorm[2];\n            }\n        }\n\n        if( maxLen2 <= 0 ) {\n\t\t\t/* All points lie on a single line -- any decent normal will do */\n            norm[0] = norm[1] = norm[2] = 0;\n            norm[this.longAxis_(d1)] = 1;\n        }\n    },\n\n    checkOrientation_: function() {\n        var area;\n        var f, fHead = this.mesh.fHead;\n        var v, vHead = this.mesh.vHead;\n        var e;\n\n\t\t/* When we compute the normal automatically, we choose the orientation\n\t\t * so that the the sum of the signed areas of all contours is non-negative.\n\t\t */\n        area = 0;\n        for( f = fHead.next; f !== fHead; f = f.next ) {\n            e = f.anEdge;\n            if( e.winding <= 0 ) continue;\n            do {\n                area += (e.Org.s - e.Dst.s) * (e.Org.t + e.Dst.t);\n                e = e.Lnext;\n            } while( e !== f.anEdge );\n        }\n        if( area < 0 ) {\n\t\t\t/* Reverse the orientation by flipping all the t-coordinates */\n            for( v = vHead.next; v !== vHead; v = v.next ) {\n                v.t = - v.t;\n            }\n            this.tUnit[0] = - this.tUnit[0];\n            this.tUnit[1] = - this.tUnit[1];\n            this.tUnit[2] = - this.tUnit[2];\n        }\n    },\n\n\t/*\t#ifdef FOR_TRITE_TEST_PROGRAM\n\t #include <stdlib.h>\n\t extern int RandomSweep;\n\t #define S_UNIT_X\t(RandomSweep ? (2*drand48()-1) : 1.0)\n\t #define S_UNIT_Y\t(RandomSweep ? (2*drand48()-1) : 0.0)\n\t #else\n\t #if defined(SLANTED_SWEEP) */\n\t/* The \"feature merging\" is not intended to be complete.  There are\n\t * special cases where edges are nearly parallel to the sweep line\n\t * which are not implemented.  The algorithm should still behave\n\t * robustly (ie. produce a reasonable tesselation) in the presence\n\t * of such edges, however it may miss features which could have been\n\t * merged.  We could minimize this effect by choosing the sweep line\n\t * direction to be something unusual (ie. not parallel to one of the\n\t * coordinate axes).\n\t */\n\t/*\t#define S_UNIT_X\t(TESSreal)0.50941539564955385\t// Pre-normalized\n\t #define S_UNIT_Y\t(TESSreal)0.86052074622010633\n\t #else\n\t #define S_UNIT_X\t(TESSreal)1.0\n\t #define S_UNIT_Y\t(TESSreal)0.0\n\t #endif\n\t #endif*/\n\n\t/* Determine the polygon normal and project vertices onto the plane\n\t * of the polygon.\n\t */\n    projectPolygon_: function() {\n        var v, vHead = this.mesh.vHead;\n        var norm = [0,0,0];\n        var sUnit, tUnit;\n        var i, first, computedNormal = false;\n\n        norm[0] = this.normal[0];\n        norm[1] = this.normal[1];\n        norm[2] = this.normal[2];\n        if( norm[0] === 0.0 && norm[1] === 0.0 && norm[2] === 0.0 ) {\n            this.computeNormal_( norm );\n            computedNormal = true;\n        }\n        sUnit = this.sUnit;\n        tUnit = this.tUnit;\n        i = this.longAxis_( norm );\n\n\t\t/*\t#if defined(FOR_TRITE_TEST_PROGRAM) || defined(TRUE_PROJECT)\n\t\t // Choose the initial sUnit vector to be approximately perpendicular\n\t\t // to the normal.\n\n\t\t Normalize( norm );\n\n\t\t sUnit[i] = 0;\n\t\t sUnit[(i+1)%3] = S_UNIT_X;\n\t\t sUnit[(i+2)%3] = S_UNIT_Y;\n\n\t\t // Now make it exactly perpendicular\n\t\t w = Dot( sUnit, norm );\n\t\t sUnit[0] -= w * norm[0];\n\t\t sUnit[1] -= w * norm[1];\n\t\t sUnit[2] -= w * norm[2];\n\t\t Normalize( sUnit );\n\n\t\t // Choose tUnit so that (sUnit,tUnit,norm) form a right-handed frame\n\t\t tUnit[0] = norm[1]*sUnit[2] - norm[2]*sUnit[1];\n\t\t tUnit[1] = norm[2]*sUnit[0] - norm[0]*sUnit[2];\n\t\t tUnit[2] = norm[0]*sUnit[1] - norm[1]*sUnit[0];\n\t\t Normalize( tUnit );\n\t\t #else*/\n\t\t/* Project perpendicular to a coordinate axis -- better numerically */\n        sUnit[i] = 0;\n        sUnit[(i+1)%3] = 1.0;\n        sUnit[(i+2)%3] = 0.0;\n\n        tUnit[i] = 0;\n        tUnit[(i+1)%3] = 0.0;\n        tUnit[(i+2)%3] = (norm[i] > 0) ? 1.0 : -1.0;\n        //\t#endif\n\n\t\t/* Project the vertices onto the sweep plane */\n        for( v = vHead.next; v !== vHead; v = v.next ) {\n            v.s = this.dot_( v.coords, sUnit );\n            v.t = this.dot_( v.coords, tUnit );\n        }\n        if( computedNormal ) {\n            this.checkOrientation_();\n        }\n\n\t\t/* Compute ST bounds. */\n        first = true;\n        for( v = vHead.next; v !== vHead; v = v.next ) {\n            if (first) {\n                this.bmin[0] = this.bmax[0] = v.s;\n                this.bmin[1] = this.bmax[1] = v.t;\n                first = false;\n            } else {\n                if (v.s < this.bmin[0]) this.bmin[0] = v.s;\n                if (v.s > this.bmax[0]) this.bmax[0] = v.s;\n                if (v.t < this.bmin[1]) this.bmin[1] = v.t;\n                if (v.t > this.bmax[1]) this.bmax[1] = v.t;\n            }\n        }\n    },\n\n    addWinding_: function(eDst,eSrc) {\n        eDst.winding += eSrc.winding;\n        eDst.Sym.winding += eSrc.Sym.winding;\n    },\n\n\t/* tessMeshTessellateMonoRegion( face ) tessellates a monotone region\n\t * (what else would it do??)  The region must consist of a single\n\t * loop of half-edges (see mesh.h) oriented CCW.  \"Monotone\" in this\n\t * case means that any vertical line intersects the interior of the\n\t * region in a single interval.\n\t *\n\t * Tessellation consists of adding interior edges (actually pairs of\n\t * half-edges), to split the region into non-overlapping triangles.\n\t *\n\t * The basic idea is explained in Preparata and Shamos (which I don''t\n\t * have handy right now), although their implementation is more\n\t * complicated than this one.  The are two edge chains, an upper chain\n\t * and a lower chain.  We process all vertices from both chains in order,\n\t * from right to left.\n\t *\n\t * The algorithm ensures that the following invariant holds after each\n\t * vertex is processed: the untessellated region consists of two\n\t * chains, where one chain (say the upper) is a single edge, and\n\t * the other chain is concave.  The left vertex of the single edge\n\t * is always to the left of all vertices in the concave chain.\n\t *\n\t * Each step consists of adding the rightmost unprocessed vertex to one\n\t * of the two chains, and forming a fan of triangles from the rightmost\n\t * of two chain endpoints.  Determining whether we can add each triangle\n\t * to the fan is a simple orientation test.  By making the fan as large\n\t * as possible, we restore the invariant (check it yourself).\n\t */\n    //\tint tessMeshTessellateMonoRegion( TESSmesh *mesh, TESSface *face )\n    tessellateMonoRegion_: function( mesh, face ) {\n        var up, lo;\n\n\t\t/* All edges are oriented CCW around the boundary of the region.\n\t\t * First, find the half-edge whose origin vertex is rightmost.\n\t\t * Since the sweep goes from left to right, face->anEdge should\n\t\t * be close to the edge we want.\n\t\t */\n        up = face.anEdge;\n        assert( up.Lnext !== up && up.Lnext.Lnext !== up );\n\n        for( ; Geom.vertLeq( up.Dst, up.Org ); up = up.Lprev )\n            ;\n        for( ; Geom.vertLeq( up.Org, up.Dst ); up = up.Lnext )\n            ;\n        lo = up.Lprev;\n\n        while( up.Lnext !== lo ) {\n            if( Geom.vertLeq( up.Dst, lo.Org )) {\n\t\t\t\t/* up->Dst is on the left.  It is safe to form triangles from lo->Org.\n\t\t\t\t * The EdgeGoesLeft test guarantees progress even when some triangles\n\t\t\t\t * are CW, given that the upper and lower chains are truly monotone.\n\t\t\t\t */\n                while( lo.Lnext !== up && (Geom.edgeGoesLeft( lo.Lnext )\n                || Geom.edgeSign( lo.Org, lo.Dst, lo.Lnext.Dst ) <= 0.0 )) {\n                    var tempHalfEdge = mesh.connect( lo.Lnext, lo );\n                    //if (tempHalfEdge == NULL) return 0;\n                    lo = tempHalfEdge.Sym;\n                }\n                lo = lo.Lprev;\n            } else {\n\t\t\t\t/* lo->Org is on the left.  We can make CCW triangles from up->Dst. */\n                while( lo.Lnext != up && (Geom.edgeGoesRight( up.Lprev )\n                || Geom.edgeSign( up.Dst, up.Org, up.Lprev.Org ) >= 0.0 )) {\n                    var tempHalfEdge = mesh.connect( up, up.Lprev );\n                    //if (tempHalfEdge == NULL) return 0;\n                    up = tempHalfEdge.Sym;\n                }\n                up = up.Lnext;\n            }\n        }\n\n\t\t/* Now lo->Org == up->Dst == the leftmost vertex.  The remaining region\n\t\t * can be tessellated in a fan from this leftmost vertex.\n\t\t */\n        assert( lo.Lnext !== up );\n        while( lo.Lnext.Lnext !== up ) {\n            var tempHalfEdge = mesh.connect( lo.Lnext, lo );\n            //if (tempHalfEdge == NULL) return 0;\n            lo = tempHalfEdge.Sym;\n        }\n\n        return true;\n    },\n\n\n\t/* tessMeshTessellateInterior( mesh ) tessellates each region of\n\t * the mesh which is marked \"inside\" the polygon.  Each such region\n\t * must be monotone.\n\t */\n    //int tessMeshTessellateInterior( TESSmesh *mesh )\n    tessellateInterior_: function( mesh ) {\n        var f, next;\n\n\t\t/*LINTED*/\n        for( f = mesh.fHead.next; f !== mesh.fHead; f = next ) {\n\t\t\t/* Make sure we don''t try to tessellate the new triangles. */\n            next = f.next;\n            if( f.inside ) {\n                if ( !this.tessellateMonoRegion_( mesh, f ) ) return false;\n            }\n        }\n\n        return true;\n    },\n\n\n\t/* tessMeshDiscardExterior( mesh ) zaps (ie. sets to NULL) all faces\n\t * which are not marked \"inside\" the polygon.  Since further mesh operations\n\t * on NULL faces are not allowed, the main purpose is to clean up the\n\t * mesh so that exterior loops are not represented in the data structure.\n\t */\n    //void tessMeshDiscardExterior( TESSmesh *mesh )\n    discardExterior_: function( mesh ) {\n        var f, next;\n\n\t\t/*LINTED*/\n        for( f = mesh.fHead.next; f !== mesh.fHead; f = next ) {\n\t\t\t/* Since f will be destroyed, save its next pointer. */\n            next = f.next;\n            if( ! f.inside ) {\n                mesh.zapFace( f );\n            }\n        }\n    },\n\n\t/* tessMeshSetWindingNumber( mesh, value, keepOnlyBoundary ) resets the\n\t * winding numbers on all edges so that regions marked \"inside\" the\n\t * polygon have a winding number of \"value\", and regions outside\n\t * have a winding number of 0.\n\t *\n\t * If keepOnlyBoundary is TRUE, it also deletes all edges which do not\n\t * separate an interior region from an exterior one.\n\t */\n    //\tint tessMeshSetWindingNumber( TESSmesh *mesh, int value, int keepOnlyBoundary )\n    setWindingNumber_: function( mesh, value, keepOnlyBoundary ) {\n        var e, eNext;\n\n        for( e = mesh.eHead.next; e !== mesh.eHead; e = eNext ) {\n            eNext = e.next;\n            if( e.Rface.inside !== e.Lface.inside ) {\n\n\t\t\t\t/* This is a boundary edge (one side is interior, one is exterior). */\n                e.winding = (e.Lface.inside) ? value : -value;\n            } else {\n\n\t\t\t\t/* Both regions are interior, or both are exterior. */\n                if( ! keepOnlyBoundary ) {\n                    e.winding = 0;\n                } else {\n                    mesh.delete( e );\n                }\n            }\n        }\n    },\n\n    getNeighbourFace_: function(edge)\n    {\n        if (!edge.Rface)\n            return -1;\n        if (!edge.Rface.inside)\n            return -1;\n        return edge.Rface.n;\n    },\n\n    outputPolymesh_: function( mesh, elementType, polySize, vertexSize ) {\n        var v;\n        var f;\n        var edge;\n        var maxFaceCount = 0;\n        var maxVertexCount = 0;\n        var faceVerts, i;\n        var elements = 0;\n        var vert;\n\n        // Assume that the input data is triangles now.\n        // Try to merge as many polygons as possible\n        if (polySize > 3)\n        {\n            mesh.mergeConvexFaces( polySize );\n        }\n\n        // Mark unused\n        for ( v = mesh.vHead.next; v !== mesh.vHead; v = v.next )\n            v.n = -1;\n\n        // Create unique IDs for all vertices and faces.\n        for ( f = mesh.fHead.next; f != mesh.fHead; f = f.next )\n        {\n            f.n = -1;\n            if( !f.inside ) continue;\n\n            edge = f.anEdge;\n            faceVerts = 0;\n            do\n            {\n                v = edge.Org;\n                if ( v.n === -1 )\n                {\n                    v.n = maxVertexCount;\n                    maxVertexCount++;\n                }\n                faceVerts++;\n                edge = edge.Lnext;\n            }\n            while (edge !== f.anEdge);\n\n            assert( faceVerts <= polySize );\n\n            f.n = maxFaceCount;\n            ++maxFaceCount;\n        }\n\n        this.elementCount = maxFaceCount;\n        if (elementType == Tess2.CONNECTED_POLYGONS)\n            maxFaceCount *= 2;\n\t\t/*\t\ttess.elements = (TESSindex*)tess->alloc.memalloc( tess->alloc.userData,\n\t\t sizeof(TESSindex) * maxFaceCount * polySize );\n\t\t if (!tess->elements)\n\t\t {\n\t\t tess->outOfMemory = 1;\n\t\t return;\n\t\t }*/\n        this.elements = [];\n        this.elements.length = maxFaceCount * polySize;\n\n        this.vertexCount = maxVertexCount;\n\t\t/*\t\ttess->vertices = (TESSreal*)tess->alloc.memalloc( tess->alloc.userData,\n\t\t sizeof(TESSreal) * tess->vertexCount * vertexSize );\n\t\t if (!tess->vertices)\n\t\t {\n\t\t tess->outOfMemory = 1;\n\t\t return;\n\t\t }*/\n        this.vertices = [];\n        this.vertices.length = maxVertexCount * vertexSize;\n\n\t\t/*\t\ttess->vertexIndices = (TESSindex*)tess->alloc.memalloc( tess->alloc.userData,\n\t\t sizeof(TESSindex) * tess->vertexCount );\n\t\t if (!tess->vertexIndices)\n\t\t {\n\t\t tess->outOfMemory = 1;\n\t\t return;\n\t\t }*/\n        this.vertexIndices = [];\n        this.vertexIndices.length = maxVertexCount;\n\n\n        // Output vertices.\n        for ( v = mesh.vHead.next; v !== mesh.vHead; v = v.next )\n        {\n            if ( v.n != -1 )\n            {\n                // Store coordinate\n                var idx = v.n * vertexSize;\n                this.vertices[idx+0] = v.coords[0];\n                this.vertices[idx+1] = v.coords[1];\n                if ( vertexSize > 2 )\n                    this.vertices[idx+2] = v.coords[2];\n                // Store vertex index.\n                this.vertexIndices[v.n] = v.idx;\n            }\n        }\n\n        // Output indices.\n        var nel = 0;\n        for ( f = mesh.fHead.next; f !== mesh.fHead; f = f.next )\n        {\n            if ( !f.inside ) continue;\n\n            // Store polygon\n            edge = f.anEdge;\n            faceVerts = 0;\n            do\n            {\n                v = edge.Org;\n                this.elements[nel++] = v.n;\n                faceVerts++;\n                edge = edge.Lnext;\n            }\n            while (edge !== f.anEdge);\n            // Fill unused.\n            for (i = faceVerts; i < polySize; ++i)\n                this.elements[nel++] = -1;\n\n            // Store polygon connectivity\n            if ( elementType == Tess2.CONNECTED_POLYGONS )\n            {\n                edge = f.anEdge;\n                do\n                {\n                    this.elements[nel++] = this.getNeighbourFace_( edge );\n                    edge = edge.Lnext;\n                }\n                while (edge !== f.anEdge);\n                // Fill unused.\n                for (i = faceVerts; i < polySize; ++i)\n                    this.elements[nel++] = -1;\n            }\n        }\n    },\n\n    //\tvoid OutputContours( TESStesselator *tess, TESSmesh *mesh, int vertexSize )\n    outputContours_: function( mesh, vertexSize ) {\n        var f;\n        var edge;\n        var start;\n        var verts;\n        var elements;\n        var vertInds;\n        var startVert = 0;\n        var vertCount = 0;\n\n        this.vertexCount = 0;\n        this.elementCount = 0;\n\n        for ( f = mesh.fHead.next; f !== mesh.fHead; f = f.next )\n        {\n            if ( !f.inside ) continue;\n\n            start = edge = f.anEdge;\n            do\n            {\n                this.vertexCount++;\n                edge = edge.Lnext;\n            }\n            while ( edge !== start );\n\n            this.elementCount++;\n        }\n\n\t\t/*\t\ttess->elements = (TESSindex*)tess->alloc.memalloc( tess->alloc.userData,\n\t\t sizeof(TESSindex) * tess->elementCount * 2 );\n\t\t if (!tess->elements)\n\t\t {\n\t\t tess->outOfMemory = 1;\n\t\t return;\n\t\t }*/\n        this.elements = [];\n        this.elements.length = this.elementCount * 2;\n\n\t\t/*\t\ttess->vertices = (TESSreal*)tess->alloc.memalloc( tess->alloc.userData,\n\t\t sizeof(TESSreal) * tess->vertexCount * vertexSize );\n\t\t if (!tess->vertices)\n\t\t {\n\t\t tess->outOfMemory = 1;\n\t\t return;\n\t\t }*/\n        this.vertices = [];\n        this.vertices.length = this.vertexCount * vertexSize;\n\n\t\t/*\t\ttess->vertexIndices = (TESSindex*)tess->alloc.memalloc( tess->alloc.userData,\n\t\t sizeof(TESSindex) * tess->vertexCount );\n\t\t if (!tess->vertexIndices)\n\t\t {\n\t\t tess->outOfMemory = 1;\n\t\t return;\n\t\t }*/\n        this.vertexIndices = [];\n        this.vertexIndices.length = this.vertexCount;\n\n        var nv = 0;\n        var nvi = 0;\n        var nel = 0;\n        startVert = 0;\n\n        for ( f = mesh.fHead.next; f !== mesh.fHead; f = f.next )\n        {\n            if ( !f.inside ) continue;\n\n            vertCount = 0;\n            start = edge = f.anEdge;\n            do\n            {\n                this.vertices[nv++] = edge.Org.coords[0];\n                this.vertices[nv++] = edge.Org.coords[1];\n                if ( vertexSize > 2 )\n                    this.vertices[nv++] = edge.Org.coords[2];\n                this.vertexIndices[nvi++] = edge.Org.idx;\n                vertCount++;\n                edge = edge.Lnext;\n            }\n            while ( edge !== start );\n\n            this.elements[nel++] = startVert;\n            this.elements[nel++] = vertCount;\n\n            startVert += vertCount;\n        }\n    },\n\n    addContour: function( size, vertices )\n    {\n        var e;\n        var i;\n\n        if ( this.mesh === null )\n            this.mesh = new TESSmesh();\n\t\t/*\t \tif ( tess->mesh == NULL ) {\n\t\t tess->outOfMemory = 1;\n\t\t return;\n\t\t }*/\n\n        if ( size < 2 )\n            size = 2;\n        if ( size > 3 )\n            size = 3;\n\n        e = null;\n\n        for( i = 0; i < vertices.length; i += size )\n        {\n            if( e == null ) {\n\t\t\t\t/* Make a self-loop (one vertex, one edge). */\n                e = this.mesh.makeEdge();\n\t\t\t\t/*\t\t\t\tif ( e == NULL ) {\n\t\t\t\t tess->outOfMemory = 1;\n\t\t\t\t return;\n\t\t\t\t }*/\n                this.mesh.splice( e, e.Sym );\n            } else {\n\t\t\t\t/* Create a new vertex and edge which immediately follow e\n\t\t\t\t * in the ordering around the left face.\n\t\t\t\t */\n                this.mesh.splitEdge( e );\n                e = e.Lnext;\n            }\n\n\t\t\t/* The new vertex is now e->Org. */\n            e.Org.coords[0] = vertices[i+0];\n            e.Org.coords[1] = vertices[i+1];\n            if ( size > 2 )\n                e.Org.coords[2] = vertices[i+2];\n            else\n                e.Org.coords[2] = 0.0;\n\t\t\t/* Store the insertion number so that the vertex can be later recognized. */\n            e.Org.idx = this.vertexIndexCounter++;\n\n\t\t\t/* The winding of an edge says how the winding number changes as we\n\t\t\t * cross from the edge''s right face to its left face.  We add the\n\t\t\t * vertices in such an order that a CCW contour will add +1 to\n\t\t\t * the winding number of the region inside the contour.\n\t\t\t */\n            e.winding = 1;\n            e.Sym.winding = -1;\n        }\n    },\n\n    //\tint tessTesselate( TESStesselator *tess, int windingRule, int elementType, int polySize, int vertexSize, const TESSreal* normal )\n    tesselate: function( windingRule, elementType, polySize, vertexSize, normal ) {\n        this.vertices = [];\n        this.elements = [];\n        this.vertexIndices = [];\n\n        this.vertexIndexCounter = 0;\n\n        if (normal)\n        {\n            this.normal[0] = normal[0];\n            this.normal[1] = normal[1];\n            this.normal[2] = normal[2];\n        }\n\n        this.windingRule = windingRule;\n\n        if (vertexSize < 2)\n            vertexSize = 2;\n        if (vertexSize > 3)\n            vertexSize = 3;\n\n\t\t/*\t\tif (setjmp(tess->env) != 0) {\n\t\t // come back here if out of memory\n\t\t return 0;\n\t\t }*/\n\n        if (!this.mesh)\n        {\n            return false;\n        }\n\n\t\t/* Determine the polygon normal and project vertices onto the plane\n\t\t * of the polygon.\n\t\t */\n        this.projectPolygon_();\n\n\t\t/* tessComputeInterior( tess ) computes the planar arrangement specified\n\t\t * by the given contours, and further subdivides this arrangement\n\t\t * into regions.  Each region is marked \"inside\" if it belongs\n\t\t * to the polygon, according to the rule given by tess->windingRule.\n\t\t * Each interior region is guaranteed be monotone.\n\t\t */\n        Sweep.computeInterior( this );\n\n        var mesh = this.mesh;\n\n\t\t/* If the user wants only the boundary contours, we throw away all edges\n\t\t * except those which separate the interior from the exterior.\n\t\t * Otherwise we tessellate all the regions marked \"inside\".\n\t\t */\n        if (elementType == Tess2.BOUNDARY_CONTOURS) {\n            this.setWindingNumber_( mesh, 1, true );\n        } else {\n            this.tessellateInterior_( mesh );\n        }\n        //\t\tif (rc == 0) longjmp(tess->env,1);  /* could've used a label */\n\n        mesh.check();\n\n        if (elementType == Tess2.BOUNDARY_CONTOURS) {\n            this.outputContours_( mesh, vertexSize );     /* output contours */\n        }\n        else\n        {\n            this.outputPolymesh_( mesh, elementType, polySize, vertexSize );     /* output polygons */\n        }\n\n//\t\t\ttess.mesh = null;\n\n        return true;\n    }\n};","'use strict';\n/**\n * @enum {string} AttributeType\n * @private\n * @readonly\n */\nconst AttributeType = {\n    Int8:   'BYTE',\n    Uint8:  'UNSIGNED_BYTE',\n    Int16:  'SHORT',\n    Uint16: 'UNSIGNED_SHORT',\n    Int32:  'INT',\n    Uint32: 'UNSIGNED_INT',\n    Float32: 'FLOAT'\n};\n\n/**\n * The `Buffer` class turns a `StructArray` into a WebGL buffer. Each member of the StructArray's\n * Struct type is converted to a WebGL atribute.\n * @private\n */\nclass BufferUtil {\n    /**\n     * @param {Object} array A serialized StructArray.\n     * @param {Object} arrayType A serialized StructArrayType.\n     * @param {BufferType} type\n     */\n    constructor(array, arrayType, type) {\n        this.arrayBuffer = array.arrayBuffer;\n        this.length = array.length;\n        this.attributes = arrayType.members;\n        this.itemSize = arrayType.bytesPerElement;\n        this.type = type;\n        this.arrayType = arrayType;\n    }\n\n    static fromStructArray(array, type) {\n        return new BufferUtil(array.serialize(), array.constructor.serialize(), type);\n    }\n\n    updateData(gl,array) {\n        this.bind(gl);\n        gl.bufferSubData(gl.ARRAY_BUFFER, 0, array.arrayBuffer);\n    }\n\n    /**\n     * Bind this buffer to a WebGL context.\n     * @param gl The WebGL context\n     */\n    bind(gl) {\n        const type = gl[this.type];\n\n        if (!this.buffer) {\n            this.gl = gl;\n            this.buffer = gl.createBuffer();\n            gl.bindBuffer(type, this.buffer);\n            gl.bufferData(type, this.arrayBuffer, gl.STATIC_DRAW);\n\n            // dump array buffer once it's bound to gl\n            this.arrayBuffer = null;\n        } else {\n            gl.bindBuffer(type, this.buffer);\n        }\n    }\n\n    enableAttributes (gl, program) {\n        for (let j = 0; j < this.attributes.length; j++) {\n            const member = this.attributes[j];\n            const attribIndex = program[member.name];\n            if (attribIndex !== undefined) {\n                gl.enableVertexAttribArray(attribIndex);\n            }\n        }\n    }\n\n    /**\n     * Set the attribute pointers in a WebGL context\n     * @param gl The WebGL context\n     * @param program The active WebGL program\n     * @param vertexOffset Index of the starting vertex of the segment\n     */\n    setVertexAttribPointers(gl, program, vertexOffset) {\n        for (let j = 0; j < this.attributes.length; j++) {\n            const member = this.attributes[j];\n            const attribIndex = program[member.name];\n\n            if (attribIndex !== undefined) {\n                gl.vertexAttribPointer(\n                    attribIndex,\n                    member.components,\n                    gl[AttributeType[member.type]],\n                    false,\n                    this.arrayType.bytesPerElement,\n                    member.offset + (this.arrayType.bytesPerElement * vertexOffset || 0)\n                );\n            }\n        }\n    }\n\n    /**\n     * Destroy the GL buffer bound to the given WebGL context\n     * @param gl The WebGL context\n     */\n    destroy() {\n        if (this.buffer) {\n            this.gl.deleteBuffer(this.buffer);\n        }\n    }\n}\n\n/**\n * @enum {string} BufferType\n * @private\n * @readonly\n */\nBufferUtil.BufferType = {\n    VERTEX: 'ARRAY_BUFFER',\n    ELEMENT: 'ELEMENT_ARRAY_BUFFER'\n};\n\nexport default BufferUtil;\n","'use strict';\n// @flow\n\n// Note: all \"sizes\" are measured in bytes\n\n// const assert = require('assert');\n\nexport default  createStructArrayType;\n\nconst viewTypes = {\n    'Int8': Int8Array,\n    'Uint8': Uint8Array,\n    'Uint8Clamped': Uint8ClampedArray,\n    'Int16': Int16Array,\n    'Uint16': Uint16Array,\n    'Int32': Int32Array,\n    'Uint32': Uint32Array,\n    'Float32': Float32Array,\n    'Float64': Float64Array\n};\n\n/* eslint-disable no-undef */\n// type ViewType = $Keys<typeof viewTypes>;\n/* eslint-enable no-undef */\n\n/**\n * @typedef {Object} StructMember\n * @private\n * @property {string} name\n * @property {string} type\n * @property {number} components\n */\n\n/**\n * @private\n */\nclass Struct {\n    // _pos1: number;\n    // _pos2: number;\n    // _pos4: number;\n    // _pos8: number;\n    // _structArray: StructArray;\n    // // The following properties are defined on the prototype of sub classes.\n    // size: number;\n    // alignment: number;\n    /**\n     * @param {StructArray} structArray The StructArray the struct is stored in\n     * @param {number} index The index of the struct in the StructArray.\n     * @private\n     */\n    constructor(structArray, index) {\n        this._structArray = structArray;\n        this._pos1 = index * this.size;\n        this._pos2 = this._pos1 / 2;\n        this._pos4 = this._pos1 / 4;\n        this._pos8 = this._pos1 / 8;\n    }\n}\n\nconst DEFAULT_CAPACITY = 128;\nconst RESIZE_MULTIPLIER = 5;\n\n// type StructArrayMember = {|\n//     name: string,\n//     type: ViewType,\n//     components: number,\n//     offset: number\n// |};\n\n/**\n * The StructArray class is inherited by the custom StructArrayType classes created with\n * `createStructArrayType(members, options)`.\n * @private\n */\nclass StructArray {\n    // capacity: number;\n    // length: number;\n    // isTransferred: boolean;\n    // arrayBuffer: ArrayBuffer;\n    // int8: ?Int8Array;\n    // uint8: Uint8Array;\n    // uint8clamped: ?Uint8ClampedArray;\n    // int16: ?Int16Array;\n    // uint16: ?Uint16Array;\n    // int32: ?Int32Array;\n    // uint32: ?Uint32Array;\n    // float32: ?Float32Array;\n    // float64: ?Float64Array;\n    // // The following properties aer defined on the prototype.\n    // members: Array<StructArrayMember>;\n    // StructType: typeof Struct;\n    // bytesPerElement: number;\n    // _usedTypes: Array<ViewType>;\n    // emplaceBack: Function;\n    constructor(serialized, length) {\n        this.isTransferred = false;\n\n        if (serialized !== undefined) {\n        // Create from an serialized StructArray\n            this.arrayBuffer = serialized.arrayBuffer;\n            this.length = serialized.length;\n            this.capacity = this.arrayBuffer.byteLength / this.bytesPerElement;\n            this._refreshViews();\n\n        // Create a new StructArray\n        } else {\n            this.capacity = -1;\n            this.resize(0);\n        }\n    }\n\n    /**\n     * Serialize the StructArray type. This serializes the *type* not an instance of the type.\n     */\n    static serialize() {\n        return {\n            members: this.prototype.members,\n            alignment: this.prototype.StructType.prototype.alignment,\n            bytesPerElement: this.prototype.bytesPerElement\n        };\n    }\n\n    /**\n     * Serialize this StructArray instance\n     */\n    serialize(transferables) {\n        // assert(!this.isTransferred);\n\n        this._trim();\n\n        if (transferables) {\n            this.isTransferred = true;\n            transferables.push(this.arrayBuffer);\n        }\n        return {\n            length: this.length,\n            arrayBuffer: this.arrayBuffer\n        };\n    }\n\n    /**\n     * Return the Struct at the given location in the array.\n     * @param {number} index The index of the element.\n     */\n    get(index) {\n        // assert(!this.isTransferred);\n        return new this.StructType(this, index);\n    }\n\n    /**\n     * Resize the array to discard unused capacity.\n     */\n    _trim() {\n        if (this.length !== this.capacity) {\n            this.capacity = this.length;\n            this.arrayBuffer = this.arrayBuffer.slice(0, this.length * this.bytesPerElement);\n            this._refreshViews();\n        }\n    }\n\n    /**\n     * Resize the array.\n     * If `n` is greater than the current length then additional elements with undefined values are added.\n     * If `n` is less than the current length then the array will be reduced to the first `n` elements.\n     * @param {number} n The new size of the array.\n     */\n    resize(n) {\n        // assert(!this.isTransferred);\n\n        this.length = n;\n        if (n > this.capacity) {\n            this.capacity = Math.max(n, Math.floor(this.capacity * RESIZE_MULTIPLIER), DEFAULT_CAPACITY);\n            this.arrayBuffer = new ArrayBuffer(this.capacity * this.bytesPerElement);\n\n            const oldUint8Array = this.uint8;\n            this._refreshViews();\n            if (oldUint8Array) this.uint8.set(oldUint8Array);\n        }\n    }\n\n    /**\n     * Create TypedArray views for the current ArrayBuffer.\n     */\n    _refreshViews() {\n        for (const type of this._usedTypes) {\n            // $FlowFixMe\n            this[getArrayViewName(type)] = new viewTypes[type](this.arrayBuffer);\n        }\n    }\n\n    /**\n     * Output the `StructArray` between indices `startIndex` and `endIndex` as an array of `StructTypes` to enable sorting\n     * @param {number} startIndex\n     * @param {number} endIndex\n     */\n    toArray(startIndex, endIndex) {\n        // assert(!this.isTransferred);\n\n        const array = [];\n\n        for (let i = startIndex; i < endIndex; i++) {\n            const struct = this.get(i);\n            array.push(struct);\n        }\n\n        return array;\n    }\n}\n\nconst structArrayTypeCache = {};\n\n/**\n * `createStructArrayType` is used to create new `StructArray` types.\n *\n * `StructArray` provides an abstraction over `ArrayBuffer` and `TypedArray` making it behave like\n * an array of typed structs. A StructArray is comprised of elements. Each element has a set of\n * members that are defined when the `StructArrayType` is created.\n *\n * StructArrays useful for creating large arrays that:\n * - can be transferred from workers as a Transferable object\n * - can be copied cheaply\n * - use less memory for lower-precision members\n * - can be used as buffers in WebGL.\n *\n * @class\n * @param {Object} options\n * @param {number} options.alignment Use `4` to align members to 4 byte boundaries. Default is 1.\n * @param {Array<StructMember>} options.members\n * @example\n *\n * var PointArrayType = createStructArrayType({\n *  members: [\n *      { type: 'Int16', name: 'x' },\n *      { type: 'Int16', name: 'y' }\n *  ]});\n *\n *  var pointArray = new PointArrayType();\n *  pointArray.emplaceBack(10, 15);\n *  pointArray.emplaceBack(20, 35);\n *\n *  point = pointArray.get(0);\n *  assert(point.x === 10);\n *  assert(point.y === 15);\n *\n * @private\n */\n\nfunction createStructArrayType(options, name, components,\n  alignment) {\n\n    const key = JSON.stringify(options);\n\n    if (structArrayTypeCache[key]) {\n        return structArrayTypeCache[key];\n    }\n\n    alignment = (options.alignment === undefined) ?\n      1 : options.alignment;\n\n    let offset = 0;\n    let maxSize = 0;\n    const usedTypes = ['Uint8'];\n\n    const members = options.members.map((member) => {\n        // assert(member.name.length);\n        // assert(member.type in viewTypes);\n\n        if (usedTypes.indexOf(member.type) < 0) usedTypes.push(member.type);\n\n        const typeSize = sizeOf(member.type);\n        const memberOffset = offset = align(offset, Math.max(alignment, typeSize));\n        const components = member.components || 1;\n\n        maxSize = Math.max(maxSize, typeSize);\n        offset += typeSize * components;\n\n        return {\n            name: member.name,\n            type: member.type,\n            components: components,\n            offset: memberOffset\n        };\n    });\n\n    const size = align(offset, Math.max(maxSize, alignment));\n\n    class StructType extends Struct {}\n\n    StructType.prototype.alignment = alignment;\n    StructType.prototype.size = size;\n\n    for (const member of members) {\n        for (let c = 0; c < member.components; c++) {\n            const name = member.name + (member.components === 1 ? '' : c);\n            Object.defineProperty(StructType.prototype, name, {\n                get: createGetter(member, c),\n                set: createSetter(member, c)\n            });\n        }\n    }\n\n    class StructArrayType extends StructArray {}\n\n    StructArrayType.prototype.members = members;\n    StructArrayType.prototype.StructType = StructType;\n    StructArrayType.prototype.bytesPerElement = size;\n    StructArrayType.prototype.emplaceBack = createEmplaceBack(members, size);\n    StructArrayType.prototype._usedTypes = usedTypes;\n\n    structArrayTypeCache[key] = StructArrayType;\n\n    return StructArrayType;\n}\n\nfunction align(offset, size) {\n    return Math.ceil(offset / size) * size;\n}\n\nfunction sizeOf(type) {\n    return viewTypes[type].BYTES_PER_ELEMENT;\n}\n\nfunction getArrayViewName(type) {\n    return type.toLowerCase();\n}\n\n/*\n * > I saw major perf gains by shortening the source of these generated methods (i.e. renaming\n * > elementIndex to i) (likely due to v8 inlining heuristics).\n * - lucaswoj\n */\nfunction createEmplaceBack(members, bytesPerElement) {\n    const usedTypeSizes = [];\n    const argNames = [];\n    let body =\n        'var i = this.length;\\n' +\n        'this.resize(this.length + 1);\\n';\n\n    for (const member of members) {\n        const size = sizeOf(member.type);\n\n        // array offsets to the end of current data for each type size\n        // var o{SIZE} = i * ROUNDED(bytesPerElement / size);\n        if (usedTypeSizes.indexOf(size) < 0) {\n            usedTypeSizes.push(size);\n            body += `var o${size.toFixed(0)} = i * ${(bytesPerElement / size).toFixed(0)};\\n`;\n        }\n\n        for (let c = 0; c < member.components; c++) {\n            // arguments v0, v1, v2, ... are, in order, the components of\n            // member 0, then the components of member 1, etc.\n            const argName = `v${argNames.length}`;\n            // The index for `member` component `c` into the appropriate type array is:\n            // this.{TYPE}[o{SIZE} + MEMBER_OFFSET + {c}] = v{X}\n            // where MEMBER_OFFSET = ROUND(member.offset / size) is the per-element\n            // offset of this member into the array\n            const index = `o${size.toFixed(0)} + ${(member.offset / size + c).toFixed(0)}`;\n            body += `this.${getArrayViewName(member.type)}[${index}] = ${argName};\\n`;\n            argNames.push(argName);\n        }\n    }\n\n    body += 'return i;';\n\n    return new Function(argNames.toString(), body);\n}\n\nfunction createMemberComponentString(member, component) {\n    const elementOffset = `this._pos${sizeOf(member.type).toFixed(0)}`;\n    const componentOffset = (member.offset / sizeOf(member.type) + component).toFixed(0);\n    const index = `${elementOffset} + ${componentOffset}`;\n    return `this._structArray.${getArrayViewName(member.type)}[${index}]`;\n}\n\nfunction createGetter(member, c) {\n    return new Function(`return ${createMemberComponentString(member, c)};`);\n}\n\nfunction createSetter(member, c) {\n    return new Function('x', `${createMemberComponentString(member, c)} = x;`);\n}\n","'use strict';\nimport createStructArrayType from './StructArray';\n\nexport default createElementArrayType;\n\n/**\n * An element array stores Uint16 indicies of vertexes in a corresponding vertex array. With no\n * arguments, it defaults to three components per element, forming triangles.\n * @private\n */\nfunction createElementArrayType(components) {\n    return createStructArrayType({\n        members: [{\n            type: 'Uint16',\n            name: 'vertices',\n            components: components || 3\n        }]\n    });\n}\n","'use strict';\nimport createStructArrayType from './StructArray';\nexport default createVertexArrayType;\n\n/**\n * A vertex array stores data for each vertex in a geometry. Elements are aligned to 4 byte\n * boundaries for best performance in WebGL.\n * @private\n */\nfunction createVertexArrayType(members) {\n    return createStructArrayType({\n        members: members,\n        alignment: 4\n    });\n}\n","// @flow\n\nimport SegmentVector from '../segment';\nimport Bucket from './Bucket';\nimport classifyRings from './ClassifyRings';\n// import earcut from './earcut';\nimport Tess2 from './tess2';\n\nimport BufferUtil from '../../util/BufferUtil';\nimport createElementArrayType from '../../util/ElementArrayType';\nimport createVertexArrayType from '../../util/VertexArrayType';\n\nconst layoutAttributes = [{name: 'a_pos', components: 2, type: 'Float32'}];\nconst FillLayoutArrayType = createVertexArrayType(layoutAttributes);\nconst IndexArrayType = createElementArrayType(3);\nconst IndexArrayType2= createElementArrayType(2);\n\nconst EARCUT_MAX_RINGS = 1500;\nclass FillBucket extends Bucket{\n    constructor(options) {\n        super(options);\n        this.overscaling = options.overscaling;\n        this.layoutVertexArray = new FillLayoutArrayType();\n        this.layoutVertexArray2 = new FillLayoutArrayType();\n        this.indexArray = new IndexArrayType();\n        this.indexArray2 = new IndexArrayType2();\n        this.segments = new SegmentVector();\n        this.segments2 = new SegmentVector();\n    }\n\n    isEmpty() {\n        return this.layoutVertexArray.length === 0;\n    }\n\n    destroy() {\n        this.segments.destroy();\n        this.segments2.destroy();\n    }\n\n    addFeature(feature) {\n        for (const polygon of classifyRings(feature, EARCUT_MAX_RINGS)) {\n            let numVertices = 0;\n            let flatteneds = [];\n            const holeIndices = [];\n\n\n            for (const ring of polygon) {\n                const flattened = [];\n                if (ring.length === 0) {\n                    continue;\n                }\n\n                if (ring !== polygon[0]) {\n                    holeIndices.push(flattened.length / 2);\n                }\n\n                const lineSegment = this.segments2.prepareSegment(ring.length, this.layoutVertexArray2, this.indexArray2);\n                const lineIndex = lineSegment.vertexLength;\n\n                this.layoutVertexArray2.emplaceBack(ring[0].x, ring[0].y);\n                this.indexArray2.emplaceBack(lineIndex + ring.length - 1, lineIndex);\n                flattened.push(ring[0].x);\n                flattened.push(ring[0].y);\n\n\n                for (let i = 1; i < ring.length; i++) {\n                    this.layoutVertexArray2.emplaceBack(ring[i].x, ring[i].y);\n                    this.indexArray2.emplaceBack(lineIndex + i - 1, lineIndex + i);\n                    flattened.push(ring[i].x);\n                    flattened.push(ring[i].y);\n                }\n\n                lineSegment.vertexLength += ring.length;\n                lineSegment.primitiveLength += ring.length;\n\n                flatteneds.push(flattened);\n            }\n\n\n            var res = Tess2.tesselate({\n                contours:flatteneds,\n                windingRule: Tess2.WINDING_ODD,\n                elementType: Tess2.POLYGONS,\n                polySize: 3,\n                vertexSize: 2\n            });\n\n            numVertices = res.vertices.length/2;\n\n\n            const triangleSegment = this.segments.prepareSegment(numVertices, this.layoutVertexArray, this.indexArray);\n            const triangleIndex = triangleSegment.vertexLength;\n            for(let j = 0;j<res.vertices.length;j+=2){\n                this.layoutVertexArray.emplaceBack(res.vertices[j], res.vertices[j+1]);\n            }\n\n\n            const indices = res.elements;\n            for (let i = 0; i < indices.length; i += 3) {\n                this.indexArray.emplaceBack(\n                    triangleIndex + indices[i],\n                    triangleIndex + indices[i + 1],\n                    triangleIndex + indices[i + 2]);\n            }\n\n            triangleSegment.vertexLength += numVertices;\n            triangleSegment.primitiveLength += indices.length / 3;\n\n\n\n            // let numVertices = 0;\n            // for (const ring of polygon) {\n            //     numVertices += ring.length;\n            // }\n            //\n            // const triangleSegment = arrays.prepareSegment(numVertices);\n            // const triangleIndex = triangleSegment.vertexLength;\n            //\n            // const flattened = [];\n            // const holeIndices = [];\n            //\n            // for (const ring of polygon) {\n            //     if (ring.length === 0) {\n            //         continue;\n            //     }\n            //\n            //     if (ring !== polygon[0]) {\n            //         holeIndices.push(flattened.length / 2);\n            //     }\n            //\n            //     const lineSegment = arrays.prepareSegment2(ring.length);\n            //     const lineIndex = lineSegment.vertexLength;\n            //\n            //     arrays.layoutVertexArray.emplaceBack(ring[0].x, ring[0].y);\n            //     arrays.layoutVertexArray2.emplaceBack(ring[0].x, ring[0].y);\n            //     arrays.elementArray2.emplaceBack(lineIndex + ring.length - 1, lineIndex);\n            //     flattened.push(ring[0].x);\n            //     flattened.push(ring[0].y);\n            //\n            //     for (let i = 1; i < ring.length; i++) {\n            //         arrays.layoutVertexArray.emplaceBack(ring[i].x, ring[i].y);\n            //         arrays.layoutVertexArray2.emplaceBack(ring[i].x, ring[i].y);\n            //         arrays.elementArray2.emplaceBack(lineIndex + i - 1, lineIndex + i);\n            //         flattened.push(ring[i].x);\n            //         flattened.push(ring[i].y);\n            //     }\n            //\n            //     lineSegment.vertexLength += ring.length;\n            //     lineSegment.primitiveLength += ring.length;\n            // }\n            //\n            // const indices = earcut(flattened, holeIndices);\n            //\n            // for (let i = 0; i < indices.length; i += 3) {\n            //     arrays.elementArray.emplaceBack(\n            //         triangleIndex + indices[i],\n            //         triangleIndex + indices[i + 1],\n            //         triangleIndex + indices[i + 2]);\n            // }\n            //\n            // triangleSegment.vertexLength += numVertices;\n            // triangleSegment.primitiveLength += indices.length / 3;\n\n\n            // console.log('顶点个数：'+ triangleSegment.vertexLength + '   三角形个数: '+triangleSegment.primitiveLength );\n        }\n\n        // for (const polygon of classifyRings(geometry, EARCUT_MAX_RINGS)) {\n        //     let numVertices = 0;\n        //     for (const ring of polygon) {\n        //         numVertices += ring.length;\n        //     }\n        //\n        //     const triangleSegment = this.segments.prepareSegment(numVertices, this.layoutVertexArray, this.indexArray);\n        //     const triangleIndex = triangleSegment.vertexLength;\n        //\n        //     const flattened = [];\n        //     const holeIndices = [];\n        //\n        //     for (const ring of polygon) {\n        //         if (ring.length === 0) {\n        //             continue;\n        //         }\n        //\n        //         if (ring !== polygon[0]) {\n        //             holeIndices.push(flattened.length / 2);\n        //         }\n        //\n        //         const lineSegment = this.segments2.prepareSegment(ring.length, this.layoutVertexArray, this.indexArray2);\n        //         const lineIndex = lineSegment.vertexLength;\n        //\n        //         this.layoutVertexArray.emplaceBack(ring[0].x, ring[0].y);\n        //         this.indexArray2.emplaceBack(lineIndex + ring.length - 1, lineIndex);\n        //         flattened.push(ring[0].x);\n        //         flattened.push(ring[0].y);\n        //\n        //         for (let i = 1; i < ring.length; i++) {\n        //             this.layoutVertexArray.emplaceBack(ring[i].x, ring[i].y);\n        //             this.indexArray2.emplaceBack(lineIndex + i - 1, lineIndex + i);\n        //             flattened.push(ring[i].x);\n        //             flattened.push(ring[i].y);\n        //         }\n        //\n        //         lineSegment.vertexLength += ring.length;\n        //         lineSegment.primitiveLength += ring.length;\n        //     }\n        //\n        //     const indices = earcut(flattened, holeIndices);\n        //\n        //     for (let i = 0; i < indices.length; i += 3) {\n        //         this.indexArray.emplaceBack(\n        //             triangleIndex + indices[i],\n        //             triangleIndex + indices[i + 1],\n        //             triangleIndex + indices[i + 2]);\n        //     }\n        //\n        //     triangleSegment.vertexLength += numVertices;\n        //     triangleSegment.primitiveLength += indices.length / 3;\n        // }\n    }\n\n    serialize(transferables) {\n        return {\n            type:this.type,\n            style:this.style,\n            tileSize: this.tileSize,\n            layoutVertexArray: this.layoutVertexArray.serialize(transferables),\n            layoutVertexArray2: this.layoutVertexArray2.serialize(transferables),\n            indexArray:  this.indexArray.serialize(transferables),\n            indexArray2: this.indexArray2.serialize(transferables),\n            segments: this.segments,\n            segments2: this.segments2\n        };\n    }\n\n    static createBuffer(bucket){\n        bucket.layoutVertexBuffer = new BufferUtil(bucket.layoutVertexArray,\n            FillLayoutArrayType.serialize(), BufferUtil.BufferType.VERTEX);\n        bucket.layoutVertexBuffer2 = new BufferUtil(bucket.layoutVertexArray2,\n            FillLayoutArrayType.serialize(), BufferUtil.BufferType.VERTEX);\n        bucket.indexBuffer = new BufferUtil(bucket.indexArray,\n            IndexArrayType.serialize(), BufferUtil.BufferType.ELEMENT);\n        bucket.indexBuffer2 = new BufferUtil(bucket.indexArray2,\n            IndexArrayType2.serialize(), BufferUtil.BufferType.ELEMENT);\n    }\n}\n\nexport default FillBucket;\n","// @flow\nimport SegmentVector from '../segment';\nimport Bucket from './Bucket';\n\n\nimport BufferUtil from '../../util/BufferUtil';\nimport createElementArrayType from '../../util/ElementArrayType';\nimport createVertexArrayType from '../../util/VertexArrayType';\n\nconst layoutAttributes = [{name: 'a_pos',  components: 2, type: 'Float32'},\n    {name: 'a_data', components: 4, type: 'Uint8'},\n    {name: 'a_txy',  components: 2, type: 'Int16'}];\nconst FillLayoutArrayType = createVertexArrayType(layoutAttributes);\nconst IndexArrayType = createElementArrayType(3);\n\nconst EXTRUDE_SCALE = 63;\nconst EXTENT = 8192;\n\n/*\n * Sharp corners cause dashed lines to tilt because the distance along the line\n * is the same at both the inner and outer corners. To improve the appearance of\n * dashed lines we add extra points near sharp corners so that a smaller part\n * of the line is tilted.\n *\n * COS_HALF_SHARP_CORNER controls how sharp a corner has to be for us to add an\n * extra vertex. The default is 75 degrees.\n *\n * The newly created vertices are placed SHARP_CORNER_OFFSET pixels from the corner.\n */\nconst COS_HALF_SHARP_CORNER = Math.cos(75 / 2 * (Math.PI / 180));\nconst SHARP_CORNER_OFFSET = 15;\n\n// The number of bits that is used to store the line distance in the buffer.\nconst LINE_DISTANCE_BUFFER_BITS = 15;\n\n// We don't have enough bits for the line distance as we'd like to have, so\n// use this value to scale the line distance (in tile units) down to a smaller\n// value. This lets us store longer distances while sacrificing precision.\nconst LINE_DISTANCE_SCALE = 1 / 2;\n\n// The maximum line distance, in tile units, that fits in the buffer.\nconst MAX_LINE_DISTANCE = Math.pow(2, LINE_DISTANCE_BUFFER_BITS - 1)/ LINE_DISTANCE_SCALE;\n\nfunction addLineVertex(layoutVertexBuffer, point, extrude, tx, ty, dir, linesofar) {\n    layoutVertexBuffer.emplaceBack(\n        // a_pos\n        point.x,\n        point.y,\n        // a_data\n        // add 128 to store a byte in an unsigned byte\n        Math.round(EXTRUDE_SCALE * extrude.x) + 128,\n        Math.round(EXTRUDE_SCALE * extrude.y) + 128,\n        // Encode the -1/0/1 direction value into the first two bits of .z of a_data.\n        // Combine it with the lower 6 bits of `linesofar` (shifted by 2 bites to make\n        // room for the direction value). The upper 8 bits of `linesofar` are placed in\n        // the `w` component. `linesofar` is scaled down by `LINE_DISTANCE_SCALE` so that\n        // we can store longer distances while sacrificing precision.\n        ((dir === 0 ? 0 : (dir < 0 ? -1 : 1)) + 1) | (((linesofar * LINE_DISTANCE_SCALE) & 0x3F) << 2),\n        (linesofar * LINE_DISTANCE_SCALE) >> 6,\n        tx,\n        ty);\n}\n/**\n * @private\n */\nclass LineBucket extends Bucket{\n    constructor(options) {\n        super(options);\n        this.overscaling = this.tileSize/512;\n\n        this.layoutVertexArray = new FillLayoutArrayType();\n        this.indexArray = new IndexArrayType();\n        this.segments = new SegmentVector();\n    }\n\n    upload(context) {\n        this.uploaded = true;\n    }\n\n    destroy() {\n        this.segments.destroy();\n    }\n\n    addFeature(feature) {\n        const join = 'round';\n        const cap = this.style['lineCap']?this.style['lineCap']:'butt';\n        const miterLimit = 0;\n        const roundLimit = 0;\n\n        for (const line of feature) {\n            this.addLine(line, feature, join, cap, miterLimit, roundLimit);\n        }\n    }\n\n    addLine(vertices, feature, join, cap, miterLimit, roundLimit) {\n        // const featureProperties = feature.properties;\n        // const isPolygon = VectorTileFeature.types[feature.type] === 'Polygon';\n        const isPolygon = false;\n        // If the line has duplicate vertices at the ends, adjust start/length to remove them.\n        let len = vertices.length;\n        while (len >= 2 && vertices[len - 1].equals(vertices[len - 2])) {\n            len--;\n        }\n        let first = 0;\n        while (first < len - 1 && vertices[first].equals(vertices[first + 1])) {\n            first++;\n        }\n\n        // Ignore invalid geometry.\n        if (len < (isPolygon ? 3 : 2)) return;\n\n        if (join === 'bevel') miterLimit = 1.05;\n\n        const sharpCornerOffset = SHARP_CORNER_OFFSET * (EXTENT / (512 * this.overscaling));\n\n        const firstVertex = vertices[first];\n        // const arrays = this.arrays;\n\n        // we could be more precise, but it would only save a negligible amount of space\n        // const segment = arrays.prepareSegment(len * 10);\n\n        const segment = this.segments.prepareSegment(len * 10, this.layoutVertexArray, this.indexArray);\n        this.distance = 0;\n\n        const beginCap = cap,\n            endCap = isPolygon ? 'butt' : cap;\n        let startOfLine = true;\n        let currentVertex, prevVertex, nextVertex, prevNormal, nextNormal, offsetA, offsetB;\n\n        // the last three vertices added\n        this.e1 = this.e2 = this.e3 = -1;\n\n        if (isPolygon) {\n            currentVertex = vertices[len - 2];\n            nextNormal = firstVertex.sub(currentVertex)._unit()._perp();\n        }\n\n        for (let i = first; i < len; i++) {\n\n            nextVertex = isPolygon && i === len - 1 ?\n                vertices[first + 1] : // if the line is closed, we treat the last vertex like the first\n                vertices[i + 1]; // just the next vertex\n\n            // if two consecutive vertices exist, skip the current one\n            if (nextVertex && vertices[i].equals(nextVertex)) continue;\n\n            if (nextNormal) prevNormal = nextNormal;\n            if (currentVertex) prevVertex = currentVertex;\n\n            currentVertex = vertices[i];\n\n            // Calculate the normal towards the next vertex in this line. In case\n            // there is no next vertex, pretend that the line is continuing straight,\n            // meaning that we are just using the previous normal.\n            nextNormal = nextVertex ? nextVertex.sub(currentVertex)._unit()._perp() : prevNormal;\n\n            // If we still don't have a previous normal, this is the beginning of a\n            // non-closed line, so we're doing a straight \"join\".\n            prevNormal = prevNormal || nextNormal;\n\n            // Determine the normal of the join extrusion. It is the angle bisector\n            // of the segments between the previous line and the next line.\n            // In the case of 180° angles, the prev and next normals cancel each other out:\n            // prevNormal + nextNormal = (0, 0), its magnitude is 0, so the unit vector would be\n            // undefined. In that case, we're keeping the joinNormal at (0, 0), so that the cosHalfAngle\n            // below will also become 0 and miterLength will become Infinity.\n            let joinNormal = prevNormal.add(nextNormal);\n            if (joinNormal.x !== 0 || joinNormal.y !== 0) {\n                joinNormal._unit();\n            }\n            /*  joinNormal     prevNormal\n             *             ↖      ↑\n             *                .________. prevVertex\n             *                |\n             * nextNormal  ←  |  currentVertex\n             *                |\n             *     nextVertex !\n             *\n             */\n\n            // Calculate the length of the miter (the ratio of the miter to the width).\n            // Find the cosine of the angle between the next and join normals\n            // using dot product. The inverse of that is the miter length.\n            const cosHalfAngle = joinNormal.x * nextNormal.x + joinNormal.y * nextNormal.y;\n            const miterLength = cosHalfAngle !== 0 ? 1 / cosHalfAngle : Infinity;\n\n            const isSharpCorner = cosHalfAngle < COS_HALF_SHARP_CORNER && prevVertex && nextVertex;\n\n            if (isSharpCorner && i > first) {\n                const prevSegmentLength = currentVertex.dist(prevVertex);\n                if (prevSegmentLength > 2 * sharpCornerOffset) {\n                    const newPrevVertex = currentVertex.sub(currentVertex.sub(prevVertex)._mult(sharpCornerOffset / prevSegmentLength)._round());\n                    this.distance += newPrevVertex.dist(prevVertex);\n                    this.addCurrentVertex(newPrevVertex, this.distance, prevNormal.mult(1), 0, 0, false, segment);\n                    prevVertex = newPrevVertex;\n                }\n            }\n\n            // The join if a middle vertex, otherwise the cap.\n            const middleVertex = prevVertex && nextVertex;\n            let currentJoin = middleVertex ? join : nextVertex ? beginCap : endCap;\n\n            if (middleVertex && currentJoin === 'round') {\n                if (miterLength < roundLimit) {\n                    currentJoin = 'miter';\n                } else if (miterLength <= 2) {\n                    currentJoin = 'fakeround';\n                }\n            }\n\n            if (currentJoin === 'miter' && miterLength > miterLimit) {\n                currentJoin = 'bevel';\n            }\n\n            if (currentJoin === 'bevel') {\n                // The maximum extrude length is 128 / 63 = 2 times the width of the line\n                // so if miterLength >= 2 we need to draw a different type of bevel here.\n                if (miterLength > 2) currentJoin = 'flipbevel';\n\n                // If the miterLength is really small and the line bevel wouldn't be visible,\n                // just draw a miter join to save a triangle.\n                if (miterLength < miterLimit) currentJoin = 'miter';\n            }\n\n            // Calculate how far along the line the currentVertex is\n            if (prevVertex) this.distance += currentVertex.dist(prevVertex);\n\n            if (currentJoin === 'miter') {\n\n                joinNormal._mult(miterLength);\n                this.addCurrentVertex(currentVertex, this.distance, joinNormal, 0, 0, false, segment);\n\n            } else if (currentJoin === 'flipbevel') {\n                // miter is too big, flip the direction to make a beveled join\n\n                if (miterLength > 100) {\n                    // Almost parallel lines\n                    joinNormal = nextNormal.clone().mult(-1);\n\n                } else {\n                    const direction = prevNormal.x * nextNormal.y - prevNormal.y * nextNormal.x > 0 ? -1 : 1;\n                    const bevelLength = miterLength * prevNormal.add(nextNormal).mag() / prevNormal.sub(nextNormal).mag();\n                    joinNormal._perp()._mult(bevelLength * direction);\n                }\n                this.addCurrentVertex(currentVertex, this.distance, joinNormal, 0, 0, false, segment);\n                this.addCurrentVertex(currentVertex, this.distance, joinNormal.mult(-1), 0, 0, false, segment);\n\n            } else if (currentJoin === 'bevel' || currentJoin === 'fakeround') {\n                const lineTurnsLeft = (prevNormal.x * nextNormal.y - prevNormal.y * nextNormal.x) > 0;\n                const offset = -Math.sqrt(miterLength * miterLength - 1);\n                if (lineTurnsLeft) {\n                    offsetB = 0;\n                    offsetA = offset;\n                } else {\n                    offsetA = 0;\n                    offsetB = offset;\n                }\n\n                // Close previous segment with a bevel\n                if (!startOfLine) {\n                    this.addCurrentVertex(currentVertex, this.distance, prevNormal, offsetA, offsetB, false, segment);\n                }\n\n                if (currentJoin === 'fakeround') {\n                    // The join angle is sharp enough that a round join would be visible.\n                    // Bevel joins fill the gap between segments with a single pie slice triangle.\n                    // Create a round join by adding multiple pie slices. The join isn't actually round, but\n                    // it looks like it is at the sizes we render lines at.\n\n                    // Add more triangles for sharper angles.\n                    // This math is just a good enough approximation. It isn't \"correct\".\n                    const n = Math.floor((0.5 - (cosHalfAngle - 0.5)) * 8);\n                    let approxFractionalJoinNormal;\n\n                    for (let m = 0; m < n; m++) {\n                        approxFractionalJoinNormal = nextNormal.mult((m + 1) / (n + 1))._add(prevNormal)._unit();\n                        this.addPieSliceVertex(currentVertex, this.distance, approxFractionalJoinNormal, lineTurnsLeft, segment);\n                    }\n\n                    this.addPieSliceVertex(currentVertex, this.distance, joinNormal, lineTurnsLeft, segment);\n\n                    for (let k = n - 1; k >= 0; k--) {\n                        approxFractionalJoinNormal = prevNormal.mult((k + 1) / (n + 1))._add(nextNormal)._unit();\n                        this.addPieSliceVertex(currentVertex, this.distance, approxFractionalJoinNormal, lineTurnsLeft, segment);\n                    }\n                }\n\n                // Start next segment\n                if (nextVertex) {\n                    this.addCurrentVertex(currentVertex, this.distance, nextNormal, -offsetA, -offsetB, false, segment);\n                }\n\n            } else if (currentJoin === 'butt') {\n                if (!startOfLine) {\n                    // Close previous segment with a butt\n                    this.addCurrentVertex(currentVertex, this.distance, prevNormal, 0, 0, false, segment);\n                }\n\n                // Start next segment with a butt\n                if (nextVertex) {\n                    this.addCurrentVertex(currentVertex, this.distance, nextNormal, 0, 0, false, segment);\n                }\n\n            } else if (currentJoin === 'square') {\n\n                if (!startOfLine) {\n                    // Close previous segment with a square cap\n                    this.addCurrentVertex(currentVertex, this.distance, prevNormal, 1, 1, false, segment);\n\n                    // The segment is done. Unset vertices to disconnect segments.\n                    this.e1 = this.e2 = -1;\n                }\n\n                // Start next segment\n                if (nextVertex) {\n                    this.addCurrentVertex(currentVertex, this.distance, nextNormal, -1, -1, false, segment);\n                }\n\n            } else if (currentJoin === 'round') {\n\n                if (!startOfLine) {\n                    // Close previous segment with butt\n                    this.addCurrentVertex(currentVertex, this.distance, prevNormal, 0, 0, false, segment);\n\n                    // Add round cap or linejoin at end of segment\n                    this.addCurrentVertex(currentVertex, this.distance, prevNormal, 1, 1, true, segment);\n\n                    // The segment is done. Unset vertices to disconnect segments.\n                    this.e1 = this.e2 = -1;\n                }\n\n\n                // Start next segment with a butt\n                if (nextVertex) {\n                    // Add round cap before first segment\n                    this.addCurrentVertex(currentVertex, this.distance, nextNormal, -1, -1, true, segment);\n\n                    this.addCurrentVertex(currentVertex, this.distance, nextNormal, 0, 0, false, segment);\n                }\n            }\n\n            if (isSharpCorner && i < len - 1) {\n                const nextSegmentLength = currentVertex.dist(nextVertex);\n                if (nextSegmentLength > 2 * sharpCornerOffset) {\n                    const newCurrentVertex = currentVertex.add(nextVertex.sub(currentVertex)._mult(sharpCornerOffset / nextSegmentLength)._round());\n                    this.distance += newCurrentVertex.dist(currentVertex);\n                    this.addCurrentVertex(newCurrentVertex, this.distance, nextNormal.mult(1), 0, 0, false, segment);\n                    currentVertex = newCurrentVertex;\n                }\n            }\n\n            startOfLine = false;\n        }\n\n        // arrays.populatePaintArrays(featureProperties);\n    }\n\n    /**\n     * Add two vertices to the buffers.\n     *\n     * @param {Object} currentVertex the line vertex to add buffer vertices for\n     * @param {number} distance the distance from the beginning of the line to the vertex\n     * @param {number} endLeft extrude to shift the left vertex along the line\n     * @param {number} endRight extrude to shift the left vertex along the line\n     * @param {boolean} round whether this is a round cap\n     * @private\n     */\n    addCurrentVertex(currentVertex, distance, normal, endLeft, endRight, round, segment) {\n        const tx = round ? 1 : 0;\n        let extrude;\n        // const arrays = this.arrays;\n        // const layoutVertexArray = arrays.layoutVertexArray;\n        // const elementArray = arrays.elementArray;\n\n        extrude = normal.clone();\n        if (endLeft) extrude._sub(normal.perp()._mult(endLeft));\n        addLineVertex(this.layoutVertexArray, currentVertex, extrude, tx, 0, endLeft, distance);\n        this.e3 = segment.vertexLength++;\n        if (this.e1 >= 0 && this.e2 >= 0) {\n            this.indexArray.emplaceBack(this.e1, this.e2, this.e3);\n            segment.primitiveLength++;\n        }\n        this.e1 = this.e2;\n        this.e2 = this.e3;\n\n        extrude = normal.mult(-1);\n        if (endRight) extrude._sub(normal.perp()._mult(endRight));\n        addLineVertex(this.layoutVertexArray, currentVertex, extrude, tx, 1, -endRight, distance);\n        this.e3 = segment.vertexLength++;\n        if (this.e1 >= 0 && this.e2 >= 0) {\n            this.indexArray.emplaceBack(this.e1, this.e2, this.e3);\n            segment.primitiveLength++;\n        }\n        this.e1 = this.e2;\n        this.e2 = this.e3;\n\n        // There is a maximum \"distance along the line\" that we can store in the buffers.\n        // When we get close to the distance, reset it to zero and add the vertex again with\n        // a distance of zero. The max distance is determined by the number of bits we allocate\n        // to `linesofar`.\n        if (distance > MAX_LINE_DISTANCE / 2) {\n            this.distance = 0;\n            this.addCurrentVertex(currentVertex, this.distance, normal, endLeft, endRight, round, segment);\n        }\n    }\n\n    /**\n     * Add a single new vertex and a triangle using two previous vertices.\n     * This adds a pie slice triangle near a join to simulate round joins\n     *\n     * @param {Object} currentVertex the line vertex to add buffer vertices for\n     * @param {number} distance the distance from the beggining of the line to the vertex\n     * @param {Object} extrude the offset of the new vertex from the currentVertex\n     * @param {boolean} whether the line is turning left or right at this angle\n     * @private\n     */\n    addPieSliceVertex(currentVertex, distance, extrude, lineTurnsLeft, segment) {\n        const ty = lineTurnsLeft ? 1 : 0;\n        extrude = extrude.mult(lineTurnsLeft ? -1 : 1);\n        // const arrays = this.arrays;\n        // const layoutVertexArray = arrays.layoutVertexArray;\n        // const elementArray = arrays.elementArray;\n\n        addLineVertex(this.layoutVertexArray, currentVertex, extrude, 0, ty, 0, distance);\n        this.e3 = segment.vertexLength++;\n        if (this.e1 >= 0 && this.e2 >= 0) {\n            this.indexArray.emplaceBack(this.e1, this.e2, this.e3);\n            segment.primitiveLength++;\n        }\n\n        if (lineTurnsLeft) {\n            this.e2 = this.e3;\n        } else {\n            this.e1 = this.e3;\n        }\n    }\n\n\n    serialize(transferables) {\n        return {\n            type:this.type,\n            style:this.style,\n            tileSize: this.tileSize,\n            layoutVertexArray: this.layoutVertexArray.serialize(transferables),\n            indexArray:  this.indexArray.serialize(transferables),\n            segments: this.segments\n        };\n    }\n\n\n    static createBuffer(bucket){\n        bucket.layoutVertexBuffer = new BufferUtil(bucket.layoutVertexArray,\n            FillLayoutArrayType.serialize(), BufferUtil.BufferType.VERTEX);\n        bucket.indexBuffer = new BufferUtil(bucket.indexArray,\n            IndexArrayType.serialize(), BufferUtil.BufferType.ELEMENT);\n    }\n}\n\nexport default LineBucket;\n","/*\r\n (c) 2017, Vladimir Agafonkin\r\n Simplify.js, a high-performance JS polyline simplification library\r\n mourner.github.io/simplify-js\r\n*/\r\n\r\n// to suit your point format, run search/replace for '.x' and '.y';\r\n// for 3D version, see 3d branch (configurability would draw significant performance overhead)\r\n\r\n// square distance between 2 points\r\n    function getSqDist(p1X,p1Y, p2X,p2Y) {\r\n\r\n        var dx = p1X - p2X,\r\n            dy = p1Y - p2Y;\r\n\r\n        return dx * dx + dy * dy;\r\n    }\r\n\r\n// square distance from a point to a segment\r\n    function getSqSegDist(pX,pY,p1X,p1Y,p2X,p2Y) {\r\n\r\n        var x = p1X,\r\n            y = p1Y,\r\n            dx = p2X - x,\r\n            dy = p2Y - y;\r\n\r\n        if (dx !== 0 || dy !== 0) {\r\n\r\n            var t = ((pX - x) * dx + (pY - y) * dy) / (dx * dx + dy * dy);\r\n\r\n            if (t > 1) {\r\n                x = p2X;\r\n                y = p2Y;\r\n\r\n            } else if (t > 0) {\r\n                x += dx * t;\r\n                y += dy * t;\r\n            }\r\n        }\r\n\r\n        dx = pX - x;\r\n        dy = pY - y;\r\n\r\n        return dx * dx + dy * dy;\r\n    }\r\n// rest of the code doesn't care about point format\r\n\r\n// basic distance-based simplification\r\n    function simplifyRadialDist(points, sqTolerance) {\r\n\r\n        var prevPointX = points[0];\r\n        var prevPointY = points[1];\r\n        var newPoints = [points[0],points[1]];\r\n        var pointX;\r\n        var pointY;\r\n        var len = points.length / 2;\r\n        for (var i = 1 ; i < len; i++) {\r\n            pointX = points[i * 2];\r\n            pointY = points[i * 2 + 1];\r\n\r\n            if (getSqDist(pointX,pointY, prevPointX,prevPointY) > sqTolerance) {\r\n                newPoints.push(pointX);\r\n                newPoints.push(pointY);\r\n                prevPointX = pointX;\r\n                prevPointY = pointY;\r\n            }\r\n        }\r\n\r\n        if (prevPointX !== pointX && prevPointY !== pointY) {\r\n            newPoints.push(pointX);\r\n            newPoints.push(pointY);\r\n\r\n        }\r\n\r\n        return newPoints;\r\n    }\r\n\r\n    function simplifyDPStep(points, first, last, sqTolerance, simplified) {\r\n        var maxSqDist = sqTolerance,\r\n            index;\r\n\r\n        for (var i = first + 1; i < last; i++) {\r\n            var sqDist = getSqSegDist(points[i * 2] , points[i * 2 + 1] , points[first * 2] , points[first * 2 + 1] , points[last * 2] , points[last * 2 + 1]);\r\n            if (sqDist > maxSqDist) {\r\n                index = i;\r\n                maxSqDist = sqDist;\r\n            }\r\n        }\r\n\r\n        if (maxSqDist > sqTolerance) {\r\n            if (index - first > 1) {\r\n                simplifyDPStep(points, first, index, sqTolerance, simplified);\r\n            }\r\n\r\n            simplified.push(points[index * 2]);\r\n            simplified.push(points[index * 2 + 1]);\r\n\r\n            if (last - index > 1) {\r\n                simplifyDPStep(points, index, last, sqTolerance, simplified);\r\n            }\r\n        }\r\n    }\r\n\r\n// simplification using Ramer-Douglas-Peucker algorithm\r\n    function simplifyDouglasPeucker(points, sqTolerance) {\r\n        var last = points.length / 2 - 1;\r\n\r\n        var simplified = [points[0],points[1]];\r\n\r\n        simplifyDPStep(points, 0, last, sqTolerance , simplified);\r\n        simplified.push(points[last * 2] , points[last * 2 + 1]);\r\n\r\n        return simplified;\r\n    }\r\n\r\n// both algorithms combined for awesome performance\r\n    function simplify(points, tolerance, highestQuality) {\r\n\r\n        if (points.length <= 4) return points;\r\n\r\n        var sqTolerance = tolerance !== undefined ? tolerance * tolerance : 1;\r\n\r\n        points = highestQuality ? points : simplifyRadialDist(points, sqTolerance);\r\n        points = simplifyDouglasPeucker(points, sqTolerance);\r\n\r\n        return points;\r\n    }\r\n\r\nexport default simplify;","\nfunction Point(x, y) {\n    this.x = x;\n    this.y = y;\n}\n\nPoint.prototype = {\n    clone: function() { return new Point(this.x, this.y); },\n\n    add:     function(p) { return this.clone()._add(p);     },\n    sub:     function(p) { return this.clone()._sub(p);     },\n    mult:    function(k) { return this.clone()._mult(k);    },\n    div:     function(k) { return this.clone()._div(k);     },\n    rotate:  function(a) { return this.clone()._rotate(a);  },\n    matMult: function(m) { return this.clone()._matMult(m); },\n    unit:    function() { return this.clone()._unit(); },\n    perp:    function() { return this.clone()._perp(); },\n    round:   function() { return this.clone()._round(); },\n\n    mag: function() {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    },\n\n    equals: function(p) {\n        return this.x === p.x &&\n            this.y === p.y;\n    },\n\n    dist: function(p) {\n        return Math.sqrt(this.distSqr(p));\n    },\n\n    distSqr: function(p) {\n        var dx = p.x - this.x,\n            dy = p.y - this.y;\n        return dx * dx + dy * dy;\n    },\n\n    angle: function() {\n        return Math.atan2(this.y, this.x);\n    },\n\n    angleTo: function(b) {\n        return Math.atan2(this.y - b.y, this.x - b.x);\n    },\n\n    angleWith: function(b) {\n        return this.angleWithSep(b.x, b.y);\n    },\n\n    // Find the angle of the two vectors, solving the formula for the cross product a x b = |a||b|sin(θ) for θ.\n    angleWithSep: function(x, y) {\n        return Math.atan2(\n            this.x * y - this.y * x,\n            this.x * x + this.y * y);\n    },\n\n    _matMult: function(m) {\n        var x = m[0] * this.x + m[1] * this.y,\n            y = m[2] * this.x + m[3] * this.y;\n        this.x = x;\n        this.y = y;\n        return this;\n    },\n\n    _add: function(p) {\n        this.x += p.x;\n        this.y += p.y;\n        return this;\n    },\n\n    _sub: function(p) {\n        this.x -= p.x;\n        this.y -= p.y;\n        return this;\n    },\n\n    _mult: function(k) {\n        this.x *= k;\n        this.y *= k;\n        return this;\n    },\n\n    _div: function(k) {\n        this.x /= k;\n        this.y /= k;\n        return this;\n    },\n\n    _unit: function() {\n        this._div(this.mag());\n        return this;\n    },\n\n    _perp: function() {\n        var y = this.y;\n        this.y = this.x;\n        this.x = -y;\n        return this;\n    },\n\n    _rotate: function(angle) {\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle),\n            x = cos * this.x - sin * this.y,\n            y = sin * this.x + cos * this.y;\n        this.x = x;\n        this.y = y;\n        return this;\n    },\n\n    _round: function() {\n        this.x = Math.round(this.x);\n        this.y = Math.round(this.y);\n        return this;\n    }\n};\n\n// constructs Point from an array if necessary\nPoint.convert = function (a) {\n    if (a instanceof Point) {\n        return a;\n    }\n    if (Array.isArray(a)) {\n        return new Point(a[0], a[1]);\n    }\n    return a;\n};\nexport default Point;"],"names":["layoutAttributes","FillLayoutArrayType","IndexArrayType"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;IAAA;IACA,MAAM,aAAa,CAAC;IACpB,IAAI,WAAW,CAAC,QAAQ,EAAE;IAC1B,QAAQ,GAAG,QAAQ,CAAC;IACpB,YAAY,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IACrC,SAAS,KAAI;IACb,YAAY,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;IAC/B,SAAS;IACT,KAAK;AACL;IACA,IAAI,cAAc,CAAC,WAAW,EAAE,iBAAiB,EAAE,UAAU,EAAE,OAAO,EAAE;IACxE,QAAQ,IAAI,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IAC9D,QAAQ,IAAI,WAAW,GAAG,aAAa,CAAC,uBAAuB,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,4BAA4B,EAAE,aAAa,CAAC,uBAAuB,CAAC,mBAAmB,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;IACtL,QAAQ,IAAI,CAAC,OAAO,IAAI,OAAO,CAAC,YAAY,GAAG,WAAW,GAAG,aAAa,CAAC,uBAAuB,IAAI,OAAO,CAAC,OAAO,KAAK,OAAO,EAAE;IACnI,YAAY,OAAO,IAAI;IACvB,gBAAgB,YAAY,EAAE,iBAAiB,CAAC,MAAM;IACtD,gBAAgB,eAAe,EAAE,UAAU,CAAC,MAAM;IAClD,gBAAgB,YAAY,EAAE,CAAC;IAC/B,gBAAgB,eAAe,EAAE,CAAC;IAClC,aAAa,CAAC,CAAC;IACf,YAAY,IAAI,OAAO,KAAK,SAAS,EAAE,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC;IACjE,YAAY,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACxC,SAAS;IACT,QAAQ,OAAO,OAAO,CAAC;IACvB,KAAK;AACL;IACA,IAAI,GAAG,GAAG;IACV,QAAQ,OAAO,IAAI,CAAC,QAAQ,CAAC;IAC7B,KAAK;AACL;IACA,IAAI,OAAO,GAAG;IACd,QAAQ,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,QAAQ,EAAE;IAC7C;IACA;IACA;IACA,YAAY,GAAG,OAAO,CAAC,GAAG,CAAC;IAC3B,gBAAgB,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;IACtC,aAAa;IACb,SAAS;IACT,KAAK;AACL;IACA,IAAI,OAAO,aAAa,CAAC,YAAY,EAAE,eAAe,EAAE,YAAY,EAAE,eAAe,CAAC;IACtF,QAAQ,OAAO,IAAI,aAAa,CAAC,CAAC;IAClC,YAAY,YAAY;IACxB,YAAY,eAAe;IAC3B,YAAY,YAAY;IACxB,YAAY,eAAe;IAC3B;IACA,YAAY,OAAO,EAAE,CAAC;IACtB,SAAS,CAAC,CAAC,CAAC;IACZ,KAAK;IACL,CAAC;AACD;IACA;IACA;IACA;IACA;IACA;IACA;IACA,aAAa,CAAC,uBAAuB,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC;;ICxD3D;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,MAAM,MAAM,CAAC;IACb;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,WAAW,CAAC,CAAC,OAAO,EAAE;IAC1B,QAAQ,IAAI,CAAC,KAAK,EAAE,OAAO,CAAC,KAAK,CAAC;IAClC,QAAQ,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;IACjC,QAAQ,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;IACzC,KAAK;AACL;AACA;IACA,IAAI,SAAS,CAAC,aAAa,EAAE;AAC7B;IACA,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,OAAO,GAAG;IACd,KAAK;IACL;;ICvDA,SAAS,WAAW,CAAC,GAAG,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE;IACnD,IAAI,eAAe,CAAC,GAAG,EAAE,CAAC,EAAE,IAAI,IAAI,CAAC,EAAE,KAAK,KAAK,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE,OAAO,IAAI,cAAc,CAAC,CAAC;IAC7F,CACA;IACA,SAAS,eAAe,CAAC,GAAG,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE;AACvD;IACA,IAAI,OAAO,KAAK,GAAG,IAAI,EAAE;IACzB,QAAQ,IAAI,KAAK,GAAG,IAAI,GAAG,GAAG,EAAE;IAChC,YAAY,IAAI,CAAC,GAAG,KAAK,GAAG,IAAI,GAAG,CAAC,CAAC;IACrC,YAAY,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC;IACjC,YAAY,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAChC,YAAY,IAAI,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IAC9C,YAAY,IAAI,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACrF,YAAY,IAAI,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;IACzE,YAAY,IAAI,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;IACjF,YAAY,eAAe,CAAC,GAAG,EAAE,CAAC,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;IAChE,SAAS;AACT;IACA,QAAQ,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;IACvB,QAAQ,IAAI,CAAC,GAAG,IAAI,CAAC;IACrB,QAAQ,IAAI,CAAC,GAAG,KAAK,CAAC;AACtB;IACA,QAAQ,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IAC3B,QAAQ,IAAI,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;AAC/D;IACA,QAAQ,OAAO,CAAC,GAAG,CAAC,EAAE;IACtB,YAAY,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5B,YAAY,CAAC,EAAE,CAAC;IAChB,YAAY,CAAC,EAAE,CAAC;IAChB,YAAY,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC;IAC/C,YAAY,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC;IAC/C,SAAS;AACT;IACA,QAAQ,IAAI,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IAC5D,aAAa;IACb,YAAY,CAAC,EAAE,CAAC;IAChB,YAAY,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;IAChC,SAAS;AACT;IACA,QAAQ,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;IACjC,QAAQ,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;IAClC,KAAK;IACL,CAAC;AACD;IACA,SAAS,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE;IACzB,IAAI,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;IACrB,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;IACpB,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;IACjB,CAAC;AACD;IACA,SAAS,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE;IAC9B,IAAI,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACtC;;ICnDA;AACA;IACA,CAAC,SAAS,mBAAmB,CAAC,IAAI,CAAC;IACnC,IAAI,IAAI,GAAG,GAAG,CAAC,CAAC;IAChB,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE;IAC9E,QAAQ,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;IACrB,QAAQ,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;IACrB,QAAQ,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;IAC7C,KAAK;IACL,IAAI,OAAO,GAAG,CAAC;IACf,CACA;IACe,SAAS,aAAa,CAAC,KAAK,EAAE,QAAQ,EAAE;IACvD,IAAI,MAAM,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC;AAC7B;IACA,IAAI,IAAI,GAAG,IAAI,CAAC,EAAE,OAAO,EAAE,CAAC;AAC5B;IACA,IAAI,MAAM,QAAQ,GAAG,EAAE,CAAC;IACxB,IAAI,IAAI,OAAO,EAAE,EAAE,CAAC;IACpB;AACA;IACA,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;IAClC,QAAQ,MAAM,IAAI,GAAG,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACnD,QAAQ,IAAI,IAAI,KAAK,CAAC,EAAE,SAAS;AACjC;IACA,QAAQ,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AACvC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,YAAY,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACnC;IACA,KAAK;IACL,IAAI,IAAI,OAAO,EAAE,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AACxC;IACA;IACA;IACA,IAAI,IAAI,QAAQ,GAAG,CAAC,EAAE;IACtB,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IAClD,YAAY,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,QAAQ,EAAE,SAAS;IACzD,YAAY,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE,YAAY,CAAC,CAAC;IACxF,YAAY,QAAQ,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;IACzD,SAAS;IACT,KAAK;AACL;IACA,IAAI,OAAO,QAAQ,CAAC;IACpB,CACA;IACA,SAAS,YAAY,CAAC,CAAC,EAAE,CAAC,EAAE;IAC5B,IAAI,OAAO,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC;IAC3B;;ICxDA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AAOA;IACA;AACA;IACA,IAAI,KAAK,GAAG,EAAE,CAAC;AAGf;IACA,KAAK,CAAC,WAAW,GAAG,CAAC,CAAC;IACtB,KAAK,CAAC,eAAe,GAAG,CAAC,CAAC;IAC1B,KAAK,CAAC,gBAAgB,GAAG,CAAC,CAAC;IAC3B,KAAK,CAAC,gBAAgB,GAAG,CAAC,CAAC;IAC3B,KAAK,CAAC,mBAAmB,GAAG,CAAC,CAAC;AAC9B;IACA,KAAK,CAAC,QAAQ,GAAG,CAAC,CAAC;IACnB,KAAK,CAAC,kBAAkB,GAAG,CAAC,CAAC;IAC7B,KAAK,CAAC,iBAAiB,GAAG,CAAC,CAAC;AAC5B;IACA,KAAK,CAAC,SAAS,GAAG,SAAS,IAAI,EAAE;IACjC,IAAI,IAAI,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC;IACrC,IAAI,IAAI,IAAI,GAAG,IAAI,UAAU,EAAE,CAAC;IAChC,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACnD,QAAQ,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,IAAI,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;IAChE,KAAK;IACL,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,IAAI,KAAK,CAAC,WAAW;IACxD,QAAQ,IAAI,CAAC,WAAW,IAAI,KAAK,CAAC,QAAQ;IAC1C,QAAQ,IAAI,CAAC,QAAQ,IAAI,CAAC;IAC1B,QAAQ,IAAI,CAAC,UAAU,IAAI,CAAC;IAC5B,QAAQ,IAAI,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAChC,IAAI,OAAO;IACX,QAAQ,QAAQ,EAAE,IAAI,CAAC,QAAQ;IAC/B,QAAQ,aAAa,EAAE,IAAI,CAAC,aAAa;IACzC,QAAQ,WAAW,EAAE,IAAI,CAAC,WAAW;IACrC,QAAQ,QAAQ,EAAE,IAAI,CAAC,QAAQ;IAC/B,QAAQ,YAAY,EAAE,IAAI,CAAC,YAAY;IACvC,QAAQ,IAAI,EAAE,KAAK,GAAG,IAAI,CAAC,IAAI,GAAG,SAAS;IAC3C,KAAK,CAAC;IACN,CAAC,CAAC;AACF;IACA;AACA;IACA,IAAI,MAAM,GAAG,SAAS,IAAI,EAAE;IAC5B,IAAI,IAAI,CAAC,IAAI,EAAE;IACf,QAAQ,MAAM,mBAAmB,CAAC;IAClC,KAAK;IACL,EAAC;AACD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA,SAAS,UAAU,GAAG;IACtB,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,IAAI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;AACvB;IACA;IACA,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1B,IAAI,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC;IACjB,IAAI,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC;IACjB,IAAI,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;IACtB,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;IACf,IAAI,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;IACjB,CAAC;AACD;IACA,SAAS,QAAQ,GAAG;IACpB,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,IAAI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;AACvB;IACA;IACA,IAAI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACtB,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;IACf,IAAI,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACxB,IAAI,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACxB,CACA;IACA,SAAS,YAAY,CAAC,IAAI,EAAE;IAC5B,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,IAAI,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC;IACpB,IAAI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACtB,IAAI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACtB,IAAI,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC;IACpB,IAAI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;AACtB;IACA;IACA,IAAI,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;IAC7B,IAAI,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;IACrB;IACA,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,CACA;IACA,YAAY,CAAC,SAAS,GAAG;IACzB,IAAI,IAAI,KAAK,GAAG,EAAE,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;IAC1C,IAAI,IAAI,KAAK,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,EAAE;IACxC,IAAI,IAAI,GAAG,GAAG,EAAE,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;IACtC,IAAI,IAAI,GAAG,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE;IACpC,IAAI,IAAI,KAAK,GAAG,EAAE,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;IAC1C,IAAI,IAAI,KAAK,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,EAAE;IACxC,IAAI,IAAI,KAAK,GAAG,EAAE,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;IAC1C,IAAI,IAAI,KAAK,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE;IACxC,IAAI,IAAI,KAAK,GAAG,EAAE,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;IAC1C,IAAI,IAAI,KAAK,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE;IACxC,IAAI,IAAI,KAAK,GAAG,EAAE,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;IAC1C,IAAI,IAAI,KAAK,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,EAAE;IACxC,IAAI,IAAI,KAAK,GAAG,EAAE,qBAAqB,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;IAC5D,IAAI,IAAI,KAAK,CAAC,CAAC,EAAE,gBAAgB,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE;IAC1D,IAAI,IAAI,KAAK,GAAG,EAAE,qBAAqB,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;IAC5D,IAAI,IAAI,KAAK,CAAC,CAAC,EAAE,gBAAgB,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE;IAC1D,CAAC,CAAC;AACF;AACA;AACA;IACA,SAAS,QAAQ,GAAG;IACpB,IAAI,IAAI,CAAC,GAAG,IAAI,UAAU,EAAE,CAAC;IAC7B,IAAI,IAAI,CAAC,GAAG,IAAI,QAAQ,EAAE,CAAC;IAC3B,IAAI,IAAI,CAAC,GAAG,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC;IAChC,IAAI,IAAI,IAAI,GAAG,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC;AACnC;IACA,IAAI,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC;IACxB,IAAI,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC;AACpB;IACA,IAAI,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC;IACxB,IAAI,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC;IACpB,IAAI,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC;IACnB,IAAI,CAAC,CAAC,MAAM,GAAG,KAAK,CAAC;IACrB,IAAI,CAAC,CAAC,MAAM,GAAG,KAAK,CAAC;AACrB;IACA,IAAI,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC;IACf,IAAI,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC;IACjB,IAAI,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC;IACnB,IAAI,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC;IACnB,IAAI,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC;IACjB,IAAI,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC;IACnB,IAAI,CAAC,CAAC,OAAO,GAAG,CAAC,CAAC;IAClB,IAAI,CAAC,CAAC,YAAY,GAAG,IAAI,CAAC;AAC1B;IACA,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,IAAI,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;IACjB,IAAI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACtB,IAAI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACtB,IAAI,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC;IACpB,IAAI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACtB,IAAI,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;IACrB,IAAI,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;AAC7B;IACA,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;IACnB,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;IACnB,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;IACnB,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IACzB,CACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA,QAAQ,CAAC,SAAS,GAAG;AACrB;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,SAAS,EAAE,SAAS,KAAK,EAAE;IAC/B,QAAQ,IAAI,CAAC,GAAG,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC;IACpC,QAAQ,IAAI,IAAI,GAAG,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC;AACvC;IACA;IACA,QAAQ,IAAI,KAAK,CAAC,GAAG,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,GAAG,EAAE,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,EAAE;AAChE;IACA;IACA;IACA;IACA,QAAQ,IAAI,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC;IACnC,QAAQ,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;IAC1B,QAAQ,KAAK,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC;IAC3B,QAAQ,CAAC,CAAC,IAAI,GAAG,KAAK,CAAC;IACvB,QAAQ,KAAK,CAAC,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC;AAC9B;IACA,QAAQ,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC;IACrB,QAAQ,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC;IACpB,QAAQ,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC;IACvB,QAAQ,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC;IACrB,QAAQ,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC;IACvB,QAAQ,CAAC,CAAC,OAAO,GAAG,CAAC,CAAC;IACtB,QAAQ,CAAC,CAAC,YAAY,GAAG,IAAI,CAAC;AAC9B;IACA,QAAQ,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;IACrB,QAAQ,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IAC1B,QAAQ,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;IACvB,QAAQ,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC;IACxB,QAAQ,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IAC1B,QAAQ,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;IACzB,QAAQ,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;AACjC;IACA,QAAQ,OAAO,CAAC,CAAC;IACjB,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,OAAO,EAAE,SAAS,CAAC,EAAE,CAAC,EAAE;IAC5B,QAAQ,IAAI,MAAM,GAAG,CAAC,CAAC,KAAK,CAAC;IAC7B,QAAQ,IAAI,MAAM,GAAG,CAAC,CAAC,KAAK,CAAC;IAC7B,QAAQ,MAAM,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC;IAC7B,QAAQ,MAAM,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC;IAC7B,QAAQ,CAAC,CAAC,KAAK,GAAG,MAAM,CAAC;IACzB,QAAQ,CAAC,CAAC,KAAK,GAAG,MAAM,CAAC;IACzB,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,WAAW,EAAE,SAAS,SAAS,EAAE,KAAK,EAAE,KAAK,EAAE;IACnD,QAAQ,IAAI,IAAI,GAAG,SAAS,CAAC;IAC7B,QAAQ,MAAM,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC;AAC9B;IACA;IACA,QAAQ,IAAI,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC;IAC/B,QAAQ,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;IAC1B,QAAQ,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC;IAC1B,QAAQ,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;IAC1B,QAAQ,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC;AAC1B;IACA,QAAQ,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IAC5B;AACA;IACA;IACA,QAAQ,IAAI,CAAC,GAAG,KAAK,CAAC;IACtB,QAAQ,GAAG;IACX,YAAY,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC;IACzB,YAAY,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC;IACxB,SAAS,OAAO,CAAC,KAAK,KAAK,EAAE;IAC7B,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,SAAS,EAAE,SAAS,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE;IAC/C,QAAQ,IAAI,IAAI,GAAG,OAAO,CAAC;IAC3B,QAAQ,MAAM,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC;AAC9B;IACA;IACA,QAAQ,IAAI,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC;IAC/B,QAAQ,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;IAC1B,QAAQ,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC;IAC1B,QAAQ,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;IAC1B,QAAQ,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC;AAC1B;IACA,QAAQ,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IAC5B,QAAQ,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IAC1B,QAAQ,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;AAC5B;IACA;IACA;IACA;IACA,QAAQ,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;AACnC;IACA;IACA,QAAQ,IAAI,CAAC,GAAG,KAAK,CAAC;IACtB,QAAQ,GAAG;IACX,YAAY,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC;IAC3B,YAAY,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC;IACxB,SAAS,OAAO,CAAC,KAAK,KAAK,EAAE;IAC7B,KAAK;AACL;IACA;IACA;IACA;IACA;IACA,IAAI,SAAS,EAAE,SAAS,IAAI,EAAE;IAC9B;IACA,QAAQ,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,EAAE,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE;AAC5D;IACA;IACA,QAAQ,IAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;IAC9B,QAAQ,IAAI,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC;IAClC,QAAQ,KAAK,CAAC,GAAG,CAAC,IAAI,GAAG,KAAK,CAAC;IAC/B,QAAQ,KAAK,CAAC,GAAG,CAAC,IAAI,GAAG,KAAK,CAAC;IAC/B,KAAK;AACL;AACA;IACA;IACA;IACA;IACA;IACA,IAAI,WAAW,EAAE,SAAS,IAAI,EAAE,MAAM,EAAE;IACxC,QAAQ,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;IACjC;IACA,QAAQ,IAAI,CAAC,GAAG,MAAM,CAAC;IACvB,QAAQ,GAAG;IACX,YAAY,CAAC,CAAC,GAAG,GAAG,MAAM,CAAC;IAC3B,YAAY,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC;IACxB,SAAS,OAAO,CAAC,KAAK,MAAM,EAAE;AAC9B;IACA;IACA,QAAQ,IAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;IAC9B,QAAQ,IAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;IAC9B,QAAQ,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC;IAC3B,QAAQ,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC;IAC3B,KAAK;AACL;IACA;IACA;IACA;IACA;IACA,IAAI,SAAS,EAAE,SAAS,IAAI,EAAE,QAAQ,EAAE;IACxC,QAAQ,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;AACjC;IACA;IACA,QAAQ,IAAI,CAAC,GAAG,MAAM,CAAC;IACvB,QAAQ,GAAG;IACX,YAAY,CAAC,CAAC,KAAK,GAAG,QAAQ,CAAC;IAC/B,YAAY,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC;IACxB,SAAS,OAAO,CAAC,KAAK,MAAM,EAAE;AAC9B;IACA;IACA,QAAQ,IAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;IAC9B,QAAQ,IAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;IAC9B,QAAQ,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC;IAC3B,QAAQ,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC;IAC3B,KAAK;AACL;IACA;AACA;IACA;IACA;IACA;IACA;IACA,IAAI,QAAQ,EAAE,WAAW;IACzB,QAAQ,IAAI,UAAU,GAAG,IAAI,UAAU,EAAE,CAAC;IAC1C,QAAQ,IAAI,UAAU,GAAG,IAAI,UAAU,EAAE,CAAC;IAC1C,QAAQ,IAAI,OAAO,GAAG,IAAI,QAAQ,EAAE,CAAC;IACrC,QAAQ,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAC5C,QAAQ,IAAI,CAAC,WAAW,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC;IACtD,QAAQ,IAAI,CAAC,WAAW,EAAE,UAAU,EAAE,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC;IAC1D,QAAQ,IAAI,CAAC,SAAS,EAAE,OAAO,EAAE,CAAC,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC;IACjD,QAAQ,OAAO,CAAC,CAAC;IACjB,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,MAAM,EAAE,SAAS,IAAI,EAAE,IAAI,EAAE;IACjC,QAAQ,IAAI,YAAY,GAAG,KAAK,CAAC;IACjC,QAAQ,IAAI,eAAe,GAAG,KAAK,CAAC;AACpC;IACA,QAAQ,IAAI,IAAI,KAAK,IAAI,GAAG,OAAO;AACnC;IACA,QAAQ,IAAI,IAAI,CAAC,GAAG,KAAK,IAAI,CAAC,GAAG,GAAG;IACpC;IACA,YAAY,eAAe,GAAG,IAAI,CAAC;IACnC,YAAY,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC;IACnD,SAAS;IACT,QAAQ,IAAI,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,GAAG;IACxC;IACA,YAAY,YAAY,GAAG,IAAI,CAAC;IAChC,YAAY,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC;IACrD,SAAS;AACT;IACA;IACA,QAAQ,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;AACnC;IACA,QAAQ,IAAI,EAAE,eAAe,GAAG;IAChC,YAAY,IAAI,SAAS,GAAG,IAAI,UAAU,EAAE,CAAC;AAC7C;IACA;IACA;IACA;IACA,YAAY,IAAI,CAAC,WAAW,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC;IAC1D,YAAY,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC;IACnC,SAAS;IACT,QAAQ,IAAI,EAAE,YAAY,GAAG;IAC7B,YAAY,IAAI,OAAO,GAAG,IAAI,QAAQ,EAAE,CAAC;AACzC;IACA;IACA;IACA;IACA,YAAY,IAAI,CAAC,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC;IACxD,YAAY,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC;IACrC,SAAS;IACT,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,MAAM,EAAE,SAAS,IAAI,EAAE;IAC3B,QAAQ,IAAI,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC;IAC/B,QAAQ,IAAI,YAAY,GAAG,KAAK,CAAC;AACjC;IACA;IACA;IACA;IACA,QAAQ,IAAI,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,GAAG;IACxC;IACA,YAAY,YAAY,GAAG,IAAI,CAAC;IAChC,YAAY,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC;IACrD,SAAS;AACT;IACA,QAAQ,IAAI,IAAI,CAAC,KAAK,KAAK,IAAI,GAAG;IAClC,YAAY,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC;IAC/C,SAAS,MAAM;IACf;IACA,YAAY,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC;IAC3C,YAAY,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC;AACzC;IACA,YAAY,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC;IAC7C,YAAY,IAAI,EAAE,YAAY,GAAG;IACjC,gBAAgB,IAAI,OAAO,GAAG,IAAI,QAAQ,EAAE,CAAC;AAC7C;IACA;IACA,gBAAgB,IAAI,CAAC,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC;IAC5D,aAAa;IACb,SAAS;AACT;IACA;IACA;IACA;IACA,QAAQ,IAAI,OAAO,CAAC,KAAK,KAAK,OAAO,GAAG;IACxC,YAAY,IAAI,CAAC,WAAW,EAAE,OAAO,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC;IAClD,YAAY,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC;IAClD,SAAS,MAAM;IACf;IACA,YAAY,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC;IAC9C,YAAY,OAAO,CAAC,GAAG,CAAC,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC;IAC/C,YAAY,IAAI,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,KAAK,EAAE,CAAC;IACnD,SAAS;AACT;IACA;IACA,QAAQ,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,CAAC;IAC/B,KAAK;AACL;IACA;AACA;IACA;IACA;IACA;AACA;AACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,aAAa,EAAE,SAAS,IAAI,EAAE;IAClC,QAAQ,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,CAAC;IAC1C,QAAQ,IAAI,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC;AAC/B;IACA;IACA,QAAQ,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC;AACzC;IACA;IACA,QAAQ,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;AAC5B;IACA,QAAQ,IAAI,SAAS,GAAG,IAAI,UAAU,EAAE,CAAC;IACzC,QAAQ,IAAI,CAAC,WAAW,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC;AACzD;IACA,QAAQ,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;AAChD;IACA,QAAQ,OAAO,IAAI,CAAC;IACpB,KAAK;AACL;AACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,SAAS,EAAE,SAAS,IAAI,EAAE,IAAI,EAAE;IACpC,QAAQ,IAAI,YAAY,GAAG,IAAI,CAAC,aAAa,EAAE,IAAI,EAAE,CAAC;IACtD,QAAQ,IAAI,IAAI,GAAG,YAAY,CAAC,GAAG,CAAC;AACpC;IACA;IACA,QAAQ,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC;IACjD,QAAQ,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC;AACvC;IACA;IACA,QAAQ,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;IAC5B,QAAQ,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC;IACnC,QAAQ,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;IAChC,QAAQ,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;IACpC,QAAQ,IAAI,CAAC,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC;AAC5C;IACA,QAAQ,OAAO,IAAI,CAAC;IACpB,KAAK;AACL;AACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA,IAAI,OAAO,EAAE,SAAS,IAAI,EAAE,IAAI,EAAE;IAClC,QAAQ,IAAI,YAAY,GAAG,KAAK,CAAC;IACjC,QAAQ,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,CAAC;IAC1C,QAAQ,IAAI,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC;AAC/B;IACA,QAAQ,IAAI,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,GAAG;IACxC;IACA,YAAY,YAAY,GAAG,IAAI,CAAC;IAChC,YAAY,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC;IACrD,SAAS;AACT;IACA;IACA,QAAQ,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC;IACzC,QAAQ,IAAI,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;AACtC;IACA;IACA,QAAQ,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;IAC5B,QAAQ,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;IAC/B,QAAQ,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;AAChD;IACA;IACA,QAAQ,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,OAAO,CAAC;AACpC;IACA,QAAQ,IAAI,EAAE,YAAY,GAAG;IAC7B,YAAY,IAAI,OAAO,GAAG,IAAI,QAAQ,EAAE,CAAC;IACzC;IACA,YAAY,IAAI,CAAC,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC;IACxD,SAAS;IACT,QAAQ,OAAO,IAAI,CAAC;IACpB,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,OAAO,EAAE,UAAU,IAAI;IAC3B,IAAI;IACJ,QAAQ,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;IACjC,QAAQ,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC;IAC3B,QAAQ,IAAI,KAAK,EAAE,KAAK,CAAC;AACzB;IACA;IACA,QAAQ,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;IAC7B,QAAQ,GAAG;IACX,YAAY,CAAC,GAAG,KAAK,CAAC;IACtB,YAAY,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;AAC5B;IACA,YAAY,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC;IAC3B,YAAY,IAAI,CAAC,CAAC,KAAK,KAAK,IAAI,GAAG;IACnC;AACA;IACA,gBAAgB,IAAI,CAAC,CAAC,KAAK,KAAK,CAAC,GAAG;IACpC,oBAAoB,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC;IACpD,iBAAiB,MAAM;IACvB;IACA,oBAAoB,CAAC,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,CAAC;IAC3C,oBAAoB,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC;IAC/C,iBAAiB;IACjB,gBAAgB,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC;IAC7B,gBAAgB,IAAI,IAAI,CAAC,KAAK,KAAK,IAAI,GAAG;IAC1C,oBAAoB,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC;IACvD,iBAAiB,MAAM;IACvB;IACA,oBAAoB,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC;IACjD,oBAAoB,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC;IACrD,iBAAiB;IACjB,gBAAgB,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC;IACpC,aAAa;IACb,SAAS,QAAQ,CAAC,IAAI,MAAM,GAAG;AAC/B;IACA;IACA,QAAQ,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;IAC1B,QAAQ,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;IAC1B,QAAQ,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC;IAC3B,QAAQ,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC;IAC3B,KAAK;AACL;IACA,IAAI,eAAe,EAAE,SAAS,CAAC,EAAE;IACjC,QAAQ,IAAI,IAAI,GAAG,CAAC,CAAC,MAAM,CAAC;IAC5B,QAAQ,IAAI,CAAC,GAAG,CAAC,CAAC;IAClB,QAAQ;IACR,QAAQ;IACR,YAAY,CAAC,EAAE,CAAC;IAChB,YAAY,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;IAC9B,SAAS;IACT,eAAe,IAAI,KAAK,CAAC,CAAC,MAAM,EAAE;IAClC,QAAQ,OAAO,CAAC,CAAC;IACjB,KAAK;AACL;IACA;IACA,IAAI,gBAAgB,EAAE,SAAS,eAAe,EAAE;IAChD,QAAQ,IAAI,CAAC,CAAC;IACd,QAAQ,IAAI,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC;IAC9B,QAAQ,IAAI,MAAM,CAAC;IACnB,QAAQ,IAAI,KAAK,EAAE,KAAK,CAAC;AACzB;IACA,QAAQ,KAAK,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,IAAI,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI;IAC9D,QAAQ;IACR;IACA,YAAY,IAAI,CAAC,CAAC,CAAC,MAAM;IACzB,gBAAgB,SAAS;AACzB;IACA,YAAY,IAAI,GAAG,CAAC,CAAC,MAAM,CAAC;IAC5B,YAAY,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC;AAC9B;IACA,YAAY,OAAO,IAAI;IACvB,YAAY;IACZ,gBAAgB,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;IACnC,gBAAgB,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC;AAChC;IACA;IACA,gBAAgB,IAAI,IAAI,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM;IAC3D,gBAAgB;IAChB;IACA;IACA,oBAAoB,KAAK,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC,EAAE,CAAC;IACtD,oBAAoB,KAAK,GAAG,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC;IAC/D,oBAAoB,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,KAAK,eAAe;IAC1D,oBAAoB;IACpB;IACA,wBAAwB,IAAI,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,EAAE;IAC1F,4BAA4B,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,EAAE;IAC1F,wBAAwB;IACxB,4BAA4B,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;IAC/C,4BAA4B,IAAI,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC;IAChD,4BAA4B,IAAI,GAAG,IAAI,CAAC;IACxC,4BAA4B,IAAI,GAAG,IAAI,CAAC;IACxC,yBAAyB;IACzB,qBAAqB;IACrB,iBAAiB;AACjB;IACA,gBAAgB,IAAI,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,KAAK,MAAM;IACrD,oBAAoB,MAAM;AAC1B;IACA;IACA,gBAAgB,IAAI,GAAG,KAAK,CAAC;IAC7B,aAAa;IACb,SAAS;AACT;IACA,QAAQ,OAAO,IAAI,CAAC;IACpB,KAAK;AACL;IACA;IACA;IACA,IAAI,KAAK,EAAE,WAAW;IACtB,QAAQ,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;IAC/B,QAAQ,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;IAC/B,QAAQ,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;IAC/B,QAAQ,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,CAAC;AACzC;IACA,QAAQ,KAAK,GAAG,KAAK,CAAC;IACtB,QAAQ,KAAK,KAAK,GAAG,KAAK,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,IAAI,MAAM,KAAK,EAAE,KAAK,GAAG,CAAC,EAAE;IACpE,YAAY,MAAM,EAAE,CAAC,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC;IACvC,YAAY,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC;IACzB,YAAY,GAAG;IACf,gBAAgB,MAAM,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC,EAAE,CAAC;IACtC,gBAAgB,MAAM,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,EAAE,CAAC;IAC1C,gBAAgB,MAAM,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,EAAE,CAAC;IAClD,gBAAgB,MAAM,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,KAAK,CAAC,EAAE,CAAC;IAClD,gBAAgB,MAAM,EAAE,CAAC,CAAC,KAAK,KAAK,CAAC,EAAE,CAAC;IACxC,gBAAgB,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC;IAC5B,aAAa,QAAQ,CAAC,KAAK,CAAC,CAAC,MAAM,GAAG;IACtC,SAAS;IACT,QAAQ,MAAM,EAAE,CAAC,CAAC,IAAI,KAAK,KAAK,IAAI,CAAC,CAAC,MAAM,KAAK,IAAI,EAAE,CAAC;AACxD;IACA,QAAQ,KAAK,GAAG,KAAK,CAAC;IACtB,QAAQ,KAAK,KAAK,GAAG,KAAK,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,IAAI,MAAM,KAAK,EAAE,KAAK,GAAG,CAAC,EAAE;IACpE,YAAY,MAAM,EAAE,CAAC,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC;IACvC,YAAY,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC;IACzB,YAAY,GAAG;IACf,gBAAgB,MAAM,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC,EAAE,CAAC;IACtC,gBAAgB,MAAM,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,EAAE,CAAC;IAC1C,gBAAgB,MAAM,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,EAAE,CAAC;IAClD,gBAAgB,MAAM,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,KAAK,CAAC,EAAE,CAAC;IAClD,gBAAgB,MAAM,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC,EAAE,CAAC;IACtC,gBAAgB,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC;IAC5B,aAAa,QAAQ,CAAC,KAAK,CAAC,CAAC,MAAM,GAAG;IACtC,SAAS;IACT,QAAQ,MAAM,EAAE,CAAC,CAAC,IAAI,KAAK,KAAK,IAAI,CAAC,CAAC,MAAM,KAAK,IAAI,EAAE,CAAC;AACxD;IACA,QAAQ,KAAK,GAAG,KAAK,CAAC;IACtB,QAAQ,KAAK,KAAK,GAAG,KAAK,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,IAAI,MAAM,KAAK,EAAE,KAAK,GAAG,CAAC,EAAE;IACpE,YAAY,MAAM,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,KAAK,KAAK,CAAC,GAAG,EAAE,CAAC;IAC/C,YAAY,MAAM,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC,EAAE,CAAC;IAClC,YAAY,MAAM,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,EAAE,CAAC;IACtC,YAAY,MAAM,EAAE,CAAC,CAAC,GAAG,KAAK,IAAI,EAAE,CAAC;IACrC,YAAY,MAAM,EAAE,CAAC,CAAC,GAAG,KAAK,IAAI,EAAE,CAAC;IACrC,YAAY,MAAM,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,EAAE,CAAC;IAC9C,YAAY,MAAM,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,KAAK,CAAC,EAAE,CAAC;IAC9C,SAAS;IACT,QAAQ,MAAM,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,KAAK,KAAK,CAAC,GAAG;IACxC,eAAe,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,QAAQ;IACtC,eAAe,CAAC,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;IAC9B,eAAe,CAAC,CAAC,GAAG,KAAK,IAAI,IAAI,CAAC,CAAC,GAAG,KAAK,IAAI;IAC/C,eAAe,CAAC,CAAC,KAAK,KAAK,IAAI,IAAI,CAAC,CAAC,KAAK,KAAK,IAAI,EAAE,CAAC;IACtD,KAAK;AACL;IACA,CAAC,CAAC;AACF;IACA,IAAI,IAAI,GAAG,EAAE,CAAC;AACd;IACA,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC,CAAC,CAAC,EAAE;IAC5B,IAAI,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;IACxC,CAAC,CAAC;AACF;IACA;IACA,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC,CAAC,CAAC,EAAE;IAC7B,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;IACxD,CAAC,CAAC;AACF;IACA;IACA,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,EAAE;IAC9B,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;IACxD,CAAC,CAAC;AACF;IACA,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC,EAAE;IAChC,IAAI,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC;IACxC,CAAC,CAAC;AACF;IACA,IAAI,CAAC,aAAa,GAAG,SAAS,CAAC,EAAE;IACjC,IAAI,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC;IACxC,CAAC,CAAC;AACF;IACA,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC,CAAC,CAAC,EAAE;IAChC,IAAI,QAAQ,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE;IACvD,CAAC,CAAC;AACF;IACA;IACA,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG;IACpC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAC1D;IACA,IAAI,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACzB,IAAI,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACzB;IACA,IAAI,IAAI,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG;IAC5B,QAAQ,IAAI,IAAI,GAAG,IAAI,GAAG;IAC1B,YAAY,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,IAAI,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC;IACtE,SAAS,MAAM;IACf,YAAY,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,IAAI,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC;IACtE,SAAS;IACT,KAAK;IACL;IACA,IAAI,OAAO,GAAG,CAAC;IACf,CAAC,CAAC;AACF;IACA;IACA,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG;IACpC;IACA;IACA;IACA;IACA,IAAI,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAC1D;IACA,IAAI,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACzB,IAAI,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACzB;IACA,IAAI,IAAI,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG;IAC5B,QAAQ,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;IACvD,KAAK;IACL;IACA,IAAI,OAAO,GAAG,CAAC;IACf,CAAC,CAAC;AACF;AACA;IACA;IACA;IACA;AACA;IACA;IACA,IAAI,CAAC,SAAS,GAAG,UAAU,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG;IACrC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,MAAM,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAC5D;IACA,IAAI,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACzB,IAAI,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACzB;IACA,IAAI,IAAI,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG;IAC5B,QAAQ,IAAI,IAAI,GAAG,IAAI,GAAG;IAC1B,YAAY,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,IAAI,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC;IACtE,SAAS,MAAM;IACf,YAAY,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,IAAI,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC;IACtE,SAAS;IACT,KAAK;IACL;IACA,IAAI,OAAO,GAAG,CAAC;IACf,CAAC,CAAC;AACF;IACA;IACA,IAAI,CAAC,SAAS,GAAG,UAAU,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG;IACrC;IACA;IACA;IACA;IACA,IAAI,MAAM,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAC5D;IACA,IAAI,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACzB,IAAI,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACzB;IACA,IAAI,IAAI,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG;IAC5B,QAAQ,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;IACvD,KAAK;IACL;IACA,IAAI,OAAO,GAAG,CAAC;IACf,CAAC,CAAC;AACF;AACA;IACA;IACA,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG;IACnC;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC;IACxE,CAAC,CAAC;AACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IACrC,IAAI,QAAQ,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IACjJ,CAAC,CAAC;AACF;IACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA,IAAI,CAAC,SAAS,GAAG,UAAU,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,GAAG;IAC/C;IACA;IACA;IACA;IACA,IAAI,IAAI,EAAE,EAAE,EAAE,CAAC;IACf,IAAI,IAAI,CAAC,CAAC;AACV;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA,IAAI,IAAI,EAAE,IAAI,CAAC,OAAO,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE;IAC9D,IAAI,IAAI,EAAE,IAAI,CAAC,OAAO,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE;IAC9D,IAAI,IAAI,EAAE,IAAI,CAAC,OAAO,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE;AACvF;IACA,IAAI,IAAI,EAAE,IAAI,CAAC,OAAO,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;IAClC;IACA,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;IAChC,KAAK,MAAM,IAAI,IAAI,CAAC,OAAO,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;IACvC;IACA,QAAQ,EAAE,GAAG,IAAI,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IACzC,QAAQ,EAAE,GAAG,IAAI,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IACzC,QAAQ,IAAI,EAAE,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,EAAE;IAC/C,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC;IACrD,KAAK,MAAM;IACX;IACA,QAAQ,EAAE,GAAG,IAAI,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IACzC,QAAQ,EAAE,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAC1C,QAAQ,IAAI,EAAE,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,EAAE;IAC/C,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC;IACrD,KAAK;AACL;IACA;AACA;IACA,IAAI,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE;IAC/D,IAAI,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE;IAC/D,IAAI,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE;AACxF;IACA,IAAI,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;IACnC;IACA,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;IAChC,KAAK,MAAM,IAAI,IAAI,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;IACxC;IACA,QAAQ,EAAE,GAAG,IAAI,CAAC,SAAS,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAC1C,QAAQ,EAAE,GAAG,IAAI,CAAC,SAAS,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAC1C,QAAQ,IAAI,EAAE,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,EAAE;IAC/C,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC;IACrD,KAAK,MAAM;IACX;IACA,QAAQ,EAAE,GAAG,IAAI,CAAC,SAAS,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAC1C,QAAQ,EAAE,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAC3C,QAAQ,IAAI,EAAE,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,EAAE;IAC/C,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC;IACrD,KAAK;IACL,CAAC,CAAC;AACF;AACA;AACA;IACA,SAAS,QAAQ,GAAG;IACpB,IAAI,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC;IACpB,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,CACA;IACA,SAAS,IAAI,CAAC,KAAK,EAAE,GAAG,EAAE;IAC1B,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,QAAQ,EAAE,CAAC;IAC/B,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IAC/B,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IAC/B,IAAI,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACvB,IAAI,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;IACnB,CACA;IACA,IAAI,CAAC,SAAS,GAAG;IACjB,IAAI,GAAG,EAAE,WAAW;IACpB,QAAQ,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;IAC9B,KAAK;AACL;IACA,IAAI,GAAG,EAAE,WAAW;IACpB,QAAQ,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;IAC9B,KAAK;AACL;IACA,IAAI,MAAM,EAAE,SAAS,CAAC,EAAE;IACxB,QAAQ,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;IAC/C,KAAK;AACL;IACA,IAAI,MAAM,EAAE,SAAS,GAAG,EAAE;IAC1B;IACA;IACA;IACA;IACA,QAAQ,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IAC7B,QAAQ,GAAG;IACX,YAAY,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IAC7B,SAAS,QAAQ,IAAI,CAAC,GAAG,KAAK,IAAI,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE;AAC7E;IACA,QAAQ,OAAO,IAAI,CAAC;IACpB,KAAK;AACL;IACA,IAAI,YAAY,EAAE,SAAS,IAAI,EAAE,GAAG,EAAE;IACtC,QAAQ,GAAG;IACX,YAAY,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IAC7B,SAAS,QAAQ,IAAI,CAAC,GAAG,KAAK,IAAI,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE;AAC7E;IACA,QAAQ,IAAI,OAAO,GAAG,IAAI,QAAQ,EAAE,CAAC;IACrC,QAAQ,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC;IAC1B,QAAQ,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IACjC,QAAQ,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC;IACjC,QAAQ,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;IAC5B,QAAQ,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC;AAC5B;IACA,QAAQ,OAAO,OAAO,CAAC;IACvB,KAAK;AACL;IACA,IAAI,MAAM,EAAE,SAAS,IAAI,EAAE;IAC3B,QAAQ,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IACnC,QAAQ,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IACnC,KAAK;IACL,CAAC,CAAC;AACF;AACA;IACA,SAAS,MAAM,GAAG;IAClB,IAAI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;IACvB,CAAC;AACD;IACA,SAAS,YAAY,GAAG;IACxB,IAAI,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC;IACpB,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,CAAC;AACD;IACA,SAAS,SAAS,CAAC,IAAI,EAAE,GAAG,EAAE;IAC9B,IAAI,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;IAClB,IAAI,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC;AACpB;IACA,IAAI,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;IACpB,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC;IAC/B,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE;IAC9C,QAAQ,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,MAAM,EAAE,CAAC;AACrC;IACA,IAAI,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;IACtB,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC;IACjC,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE;IAChD,QAAQ,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,YAAY,EAAE,CAAC;AAC7C;IACA,IAAI,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;IAC7B,IAAI,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;IACtB,IAAI,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;AACnB;IACA,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;IAC7B,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC;IAC/B,CACA;IACA,SAAS,CAAC,SAAS,GAAG;AACtB;IACA,IAAI,UAAU,EAAE,UAAU,IAAI;IAC9B,IAAI;IACJ,QAAQ,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC;IAC3B,QAAQ,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC;IAC7B,QAAQ,IAAI,KAAK,EAAE,MAAM,CAAC;IAC1B,QAAQ,IAAI,KAAK,CAAC;AAClB;IACA,QAAQ,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC;IAC/B,QAAQ,UAAU;IAClB,YAAY,KAAK,GAAG,IAAI,IAAI,CAAC,CAAC;IAC9B,YAAY,IAAI,KAAK,GAAG,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE;IACnG,gBAAgB,EAAE,KAAK,CAAC;IACxB,aAAa;AACb;IACA,YAAY,MAAM,CAAC,KAAK,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;AACtC;IACA,YAAY,MAAM,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC;IACrC,YAAY,IAAI,KAAK,GAAG,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE;IAC9E,gBAAgB,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,GAAG,KAAK,CAAC;IACvC,gBAAgB,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC;IACrC,gBAAgB,MAAM;IACtB,aAAa;IACb,YAAY,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,GAAG,MAAM,CAAC;IACpC,YAAY,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC;IAClC,YAAY,IAAI,GAAG,KAAK,CAAC;IACzB,SAAS;IACT,KAAK;AACL;IACA,IAAI,QAAQ,EAAE,UAAU,IAAI;IAC5B,IAAI;IACJ,QAAQ,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC;IAC3B,QAAQ,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC;IAC7B,QAAQ,IAAI,KAAK,EAAE,OAAO,CAAC;IAC3B,QAAQ,IAAI,MAAM,CAAC;AACnB;IACA,QAAQ,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC;IAC/B,QAAQ,UAAU;IAClB,YAAY,MAAM,GAAG,IAAI,IAAI,CAAC,CAAC;IAC/B,YAAY,OAAO,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC;IACvC,YAAY,IAAI,MAAM,IAAI,CAAC,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;IACzE,gBAAgB,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,GAAG,KAAK,CAAC;IACvC,gBAAgB,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC;IACrC,gBAAgB,MAAM;IACtB,aAAa;IACb,YAAY,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,GAAG,OAAO,CAAC;IACrC,YAAY,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC;IACnC,YAAY,IAAI,GAAG,MAAM,CAAC;IAC1B,SAAS;IACT,KAAK;AACL;IACA,IAAI,IAAI,EAAE,WAAW;IACrB;IACA,QAAQ,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,GAAG;IAC9C,YAAY,IAAI,CAAC,UAAU,EAAE,CAAC,EAAE,CAAC;IACjC,SAAS;IACT,QAAQ,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;IAChC,KAAK;AACL;IACA,IAAI,GAAG,EAAE,WAAW;IACpB,QAAQ,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC;IACtD,KAAK;AACL;IACA,IAAI,OAAO,EAAE,WAAW;IACxB,QAAQ,IAAI,CAAC,IAAI,KAAK,CAAC,CAAC;IACxB,KAAK;AACL;IACA;IACA;IACA;IACA,IAAI,MAAM,EAAE,SAAS,MAAM;IAC3B,IAAI;IACJ,QAAQ,IAAI,IAAI,CAAC;IACjB,QAAQ,IAAI,IAAI,CAAC;AACjB;IACA,QAAQ,IAAI,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC;IAC3B,QAAQ,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,GAAG;IAClC,YAAY,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;IAC1B,YAAY,IAAI,CAAC,CAAC;IAClB,YAAY,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;IAClC,YAAY,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;IAC3C,YAAY,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE;IACtD,gBAAgB,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,MAAM,EAAE,CAAC;AAC7C;IACA,YAAY,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;IACpC,YAAY,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7C,YAAY,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE;IACxD,gBAAgB,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,YAAY,EAAE,CAAC;IACrD,SAAS;AACT;IACA,QAAQ,IAAI,IAAI,CAAC,QAAQ,KAAK,CAAC,GAAG;IAClC,YAAY,IAAI,GAAG,IAAI,CAAC;IACxB,SAAS,MAAM;IACf,YAAY,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC;IACjC,YAAY,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC;IACpD,SAAS;AACT;IACA,QAAQ,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC;IACvC,QAAQ,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC;IACvC,QAAQ,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,MAAM,CAAC;AACxC;IACA,QAAQ,IAAI,IAAI,CAAC,WAAW,GAAG;IAC/B,YAAY,IAAI,CAAC,QAAQ,EAAE,IAAI,EAAE,CAAC;IAClC,SAAS;IACT,QAAQ,OAAO,IAAI,CAAC;IACpB,KAAK;AACL;IACA;IACA,IAAI,UAAU,EAAE,WAAW;IAC3B,QAAQ,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC;IAC3B,QAAQ,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC;IAC7B,QAAQ,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;IAC/B,QAAQ,IAAI,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC;AAC9B;IACA,QAAQ,IAAI,IAAI,CAAC,IAAI,GAAG,CAAC,GAAG;IAC5B,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC;IAC9C,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC;AACpC;IACA,YAAY,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC;IAC/B,YAAY,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC;IACzC,YAAY,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;AACjC;IACA,YAAY,EAAE,IAAI,CAAC,IAAI,CAAC;IACxB,YAAY,IAAI,IAAI,CAAC,IAAI,GAAG,CAAC,GAAG;IAChC,gBAAgB,IAAI,CAAC,UAAU,EAAE,CAAC,EAAE,CAAC;IACrC,aAAa;IACb,SAAS;IACT,QAAQ,OAAO,GAAG,CAAC;IACnB,KAAK;AACL;IACA,IAAI,MAAM,EAAE,UAAU,KAAK,GAAG;IAC9B,QAAQ,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC;IAC3B,QAAQ,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC;IAC7B,QAAQ,IAAI,IAAI,CAAC;AACjB;IACA,QAAQ,MAAM,EAAE,KAAK,IAAI,CAAC,IAAI,KAAK,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,KAAK,IAAI,EAAE,CAAC;AAC3E;IACA,QAAQ,IAAI,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC;IAC7B,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC;IAC7C,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC;AACtC;IACA,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC;IACpB,QAAQ,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,GAAG;IAChC,YAAY,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE;IAC1F,gBAAgB,IAAI,CAAC,UAAU,EAAE,IAAI,EAAE,CAAC;IACxC,aAAa,MAAM;IACnB,gBAAgB,IAAI,CAAC,QAAQ,EAAE,IAAI,EAAE,CAAC;IACtC,aAAa;IACb,SAAS;IACT,QAAQ,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC;IAC5B,QAAQ,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC;IACtC,QAAQ,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;IAC9B,KAAK;IACL,CAAC,CAAC;AACF;AACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA,SAAS,YAAY,GAAG;IACxB,IAAI,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC;IACpB,IAAI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;IACvB,IAAI,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;IAC3B;IACA,IAAI,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACxB,IAAI,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;IAC1B,IAAI,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACvB;IACA;IACA,IAAI,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;IAC9B;IACA;IACA,CACA;IACA,IAAI,KAAK,GAAG,EAAE,CAAC;AACf;IACA,KAAK,CAAC,WAAW,GAAG,SAAS,CAAC,EAAE;IAChC,IAAI,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;IAC7B,EAAC;AACD;IACA,KAAK,CAAC,WAAW,GAAG,SAAS,CAAC,EAAE;IAChC,IAAI,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;IAC7B,EAAC;AACD;IACA,KAAK,CAAC,UAAU,GAAG,UAAU,IAAI,GAAG;IACpC;IACA,EAAC;AACD;AACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA,KAAK,CAAC,UAAU,GAAG,SAAS,IAAI,CAAC,IAAI,EAAE;IACvC,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC;IACjC,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC;IACzC,EAAC;AACD;AACA;IACA;IACA,KAAK,CAAC,OAAO,GAAG,UAAU,IAAI,EAAE,IAAI,EAAE,IAAI,GAAG;IAC7C;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;IACxB,IAAI,IAAI,EAAE,EAAE,EAAE,CAAC;AACf;IACA,IAAI,IAAI,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC;IACtB,IAAI,IAAI,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC;AACtB;IACA,IAAI,IAAI,EAAE,CAAC,GAAG,KAAK,EAAE,GAAG;IACxB,QAAQ,IAAI,EAAE,CAAC,GAAG,KAAK,EAAE,GAAG;IAC5B;IACA;IACA;IACA,YAAY,IAAI,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE;IAChD,gBAAgB,OAAO,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IACpE,aAAa;IACb,YAAY,OAAO,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IAChE,SAAS;IACT,QAAQ,OAAO,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IACxD,KAAK;IACL,IAAI,IAAI,EAAE,CAAC,GAAG,KAAK,EAAE,GAAG;IACxB,QAAQ,OAAO,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IACxD,KAAK;AACL;IACA;IACA,IAAI,IAAI,EAAE,GAAG,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC;IACjD,IAAI,IAAI,EAAE,GAAG,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC;IACjD,IAAI,QAAQ,EAAE,IAAI,EAAE,EAAE;IACtB,EAAC;AACD;AACA;IACA;IACA,KAAK,CAAC,YAAY,GAAG,UAAU,IAAI,EAAE,GAAG,GAAG;IAC3C,IAAI,IAAI,GAAG,CAAC,YAAY,GAAG;IAC3B;IACA;IACA;IACA;IACA,QAAQ,MAAM,EAAE,GAAG,CAAC,GAAG,CAAC,OAAO,KAAK,CAAC,EAAE,CAAC;IACxC,KAAK;IACL,IAAI,GAAG,CAAC,GAAG,CAAC,YAAY,GAAG,IAAI,CAAC;IAChC,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC;IACnC,EAAC;AACD;IACA;IACA,KAAK,CAAC,YAAY,GAAG,UAAU,IAAI,EAAE,GAAG,EAAE,OAAO,GAAG;IACpD;IACA;IACA;IACA,IAAI,MAAM,EAAE,GAAG,CAAC,YAAY,EAAE,CAAC;IAC/B,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;IAChC,IAAI,GAAG,CAAC,YAAY,GAAG,KAAK,CAAC;IAC7B,IAAI,GAAG,CAAC,GAAG,GAAG,OAAO,CAAC;IACtB,IAAI,OAAO,CAAC,YAAY,GAAG,GAAG,CAAC;IAC/B,EAAC;AACD;IACA;IACA,KAAK,CAAC,aAAa,GAAG,UAAU,IAAI,EAAE,GAAG,GAAG;IAC5C,IAAI,IAAI,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;IAC1B,IAAI,IAAI,CAAC,CAAC;AACV;IACA;IACA,IAAI,GAAG;IACP,QAAQ,GAAG,GAAG,KAAK,CAAC,WAAW,EAAE,GAAG,EAAE,CAAC;IACvC,KAAK,QAAQ,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,GAAG;AACnC;IACA;IACA;IACA;IACA,IAAI,IAAI,GAAG,CAAC,YAAY,GAAG;IAC3B,QAAQ,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC;IAC/E,QAAQ,IAAI,CAAC,KAAK,IAAI,EAAE,OAAO,IAAI,CAAC;IACpC,QAAQ,KAAK,CAAC,YAAY,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC;IAC3C,QAAQ,GAAG,GAAG,KAAK,CAAC,WAAW,EAAE,GAAG,EAAE,CAAC;IACvC,KAAK;IACL,IAAI,OAAO,GAAG,CAAC;IACf,EAAC;AACD;IACA;IACA,KAAK,CAAC,cAAc,GAAG,UAAU,GAAG;IACpC;IACA,IAAI,IAAI,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;IAC1B;IACA;IACA,IAAI,GAAG;IACP,QAAQ,GAAG,GAAG,KAAK,CAAC,WAAW,EAAE,GAAG,EAAE,CAAC;IACvC,KAAK,QAAQ,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,GAAG;IACnC,IAAI,OAAO,GAAG,CAAC;IACf,EAAC;AACD;IACA;IACA,KAAK,CAAC,cAAc,GAAG,UAAU,IAAI,EAAE,QAAQ,EAAE,MAAM,GAAG;IAC1D;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,MAAM,GAAG,IAAI,YAAY,EAAE,CAAC;IACpC,IAAI,MAAM,CAAC,GAAG,GAAG,MAAM,CAAC;IACxB,IAAI,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,QAAQ,CAAC,MAAM,EAAE,MAAM,EAAE,CAAC;IACtE;IACA,IAAI,MAAM,CAAC,YAAY,GAAG,KAAK,CAAC;IAChC,IAAI,MAAM,CAAC,QAAQ,GAAG,KAAK,CAAC;IAC5B,IAAI,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;AACzB;IACA,IAAI,MAAM,CAAC,YAAY,GAAG,MAAM,CAAC;IACjC,IAAI,OAAO,MAAM,CAAC;IAClB,EAAC;AACD;IACA;IACA,KAAK,CAAC,eAAe,GAAG,UAAU,IAAI,EAAE,CAAC,GAAG;IAC5C,IAAI,QAAQ,IAAI,CAAC,WAAW;IAC5B,QAAQ,KAAK,KAAK,CAAC,WAAW;IAC9B,YAAY,OAAO,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IAChC,QAAQ,KAAK,KAAK,CAAC,eAAe;IAClC,YAAY,QAAQ,CAAC,IAAI,CAAC,EAAE;IAC5B,QAAQ,KAAK,KAAK,CAAC,gBAAgB;IACnC,YAAY,QAAQ,CAAC,GAAG,CAAC,EAAE;IAC3B,QAAQ,KAAK,KAAK,CAAC,gBAAgB;IACnC,YAAY,QAAQ,CAAC,GAAG,CAAC,EAAE;IAC3B,QAAQ,KAAK,KAAK,CAAC,mBAAmB;IACtC,YAAY,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACzC,KAAK;IACL,IAAI,MAAM,EAAE,KAAK,EAAE,CAAC;IACpB,IAAI,OAAO,KAAK,CAAC;IACjB,EAAC;AACD;IACA;IACA,KAAK,CAAC,cAAc,GAAG,UAAU,IAAI,EAAE,GAAG,GAAG;IAC7C,IAAI,GAAG,CAAC,aAAa,GAAG,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,aAAa,GAAG,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC;IAC/E,IAAI,GAAG,CAAC,MAAM,GAAG,KAAK,CAAC,eAAe,EAAE,IAAI,EAAE,GAAG,CAAC,aAAa,EAAE,CAAC;IAClE,EAAC;AACD;AACA;IACA;IACA,KAAK,CAAC,YAAY,GAAG,UAAU,IAAI,EAAE,GAAG,GAAG;IAC3C;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC;IACpB,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC;AACpB;IACA,IAAI,CAAC,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC;IAC1B,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;IACjB,IAAI,KAAK,CAAC,YAAY,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC;IACpC,EAAC;AACD;AACA;IACA;IACA,KAAK,CAAC,iBAAiB,GAAG,UAAU,IAAI,EAAE,QAAQ,EAAE,OAAO,GAAG;IAC9D;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAAC,EAAE,KAAK,CAAC;IACjB,IAAI,IAAI,GAAG,GAAG,IAAI,CAAC;IACnB,IAAI,IAAI,OAAO,GAAG,QAAQ,CAAC;IAC3B,IAAI,IAAI,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC;IAC7B,IAAI,OAAO,OAAO,KAAK,OAAO,GAAG;IACjC,QAAQ,OAAO,CAAC,YAAY,GAAG,KAAK,CAAC;IACrC,QAAQ,GAAG,GAAG,KAAK,CAAC,WAAW,EAAE,OAAO,EAAE,CAAC;IAC3C,QAAQ,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC;IACpB,QAAQ,IAAI,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC,GAAG,GAAG;IACjC,YAAY,IAAI,EAAE,GAAG,CAAC,YAAY,GAAG;IACrC;IACA;IACA;IACA;IACA;IACA;IACA,gBAAgB,KAAK,CAAC,YAAY,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;IACpD,gBAAgB,MAAM;IACtB,aAAa;IACb;IACA;IACA;IACA,YAAY,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC;IACxD;IACA,YAAY,KAAK,CAAC,YAAY,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC;IAC/C,SAAS;AACT;IACA;IACA,QAAQ,IAAI,KAAK,CAAC,KAAK,KAAK,CAAC,GAAG;IAChC,YAAY,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC;IAC3C,YAAY,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;IACzC,SAAS;IACT,QAAQ,KAAK,CAAC,YAAY,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;IAC5C,QAAQ,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC;IACxB,QAAQ,OAAO,GAAG,GAAG,CAAC;IACtB,KAAK;IACL,IAAI,OAAO,KAAK,CAAC;IACjB,EAAC;AACD;AACA;IACA;IACA,KAAK,CAAC,aAAa,GAAG,UAAU,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,GAAG;IAChF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,GAAG,EAAE,OAAO,CAAC;IACrB,IAAI,IAAI,CAAC,EAAE,KAAK,CAAC;IACjB,IAAI,IAAI,SAAS,GAAG,IAAI,CAAC;AACzB;IACA;IACA,IAAI,CAAC,GAAG,MAAM,CAAC;IACf,IAAI,GAAG;IACP,QAAQ,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;IAC9C,QAAQ,KAAK,CAAC,cAAc,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC;IACnD,QAAQ,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC;IACpB,KAAK,SAAS,CAAC,KAAK,KAAK,GAAG;AAC5B;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,QAAQ,KAAK,IAAI,GAAG;IAC5B,QAAQ,QAAQ,GAAG,KAAK,CAAC,WAAW,EAAE,KAAK,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC;IACxD,KAAK;IACL,IAAI,OAAO,GAAG,KAAK,CAAC;IACpB,IAAI,KAAK,GAAG,QAAQ,CAAC;IACrB,IAAI,UAAU;IACd,QAAQ,GAAG,GAAG,KAAK,CAAC,WAAW,EAAE,OAAO,EAAE,CAAC;IAC3C,QAAQ,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;IACxB,QAAQ,IAAI,CAAC,CAAC,GAAG,KAAK,KAAK,CAAC,GAAG,GAAG,MAAM;AACxC;IACA,QAAQ,IAAI,CAAC,CAAC,KAAK,KAAK,KAAK,GAAG;IAChC;IACA,YAAY,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC;IAC3C,YAAY,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC;IAC/C,SAAS;IACT;IACA,QAAQ,GAAG,CAAC,aAAa,GAAG,OAAO,CAAC,aAAa,GAAG,CAAC,CAAC,OAAO,CAAC;IAC9D,QAAQ,GAAG,CAAC,MAAM,GAAG,KAAK,CAAC,eAAe,EAAE,IAAI,EAAE,GAAG,CAAC,aAAa,EAAE,CAAC;AACtE;IACA;IACA;IACA;IACA,QAAQ,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC;IAC7B,QAAQ,IAAI,EAAE,SAAS,IAAI,KAAK,CAAC,mBAAmB,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE;IACvE,YAAY,KAAK,CAAC,UAAU,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC;IACzC,YAAY,KAAK,CAAC,YAAY,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;IAChD,YAAY,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,CAAC;IACtC,SAAS;IACT,QAAQ,SAAS,GAAG,KAAK,CAAC;IAC1B,QAAQ,OAAO,GAAG,GAAG,CAAC;IACtB,QAAQ,KAAK,GAAG,CAAC,CAAC;IAClB,KAAK;IACL,IAAI,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC;IACzB,IAAI,MAAM,EAAE,OAAO,CAAC,aAAa,GAAG,CAAC,CAAC,OAAO,KAAK,GAAG,CAAC,aAAa,EAAE,CAAC;AACtE;IACA,IAAI,IAAI,OAAO,GAAG;IAClB;IACA,QAAQ,KAAK,CAAC,gBAAgB,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;IAChD,KAAK;IACL,EAAC;AACD;AACA;IACA;IACA,KAAK,CAAC,mBAAmB,GAAG,UAAU,IAAI,EAAE,EAAE,EAAE,EAAE,GAAG;IACrD;IACA;IACA;IACA;IACA,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAC/B,EAAC;AACD;IACA;IACA,KAAK,CAAC,aAAa,GAAG,UAAU,KAAK,EAAE,GAAG,EAAE,GAAG,GAAG;IAClD;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,EAAE,GAAG,IAAI,CAAC,UAAU,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC;IAC3C,IAAI,IAAI,EAAE,GAAG,IAAI,CAAC,UAAU,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC;IAC3C,IAAI,IAAI,EAAE,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;IAClC,IAAI,IAAI,EAAE,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;IAClC,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC3D,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC3D,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC3D,EAAC;AACD;AACA;IACA;IACA,KAAK,CAAC,gBAAgB,GAAG,UAAU,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,GAAG;IAC7E;IACA;IACA;IACA;IACA;IACA,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC5D,IAAI,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;IACnB,IAAI,KAAK,CAAC,aAAa,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;IAC/C,IAAI,KAAK,CAAC,aAAa,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;IAC/C,EAAC;AACD;IACA;IACA,KAAK,CAAC,mBAAmB,GAAG,UAAU,IAAI,EAAE,KAAK,GAAG;IACpD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,KAAK,GAAG,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;IACzC,IAAI,IAAI,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC;IACxB,IAAI,IAAI,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC;AACxB;IACA,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE;IAC1C,QAAQ,IAAI,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,OAAO,KAAK,CAAC;AAC1E;IACA;IACA,QAAQ,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE;IAC/C;IACA,YAAY,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;IAC3C,YAAY,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,GAAG,CAAC,KAAK,EAAE,CAAC;IAC/C,YAAY,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC;AAC7C;IACA,SAAS,MAAM,IAAI,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG,GAAG;IACzC;IACA,YAAY,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;IAC/C,YAAY,KAAK,CAAC,mBAAmB,EAAE,IAAI,EAAE,GAAG,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC;IAC9D,SAAS;IACT,KAAK,MAAM;IACX,QAAQ,IAAI,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,OAAO,KAAK,CAAC;AAC1E;IACA;IACA,QAAQ,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC;IAC5D,QAAQ,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;IACvC,QAAQ,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC;IAC3C,KAAK;IACL,IAAI,OAAO,IAAI,CAAC;IAChB,EAAC;AACD;IACA;IACA,KAAK,CAAC,kBAAkB,GAAG,UAAU,IAAI,EAAE,KAAK,GAAG;IACnD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,KAAK,GAAG,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;IACzC,IAAI,IAAI,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC;IACxB,IAAI,IAAI,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC;IACxB,IAAI,IAAI,CAAC,CAAC;AACV;IACA,IAAI,MAAM,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC;AAC/C;IACA,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE;IAC1C,QAAQ,IAAI,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,OAAO,KAAK,CAAC;AAC1E;IACA;IACA,QAAQ,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC;IAC5D,QAAQ,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,EAAE,CAAC;IACvC,QAAQ,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;IACvC,QAAQ,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;IACtC,KAAK,MAAM;IACX,QAAQ,IAAI,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,OAAO,KAAK,CAAC;AAC1E;IACA;IACA,QAAQ,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC;IACzC,QAAQ,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,EAAE,CAAC;IACvC,QAAQ,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;IAC/C,QAAQ,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;IACtC,KAAK;IACL,IAAI,OAAO,IAAI,CAAC;IAChB,EAAC;AACD;AACA;IACA;IACA,KAAK,CAAC,iBAAiB,GAAG,UAAU,IAAI,EAAE,KAAK,GAAG;IAClD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,KAAK,GAAG,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;IACzC,IAAI,IAAI,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC;IACxB,IAAI,IAAI,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC;IACxB,IAAI,IAAI,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC;IACxB,IAAI,IAAI,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC;IACxB,IAAI,IAAI,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC;IACxB,IAAI,IAAI,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC;IACxB,IAAI,IAAI,MAAM,EAAE,MAAM,CAAC;IACvB,IAAI,IAAI,KAAK,GAAG,IAAI,UAAU,EAAE,MAAM,CAAC;IACvC,IAAI,IAAI,CAAC,CAAC;AACV;IACA,IAAI,MAAM,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;IAC3C,IAAI,MAAM,EAAE,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC;IAC7D,IAAI,MAAM,EAAE,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC;IAC7D,IAAI,MAAM,EAAE,KAAK,KAAK,IAAI,CAAC,KAAK,IAAI,KAAK,KAAK,IAAI,CAAC,KAAK,EAAE,CAAC;IAC3D,IAAI,MAAM,EAAE,EAAE,KAAK,CAAC,YAAY,IAAI,EAAE,KAAK,CAAC,YAAY,EAAE,CAAC;AAC3D;IACA,IAAI,IAAI,KAAK,KAAK,KAAK,GAAG,OAAO,KAAK,CAAC;AACvC;IACA,IAAI,MAAM,GAAG,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC;IAC1C,IAAI,MAAM,GAAG,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC;IAC1C,IAAI,IAAI,MAAM,GAAG,MAAM,GAAG,OAAO,KAAK,CAAC;AACvC;IACA,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE;IACtC,QAAQ,IAAI,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,GAAG,OAAO,KAAK,CAAC;IACpE,KAAK,MAAM;IACX,QAAQ,IAAI,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,GAAG,OAAO,KAAK,CAAC;IACpE,KAAK;AACL;IACA;IACA,IAAI,KAAK,CAAC,UAAU,EAAE,IAAI,EAAE,CAAC;AAC7B;IACA,IAAI,IAAI,CAAC,SAAS,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;IACxD;IACA,IAAI,MAAM,EAAE,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,IAAI,KAAK,CAAC,CAAC,EAAE,CAAC;IACtD,IAAI,MAAM,EAAE,KAAK,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;IACrD,IAAI,MAAM,EAAE,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,IAAI,KAAK,CAAC,CAAC,EAAE,CAAC;IACtD,IAAI,MAAM,EAAE,KAAK,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;AACrD;IACA,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,EAAE;IAC3C;IACA;IACA;IACA;IACA;IACA;IACA,QAAQ,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IAC/B,QAAQ,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IAC/B,KAAK;IACL;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,KAAK,GAAG,KAAK,CAAC;IAC1D,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE;IACvC,QAAQ,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IAC3B,QAAQ,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IAC3B,KAAK;AACL;IACA,IAAI,IAAI,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE;IACpE;IACA,QAAQ,KAAK,CAAC,mBAAmB,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;IACjD,QAAQ,OAAO,KAAK,CAAC;IACrB,KAAK;AACL;IACA,IAAI,OAAO,CAAC,EAAE,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE;IAC9C,WAAW,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC;IACzD,YAAY,EAAE,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE;IAC9C,WAAW,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,EAAE;IAC3D,IAAI;IACJ;IACA;IACA;IACA;IACA,QAAQ,IAAI,KAAK,KAAK,IAAI,CAAC,KAAK,GAAG;IACnC;IACA,YAAY,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;IAC3C,YAAY,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;IAC7C,YAAY,KAAK,GAAG,KAAK,CAAC,aAAa,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;IACvD;IACA,YAAY,GAAG,GAAG,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC;IAC/C,YAAY,KAAK,CAAC,iBAAiB,EAAE,IAAI,EAAE,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,CAAC;IAC7E,YAAY,KAAK,CAAC,aAAa,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC;IAC1E,YAAY,OAAO,IAAI,CAAC;IACxB,SAAS;IACT,QAAQ,IAAI,KAAK,KAAK,IAAI,CAAC,KAAK,GAAG;IACnC;IACA,YAAY,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;IAC3C,YAAY,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,CAAC;IACrD,YAAY,KAAK,GAAG,KAAK,CAAC;IAC1B,YAAY,KAAK,GAAG,KAAK,CAAC,cAAc,EAAE,KAAK,EAAE,CAAC;IAClD,YAAY,CAAC,GAAG,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC;IACnD,YAAY,KAAK,CAAC,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC;IAClC,YAAY,GAAG,GAAG,KAAK,CAAC,iBAAiB,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;IAC/D,YAAY,KAAK,CAAC,aAAa,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC;IAC9E,YAAY,OAAO,IAAI,CAAC;IACxB,SAAS;IACT;IACA;IACA;IACA;IACA,QAAQ,IAAI,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,GAAG;IAC7D,YAAY,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC;IAChE,YAAY,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;IAC3C,YAAY,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IACrC,YAAY,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IACrC,SAAS;IACT,QAAQ,IAAI,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,GAAG;IAC7D,YAAY,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC;IAC7C,YAAY,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;IAC3C,YAAY,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IACrC,YAAY,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IACrC,SAAS;IACT;IACA,QAAQ,OAAO,KAAK,CAAC;IACrB,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;IACnC,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;IACnC,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC;IACvC,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;IACxB,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;IACxB,IAAI,GAAG,CAAC,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;IACjD,IAAI,KAAK,CAAC,gBAAgB,EAAE,IAAI,EAAE,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;IACxE,IAAI,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC;IACtE,IAAI,OAAO,KAAK,CAAC;IACjB,EAAC;AACD;IACA;IACA,KAAK,CAAC,gBAAgB,GAAG,UAAU,IAAI,EAAE,KAAK,GAAG;IACjD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,KAAK,GAAG,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;IACzC,IAAI,IAAI,GAAG,EAAE,GAAG,CAAC;AACjB;IACA,IAAI,UAAU;IACd;IACA,QAAQ,OAAO,KAAK,CAAC,KAAK,GAAG;IAC7B,YAAY,KAAK,GAAG,KAAK,CAAC;IAC1B,YAAY,KAAK,GAAG,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;IAC7C,SAAS;IACT,QAAQ,IAAI,EAAE,KAAK,CAAC,KAAK,GAAG;IAC5B,YAAY,KAAK,GAAG,KAAK,CAAC;IAC1B,YAAY,KAAK,GAAG,KAAK,CAAC,WAAW,EAAE,KAAK,EAAE,CAAC;IAC/C,YAAY,IAAI,KAAK,IAAI,IAAI,IAAI,EAAE,KAAK,CAAC,KAAK,GAAG;IACjD;IACA,gBAAgB,OAAO;IACvB,aAAa;IACb,SAAS;IACT,QAAQ,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;IAC5B,QAAQ,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC;IACxB,QAAQ,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC;AACxB;IACA,QAAQ,IAAI,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG,GAAG;IAClC;IACA,YAAY,IAAI,KAAK,CAAC,kBAAkB,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;AACzD;IACA;IACA;IACA;IACA;IACA,gBAAgB,IAAI,KAAK,CAAC,YAAY,GAAG;IACzC,oBAAoB,KAAK,CAAC,YAAY,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;IACtD,oBAAoB,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC;IAC5C,oBAAoB,KAAK,GAAG,KAAK,CAAC,WAAW,EAAE,KAAK,EAAE,CAAC;IACvD,oBAAoB,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC;IACpC,iBAAiB,MAAM,IAAI,KAAK,CAAC,YAAY,GAAG;IAChD,oBAAoB,KAAK,CAAC,YAAY,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;IACtD,oBAAoB,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC;IAC5C,oBAAoB,KAAK,GAAG,KAAK,CAAC,WAAW,EAAE,KAAK,EAAE,CAAC;IACvD,oBAAoB,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC;IACpC,iBAAiB;IACjB,aAAa;IACb,SAAS;IACT,QAAQ,IAAI,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG,GAAG;IAClC,YAAY,OAAO,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG;IACtC,mBAAmB,EAAE,KAAK,CAAC,YAAY,IAAI,EAAE,KAAK,CAAC,YAAY;IAC/D,oBAAoB,GAAG,CAAC,GAAG,KAAK,IAAI,CAAC,KAAK,IAAI,GAAG,CAAC,GAAG,KAAK,IAAI,CAAC,KAAK,CAAC;IACrE,YAAY;IACZ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,gBAAgB,IAAI,KAAK,CAAC,iBAAiB,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC5D;IACA,oBAAoB,OAAO;IAC3B,iBAAiB;IACjB,aAAa,MAAM;IACnB;IACA;IACA;IACA,gBAAgB,KAAK,CAAC,mBAAmB,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;IACzD,aAAa;IACb,SAAS;IACT,QAAQ,IAAI,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG,GAAG;IACzD;IACA,YAAY,KAAK,CAAC,UAAU,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;IACzC,YAAY,KAAK,CAAC,YAAY,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;IAC9C,YAAY,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC;IACpC,YAAY,KAAK,GAAG,KAAK,CAAC,WAAW,EAAE,KAAK,EAAE,CAAC;IAC/C,SAAS;IACT,KAAK;IACL,EAAC;AACD;AACA;IACA;IACA,KAAK,CAAC,kBAAkB,GAAG,UAAU,IAAI,EAAE,KAAK,EAAE,WAAW,GAAG;IAChE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,IAAI,CAAC;IACb,IAAI,IAAI,QAAQ,GAAG,WAAW,CAAC,KAAK,CAAC;IACrC,IAAI,IAAI,KAAK,GAAG,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;IACzC,IAAI,IAAI,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC;IACxB,IAAI,IAAI,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC;IACxB,IAAI,IAAI,UAAU,GAAG,KAAK,CAAC;AAC3B;IACA,IAAI,IAAI,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG,GAAG;IAC9B,QAAQ,KAAK,CAAC,iBAAiB,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;IAC/C,KAAK;AACL;IACA;IACA;IACA;IACA,IAAI,IAAI,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,EAAE,EAAE;IAC5C,QAAQ,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC;IAChD,QAAQ,KAAK,GAAG,KAAK,CAAC,aAAa,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;IACnD,QAAQ,QAAQ,GAAG,KAAK,CAAC,WAAW,EAAE,KAAK,EAAE,CAAC,GAAG,CAAC;IAClD,QAAQ,KAAK,CAAC,iBAAiB,EAAE,IAAI,EAAE,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,CAAC;IACzE,QAAQ,UAAU,GAAG,IAAI,CAAC;IAC1B,KAAK;IACL,IAAI,IAAI,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,EAAE,EAAE;IAC5C,QAAQ,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,WAAW,EAAE,GAAG,CAAC,KAAK,EAAE,CAAC;IACnD,QAAQ,WAAW,GAAG,KAAK,CAAC,iBAAiB,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;IACnE,QAAQ,UAAU,GAAG,IAAI,CAAC;IAC1B,KAAK;IACL,IAAI,IAAI,UAAU,GAAG;IACrB,QAAQ,KAAK,CAAC,aAAa,EAAE,IAAI,EAAE,KAAK,EAAE,WAAW,CAAC,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;IACxF,QAAQ,OAAO;IACf,KAAK;AACL;IACA;IACA;IACA;IACA,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE;IAC1C,QAAQ,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC;IACzB,KAAK,MAAM;IACX,QAAQ,IAAI,GAAG,GAAG,CAAC;IACnB,KAAK;IACL,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,WAAW,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC;AACxD;IACA;IACA;IACA;IACA,IAAI,KAAK,CAAC,aAAa,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,CAAC;IAC5E,IAAI,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,YAAY,GAAG,IAAI,CAAC;IAC9C,IAAI,KAAK,CAAC,gBAAgB,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;IAC1C,EAAC;AACD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA,KAAK,CAAC,qBAAqB,GAAG,UAAU,IAAI,EAAE,KAAK,EAAE,MAAM,GAAG;IAC9D;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,KAAK,CAAC;IACtC,IAAI,IAAI,GAAG,CAAC;AACZ;IACA,IAAI,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC;IAClB,IAAI,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,GAAG,EAAE,MAAM,EAAE,EAAE;IACtC;IACA;IACA;IACA,QAAQ,MAAM,EAAE,KAAK,wBAAwB,CAAC;IAC9C,QAAQ,KAAK,CAAC,mBAAmB,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,CAAC,MAAM,EAAE,CAAC;IAC5D,QAAQ,OAAO;IACf,KAAK;AACL;IACA,IAAI,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,GAAG,EAAE,MAAM,EAAE,EAAE;IACxC;IACA,QAAQ,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC;IACrC,QAAQ,IAAI,KAAK,CAAC,YAAY,GAAG;IACjC;IACA,YAAY,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC;IACxC,YAAY,KAAK,CAAC,YAAY,GAAG,KAAK,CAAC;IACvC,SAAS;IACT,QAAQ,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC;IAC7C,QAAQ,KAAK,CAAC,UAAU,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;IACzC,QAAQ,OAAO;IACf,KAAK;AACL;IACA;IACA;IACA;IACA,IAAI,MAAM,EAAE,KAAK,wBAAwB,CAAC;IAC1C,IAAI,KAAK,GAAG,KAAK,CAAC,cAAc,EAAE,KAAK,EAAE,CAAC;IAC1C,IAAI,GAAG,GAAG,KAAK,CAAC,WAAW,EAAE,KAAK,EAAE,CAAC;IACrC,IAAI,SAAS,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;IAC5B,IAAI,QAAQ,GAAG,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC;IACvC,IAAI,IAAI,GAAG,CAAC,YAAY,GAAG;IAC3B;IACA;IACA;IACA,QAAQ,MAAM,EAAE,QAAQ,KAAK,SAAS,EAAE,CAAC;IACzC,QAAQ,KAAK,CAAC,YAAY,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC;IACxC,QAAQ,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,EAAE,CAAC;IACtC,QAAQ,SAAS,GAAG,QAAQ,CAAC,KAAK,CAAC;IACnC,KAAK;IACL,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,SAAS,EAAE,CAAC;IACjD,IAAI,IAAI,EAAE,IAAI,CAAC,YAAY,EAAE,QAAQ,EAAE,EAAE;IACzC;IACA,QAAQ,QAAQ,GAAG,IAAI,CAAC;IACxB,KAAK;IACL,IAAI,KAAK,CAAC,aAAa,EAAE,IAAI,EAAE,KAAK,EAAE,SAAS,CAAC,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;IAC/E,EAAC;AACD;AACA;IACA;IACA,KAAK,CAAC,iBAAiB,GAAG,UAAU,IAAI,EAAE,MAAM,GAAG;IACnD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC;IAC1B,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC;IACvB,IAAI,IAAI,GAAG,GAAG,IAAI,YAAY,EAAE,CAAC;AACjC;IACA;AACA;IACA;IACA,IAAI,GAAG,CAAC,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC;IAChC;IACA,IAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC;IACxC,IAAI,KAAK,GAAG,KAAK,CAAC,WAAW,EAAE,KAAK,EAAE,CAAC;IACvC,IAAI,IAAI,CAAC,KAAK,GAAG;IACjB;IACA,QAAQ,OAAO;IACf,KAAK;IACL,IAAI,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC;IACpB,IAAI,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC;AACpB;IACA;IACA,IAAI,IAAI,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,GAAG,EAAE,MAAM,EAAE,GAAG,CAAC,GAAG,EAAE,KAAK,GAAG,GAAG;IAC5D,QAAQ,KAAK,CAAC,qBAAqB,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC;IAC3D,QAAQ,OAAO;IACf,KAAK;AACL;IACA;IACA;IACA;IACA,IAAI,GAAG,GAAG,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,KAAK,GAAG,KAAK,CAAC;AAC3D;IACA,IAAI,IAAI,KAAK,CAAC,MAAM,IAAI,GAAG,CAAC,YAAY,EAAE;IAC1C,QAAQ,IAAI,GAAG,KAAK,KAAK,GAAG;IAC5B,YAAY,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,KAAK,EAAE,CAAC;IACrE,SAAS,MAAM;IACf,YAAY,IAAI,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;IAC5E,YAAY,IAAI,GAAG,YAAY,CAAC,GAAG,CAAC;IACpC,SAAS;IACT,QAAQ,IAAI,GAAG,CAAC,YAAY,GAAG;IAC/B,YAAY,KAAK,CAAC,YAAY,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC;IAClD,SAAS,MAAM;IACf,YAAY,KAAK,CAAC,cAAc,EAAE,IAAI,EAAE,KAAK,CAAC,cAAc,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;IACnF,SAAS;IACT,QAAQ,KAAK,CAAC,UAAU,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;IACzC,KAAK,MAAM;IACX;IACA;IACA;IACA,QAAQ,KAAK,CAAC,aAAa,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;IACrF,KAAK;IACL,CAAC,CAAC;AACF;AACA;IACA;IACA,KAAK,CAAC,UAAU,GAAG,UAAU,IAAI,EAAE,MAAM,GAAG;IAC5C;IACA;IACA;IACA;AACA;IACA,IAAI,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC;IACxB,IAAI,KAAK,CAAC,UAAU,EAAE,IAAI,EAAE,CAAC;AAC7B;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC;IAC1B,IAAI,OAAO,CAAC,CAAC,YAAY,KAAK,IAAI,GAAG;IACrC,QAAQ,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC;IACpB,QAAQ,IAAI,CAAC,IAAI,MAAM,CAAC,MAAM,GAAG;IACjC;IACA,YAAY,KAAK,CAAC,iBAAiB,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;IACpD,YAAY,OAAO;IACnB,SAAS;IACT,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,KAAK,GAAG,KAAK,CAAC,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC,YAAY,EAAE,CAAC;IAC5D,IAAI,MAAM,EAAE,KAAK,KAAK,IAAI,EAAE,CAAC;IAC7B;IACA,IAAI,IAAI,GAAG,GAAG,KAAK,CAAC,WAAW,EAAE,KAAK,EAAE,CAAC;IACzC,IAAI,IAAI,QAAQ,GAAG,GAAG,CAAC,GAAG,CAAC;IAC3B,IAAI,IAAI,WAAW,GAAG,KAAK,CAAC,iBAAiB,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC;AACjE;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,WAAW,CAAC,KAAK,KAAK,QAAQ,GAAG;IACzC;IACA,QAAQ,KAAK,CAAC,kBAAkB,EAAE,IAAI,EAAE,KAAK,EAAE,WAAW,EAAE,CAAC;IAC7D,KAAK,MAAM;IACX,QAAQ,KAAK,CAAC,aAAa,EAAE,IAAI,EAAE,KAAK,EAAE,WAAW,CAAC,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;IACxF,KAAK;IACL,CAAC,CAAC;AACF;AACA;IACA;IACA;IACA;AACA;IACA;IACA,KAAK,CAAC,WAAW,GAAG,UAAU,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,GAAG;IACpD;IACA;IACA;IACA;IACA,IAAI,IAAI,GAAG,GAAG,IAAI,YAAY,EAAE,CAAC;IACjC,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;IACjC;AACA;IACA,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;IACnB,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;IAChB,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;IACnB,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;IAChB,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC;AACvB;IACA,IAAI,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;IAChB,IAAI,GAAG,CAAC,aAAa,GAAG,CAAC,CAAC;IAC1B,IAAI,GAAG,CAAC,MAAM,GAAG,KAAK,CAAC;IACvB,IAAI,GAAG,CAAC,YAAY,GAAG,KAAK,CAAC;IAC7B,IAAI,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC;IACxB,IAAI,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC;IACtB,IAAI,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC;IACzC;IACA,EAAC;AACD;AACA;IACA;IACA,KAAK,CAAC,YAAY,GAAG,UAAU,IAAI,GAAG;IACtC;IACA;IACA;IACA;IACA,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC;IAChD;AACA;IACA,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1C,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C;IACA,IAAI,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAChC,IAAI,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAChC,IAAI,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAChC,IAAI,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AAChC;IACA,IAAI,KAAK,CAAC,WAAW,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;IAChD,IAAI,KAAK,CAAC,WAAW,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;IAChD,EAAC;AACD;AACA;IACA,KAAK,CAAC,YAAY,GAAG,UAAU,IAAI;IACnC;IACA,IAAI,IAAI,GAAG,CAAC;IACZ,IAAI,IAAI,UAAU,GAAG,CAAC,CAAC;AACvB;IACA,IAAI,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,MAAM,IAAI,GAAG;IAClD;IACA;IACA;IACA;IACA;IACA,QAAQ,IAAI,EAAE,GAAG,CAAC,QAAQ,GAAG;IAC7B,YAAY,MAAM,EAAE,GAAG,CAAC,YAAY,EAAE,CAAC;IACvC,YAAY,MAAM,EAAE,EAAE,UAAU,IAAI,CAAC,EAAE,CAAC;IACxC,SAAS;IACT,QAAQ,MAAM,EAAE,GAAG,CAAC,aAAa,IAAI,CAAC,EAAE,CAAC;IACzC,QAAQ,KAAK,CAAC,YAAY,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC;IACxC;IACA,KAAK;IACL;IACA,EAAC;AACD;AACA;IACA,KAAK,CAAC,qBAAqB,GAAG,UAAU,IAAI,GAAG;IAC/C;IACA;IACA;IACA,IAAI,IAAI,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC;IACzB,IAAI,IAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;AAChC;IACA;IACA,IAAI,KAAK,CAAC,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,KAAK,EAAE,CAAC,GAAG,KAAK,GAAG;IAClD,QAAQ,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC;IACvB,QAAQ,MAAM,GAAG,CAAC,CAAC,KAAK,CAAC;AACzB;IACA,QAAQ,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,KAAK,CAAC,KAAK,KAAK,CAAC,GAAG;IACjE;IACA,YAAY,KAAK,CAAC,mBAAmB,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC;IACzD,YAAY,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC;IAClC,YAAY,CAAC,GAAG,MAAM,CAAC;IACvB,YAAY,MAAM,GAAG,CAAC,CAAC,KAAK,CAAC;IAC7B,SAAS;IACT,QAAQ,IAAI,MAAM,CAAC,KAAK,KAAK,CAAC,GAAG;IACjC;IACA,YAAY,IAAI,MAAM,KAAK,CAAC,GAAG;IAC/B,gBAAgB,IAAI,MAAM,KAAK,KAAK,IAAI,MAAM,KAAK,KAAK,CAAC,GAAG,GAAG,EAAE,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE;IACtF,gBAAgB,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,EAAE,CAAC;IAC3C,aAAa;IACb,YAAY,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,KAAK,CAAC,GAAG,GAAG,EAAE,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE;IACxE,YAAY,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC;IAClC,SAAS;IACT,KAAK;IACL,EAAC;AACD;IACA,KAAK,CAAC,aAAa,GAAG,UAAU,IAAI,GAAG;IACvC;IACA;IACA;IACA;IACA,IAAI,IAAI,EAAE,CAAC;IACX,IAAI,IAAI,CAAC,EAAE,KAAK,CAAC;IACjB,IAAI,IAAI,WAAW,GAAG,CAAC,CAAC;AACxB;IACA,IAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;IAC5B,IAAI,KAAK,CAAC,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI,GAAG;IACnD,QAAQ,WAAW,EAAE,CAAC;IACtB,KAAK;IACL;IACA,IAAI,WAAW,IAAI,CAAC,CAAC;AACrB;IACA,IAAI,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG,IAAI,SAAS,EAAE,WAAW,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC;IAC9D;AACA;IACA,IAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;IAC5B,IAAI,KAAK,CAAC,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI,GAAG;IACnD,QAAQ,CAAC,CAAC,QAAQ,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC;IACpC;IACA;IACA,KAAK;AACL;IACA,IAAI,IAAI,CAAC,KAAK,KAAK,EAAE;IACrB,QAAQ,OAAO,KAAK,CAAC;IACrB,KAAK;AACL;IACA,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACd;IACA,IAAI,OAAO,IAAI,CAAC;IAChB,EAAC;AACD;AACA;IACA,KAAK,CAAC,aAAa,GAAG,UAAU,IAAI,GAAG;IACvC,IAAI,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC;IACnB,EAAC;AACD;AACA;IACA,KAAK,CAAC,qBAAqB,GAAG,UAAU,IAAI,EAAE,IAAI,GAAG;IACrD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAAC,EAAE,KAAK,CAAC;IACjB,IAAI,IAAI,CAAC,CAAC;AACV;IACA;IACA,IAAI,KAAK,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,IAAI,CAAC,KAAK,EAAE,CAAC,GAAG,KAAK,GAAG;IAC5D,QAAQ,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC;IACvB,QAAQ,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC;IACrB,QAAQ,MAAM,EAAE,CAAC,CAAC,KAAK,KAAK,CAAC,EAAE,CAAC;AAChC;IACA,QAAQ,IAAI,CAAC,CAAC,KAAK,CAAC,KAAK,KAAK,CAAC,GAAG;IAClC;IACA,YAAY,KAAK,CAAC,UAAU,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC;IAC3C,YAAY,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC;IAClC,SAAS;IACT,KAAK;IACL,IAAI,OAAO,IAAI,CAAC;IAChB,EAAC;AACD;IACA,KAAK,CAAC,eAAe,GAAG,UAAU,IAAI,GAAG;IACzC;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAAC,EAAE,KAAK,CAAC;AACjB;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,KAAK,CAAC,qBAAqB,EAAE,IAAI,EAAE,CAAC;IACxC,IAAI,KAAK,CAAC,KAAK,CAAC,aAAa,EAAE,IAAI,EAAE,GAAG,OAAO,KAAK,CAAC;IACrD,IAAI,KAAK,CAAC,YAAY,EAAE,IAAI,EAAE,CAAC;AAC/B;IACA,IAAI,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,UAAU,EAAE,MAAM,IAAI,GAAG;IACjD,QAAQ,UAAU;IAClB,YAAY,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC;IAClC,YAAY,IAAI,KAAK,KAAK,IAAI,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE,MAAM;AACnE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,YAAY,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,UAAU,EAAE,CAAC;IACzC,YAAY,KAAK,CAAC,mBAAmB,EAAE,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE,KAAK,CAAC,MAAM,EAAE,CAAC;IACtE,SAAS;IACT,QAAQ,KAAK,CAAC,UAAU,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC;IACpC,KAAK;AACL;IACA;IACA,IAAI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;IAC7C,IAAI,KAAK,CAAC,UAAU,EAAE,IAAI,EAAE,CAAC;IAC7B,IAAI,KAAK,CAAC,YAAY,EAAE,IAAI,EAAE,CAAC;IAC/B,IAAI,KAAK,CAAC,aAAa,EAAE,IAAI,EAAE,CAAC;AAChC;IACA,IAAI,KAAK,CAAC,KAAK,CAAC,qBAAqB,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,GAAG,OAAO,KAAK,CAAC;IACxE,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;AACtB;IACA,IAAI,OAAO,IAAI,CAAC;IAChB,EAAC;AACD;AACA;IACA,SAAS,UAAU,GAAG;AACtB;IACA;IACA,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB;AACA;IACA;AACA;IACA,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IAClC,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IACjC,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;AACjC;IACA,IAAI,IAAI,CAAC,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IAC3B,IAAI,IAAI,CAAC,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;AAC3B;IACA;IACA,IAAI,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC,WAAW,CAAC;AACzC;IACA,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,IAAI,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC;IACnB,IAAI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;AACtB;IACA,IAAI,IAAI,CAAC,kBAAkB,GAAG,CAAC,CAAC;AAChC;IACA,IAAI,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;IACvB,IAAI,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;IAC5B,IAAI,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;IACzB,IAAI,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;IACvB,IAAI,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;IAC1B,CACA;IACA,UAAU,CAAC,SAAS,GAAG;AACvB;IACA,IAAI,IAAI,EAAE,SAAS,CAAC,EAAE,CAAC,EAAE;IACzB,QAAQ,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IACnD,KAAK;AACL;IACA,IAAI,UAAU,EAAE,UAAU,CAAC,GAAG;IAC9B,QAAQ,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACpD,QAAQ,MAAM,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC;IAC5B,QAAQ,GAAG,GAAG,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC;IAC/B,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC;IACpB,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC;IACpB,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC;IACpB,KAAK;AACL;IACA,IAAI,SAAS,EAAE,UAAU,CAAC,GAAG;IAC7B,QAAQ,IAAI,CAAC,GAAG,CAAC,CAAC;IAClB,QAAQ,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE;IACxD,QAAQ,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE;IACxD,QAAQ,OAAO,CAAC,CAAC;IACjB,KAAK;AACL;IACA,IAAI,cAAc,EAAE,UAAU,IAAI;IAClC,IAAI;IACJ,QAAQ,IAAI,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC;IACtB,QAAQ,IAAI,CAAC,EAAE,KAAK,EAAE,OAAO,CAAC;IAC9B,QAAQ,IAAI,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5F,QAAQ,IAAI,OAAO,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,OAAO,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnE,QAAQ,IAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;IACpC,QAAQ,IAAI,CAAC,CAAC;AACd;IACA,QAAQ,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC;IACvB,QAAQ,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG;IACjC,YAAY,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC5B,YAAY,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC1B,YAAY,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC3B,YAAY,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC1B,YAAY,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC3B,SAAS;AACT;IACA,QAAQ,KAAK,CAAC,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI,GAAG;IACvD,YAAY,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG;IACrC,gBAAgB,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAChC,gBAAgB,IAAI,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE;IACtE,gBAAgB,IAAI,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE;IACtE,aAAa;IACb,SAAS;AACT;IACA;IACA;IACA;IACA,QAAQ,CAAC,GAAG,CAAC,CAAC;IACd,QAAQ,IAAI,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE;IACtE,QAAQ,IAAI,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE;IACtE,QAAQ,IAAI,MAAM,CAAC,CAAC,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,GAAG;IACrC;IACA,YAAY,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAClD,YAAY,OAAO;IACnB,SAAS;AACT;IACA;IACA;IACA;IACA,QAAQ,OAAO,GAAG,CAAC,CAAC;IACpB,QAAQ,EAAE,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;IACxB,QAAQ,EAAE,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;IACxB,QAAQ,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC5C,QAAQ,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC5C,QAAQ,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC5C,QAAQ,KAAK,CAAC,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI,GAAG;IACvD,YAAY,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC/C,YAAY,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC/C,YAAY,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC/C,YAAY,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACjD,YAAY,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACjD,YAAY,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACjD,YAAY,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC9E,YAAY,IAAI,KAAK,GAAG,OAAO,GAAG;IAClC,gBAAgB,OAAO,GAAG,KAAK,CAAC;IAChC,gBAAgB,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;IACnC,gBAAgB,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;IACnC,gBAAgB,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;IACnC,aAAa;IACb,SAAS;AACT;IACA,QAAQ,IAAI,OAAO,IAAI,CAAC,GAAG;IAC3B;IACA,YAAY,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC5C,YAAY,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC;IACzC,SAAS;IACT,KAAK;AACL;IACA,IAAI,iBAAiB,EAAE,WAAW;IAClC,QAAQ,IAAI,IAAI,CAAC;IACjB,QAAQ,IAAI,CAAC,EAAE,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;IACvC,QAAQ,IAAI,CAAC,EAAE,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;IACvC,QAAQ,IAAI,CAAC,CAAC;AACd;IACA;IACA;IACA;IACA,QAAQ,IAAI,GAAG,CAAC,CAAC;IACjB,QAAQ,KAAK,CAAC,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI,GAAG;IACvD,YAAY,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC;IACzB,YAAY,IAAI,CAAC,CAAC,OAAO,IAAI,CAAC,GAAG,SAAS;IAC1C,YAAY,GAAG;IACf,gBAAgB,IAAI,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAClE,gBAAgB,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC;IAC5B,aAAa,QAAQ,CAAC,KAAK,CAAC,CAAC,MAAM,GAAG;IACtC,SAAS;IACT,QAAQ,IAAI,IAAI,GAAG,CAAC,GAAG;IACvB;IACA,YAAY,KAAK,CAAC,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI,GAAG;IAC3D,gBAAgB,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;IAC5B,aAAa;IACb,YAAY,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC5C,YAAY,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC5C,YAAY,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC5C,SAAS;IACT,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA,IAAI,eAAe,EAAE,WAAW;IAChC,QAAQ,IAAI,CAAC,EAAE,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;IACvC,QAAQ,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3B,QAAQ,IAAI,KAAK,EAAE,KAAK,CAAC;IACzB,QAAQ,IAAI,CAAC,EAAE,KAAK,EAAE,cAAc,GAAG,KAAK,CAAC;AAC7C;IACA,QAAQ,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IACjC,QAAQ,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IACjC,QAAQ,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IACjC,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG;IACpE,YAAY,IAAI,CAAC,cAAc,EAAE,IAAI,EAAE,CAAC;IACxC,YAAY,cAAc,GAAG,IAAI,CAAC;IAClC,SAAS;IACT,QAAQ,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;IAC3B,QAAQ,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;IAC3B,QAAQ,CAAC,GAAG,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,CAAC;AACnC;IACA;IACA;IACA;AACA;IACA;AACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,QAAQ,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACrB,QAAQ,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC;IAC7B,QAAQ,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC;AAC7B;IACA,QAAQ,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACrB,QAAQ,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC;IAC7B,QAAQ,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC;IACpD;AACA;IACA;IACA,QAAQ,KAAK,CAAC,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI,GAAG;IACvD,YAAY,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,CAAC;IAC/C,YAAY,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,CAAC;IAC/C,SAAS;IACT,QAAQ,IAAI,cAAc,GAAG;IAC7B,YAAY,IAAI,CAAC,iBAAiB,EAAE,CAAC;IACrC,SAAS;AACT;IACA;IACA,QAAQ,KAAK,GAAG,IAAI,CAAC;IACrB,QAAQ,KAAK,CAAC,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI,GAAG;IACvD,YAAY,IAAI,KAAK,EAAE;IACvB,gBAAgB,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAClD,gBAAgB,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAClD,gBAAgB,KAAK,GAAG,KAAK,CAAC;IAC9B,aAAa,MAAM;IACnB,gBAAgB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC3D,gBAAgB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC3D,gBAAgB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC3D,gBAAgB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC3D,aAAa;IACb,SAAS;IACT,KAAK;AACL;IACA,IAAI,WAAW,EAAE,SAAS,IAAI,CAAC,IAAI,EAAE;IACrC,QAAQ,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC;IACrC,QAAQ,IAAI,CAAC,GAAG,CAAC,OAAO,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC;IAC7C,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,qBAAqB,EAAE,UAAU,IAAI,EAAE,IAAI,GAAG;IAClD,QAAQ,IAAI,EAAE,EAAE,EAAE,CAAC;AACnB;IACA;IACA;IACA;IACA;IACA;IACA,QAAQ,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC;IACzB,QAAQ,MAAM,EAAE,EAAE,CAAC,KAAK,KAAK,EAAE,IAAI,EAAE,CAAC,KAAK,CAAC,KAAK,KAAK,EAAE,EAAE,CAAC;AAC3D;IACA,QAAQ,OAAO,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,KAAK;IAC5D,YAAY,CAAC;IACb,QAAQ,OAAO,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,KAAK;IAC5D,YAAY,CAAC;IACb,QAAQ,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC;AACtB;IACA,QAAQ,OAAO,EAAE,CAAC,KAAK,KAAK,EAAE,GAAG;IACjC,YAAY,IAAI,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE;IAChD;IACA;IACA;IACA;IACA,gBAAgB,OAAO,EAAE,CAAC,KAAK,KAAK,EAAE,KAAK,IAAI,CAAC,YAAY,EAAE,EAAE,CAAC,KAAK,EAAE;IACxE,mBAAmB,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,GAAG,EAAE,EAAE;IAC3E,oBAAoB,IAAI,YAAY,GAAG,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC,KAAK,EAAE,EAAE,EAAE,CAAC;IACpE;IACA,oBAAoB,EAAE,GAAG,YAAY,CAAC,GAAG,CAAC;IAC1C,iBAAiB;IACjB,gBAAgB,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC;IAC9B,aAAa,MAAM;IACnB;IACA,gBAAgB,OAAO,EAAE,CAAC,KAAK,IAAI,EAAE,KAAK,IAAI,CAAC,aAAa,EAAE,EAAE,CAAC,KAAK,EAAE;IACxE,mBAAmB,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,GAAG,EAAE,EAAE;IAC3E,oBAAoB,IAAI,YAAY,GAAG,IAAI,CAAC,OAAO,EAAE,EAAE,EAAE,EAAE,CAAC,KAAK,EAAE,CAAC;IACpE;IACA,oBAAoB,EAAE,GAAG,YAAY,CAAC,GAAG,CAAC;IAC1C,iBAAiB;IACjB,gBAAgB,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC;IAC9B,aAAa;IACb,SAAS;AACT;IACA;IACA;IACA;IACA,QAAQ,MAAM,EAAE,EAAE,CAAC,KAAK,KAAK,EAAE,EAAE,CAAC;IAClC,QAAQ,OAAO,EAAE,CAAC,KAAK,CAAC,KAAK,KAAK,EAAE,GAAG;IACvC,YAAY,IAAI,YAAY,GAAG,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC,KAAK,EAAE,EAAE,EAAE,CAAC;IAC5D;IACA,YAAY,EAAE,GAAG,YAAY,CAAC,GAAG,CAAC;IAClC,SAAS;AACT;IACA,QAAQ,OAAO,IAAI,CAAC;IACpB,KAAK;AACL;AACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,mBAAmB,EAAE,UAAU,IAAI,GAAG;IAC1C,QAAQ,IAAI,CAAC,EAAE,IAAI,CAAC;AACpB;IACA;IACA,QAAQ,KAAK,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,IAAI,CAAC,KAAK,EAAE,CAAC,GAAG,IAAI,GAAG;IAC/D;IACA,YAAY,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC;IAC1B,YAAY,IAAI,CAAC,CAAC,MAAM,GAAG;IAC3B,gBAAgB,KAAK,CAAC,IAAI,CAAC,qBAAqB,EAAE,IAAI,EAAE,CAAC,EAAE,GAAG,OAAO,KAAK,CAAC;IAC3E,aAAa;IACb,SAAS;AACT;IACA,QAAQ,OAAO,IAAI,CAAC;IACpB,KAAK;AACL;AACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,gBAAgB,EAAE,UAAU,IAAI,GAAG;IACvC,QAAQ,IAAI,CAAC,EAAE,IAAI,CAAC;AACpB;IACA;IACA,QAAQ,KAAK,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,IAAI,CAAC,KAAK,EAAE,CAAC,GAAG,IAAI,GAAG;IAC/D;IACA,YAAY,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC;IAC1B,YAAY,IAAI,EAAE,CAAC,CAAC,MAAM,GAAG;IAC7B,gBAAgB,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC;IAClC,aAAa;IACb,SAAS;IACT,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,iBAAiB,EAAE,UAAU,IAAI,EAAE,KAAK,EAAE,gBAAgB,GAAG;IACjE,QAAQ,IAAI,CAAC,EAAE,KAAK,CAAC;AACrB;IACA,QAAQ,KAAK,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,IAAI,CAAC,KAAK,EAAE,CAAC,GAAG,KAAK,GAAG;IAChE,YAAY,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC;IAC3B,YAAY,IAAI,CAAC,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG;AACpD;IACA;IACA,gBAAgB,CAAC,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,IAAI,KAAK,GAAG,CAAC,KAAK,CAAC;IAC9D,aAAa,MAAM;AACnB;IACA;IACA,gBAAgB,IAAI,EAAE,gBAAgB,GAAG;IACzC,oBAAoB,CAAC,CAAC,OAAO,GAAG,CAAC,CAAC;IAClC,iBAAiB,MAAM;IACvB,oBAAoB,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC;IACrC,iBAAiB;IACjB,aAAa;IACb,SAAS;IACT,KAAK;AACL;IACA,IAAI,iBAAiB,EAAE,SAAS,IAAI;IACpC,IAAI;IACJ,QAAQ,IAAI,CAAC,IAAI,CAAC,KAAK;IACvB,YAAY,OAAO,CAAC,CAAC,CAAC;IACtB,QAAQ,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM;IAC9B,YAAY,OAAO,CAAC,CAAC,CAAC;IACtB,QAAQ,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IAC5B,KAAK;AACL;IACA,IAAI,eAAe,EAAE,UAAU,IAAI,EAAE,WAAW,EAAE,QAAQ,EAAE,UAAU,GAAG;IACzE,QAAQ,IAAI,CAAC,CAAC;IACd,QAAQ,IAAI,CAAC,CAAC;IACd,QAAQ,IAAI,IAAI,CAAC;IACjB,QAAQ,IAAI,YAAY,GAAG,CAAC,CAAC;IAC7B,QAAQ,IAAI,cAAc,GAAG,CAAC,CAAC;IAC/B,QAAQ,IAAI,SAAS,EAAE,CAAC,CAAC;AAGzB;IACA;IACA;IACA,QAAQ,IAAI,QAAQ,GAAG,CAAC;IACxB,QAAQ;IACR,YAAY,IAAI,CAAC,gBAAgB,EAAE,QAAQ,EAAE,CAAC;IAC9C,SAAS;AACT;IACA;IACA,QAAQ,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,IAAI,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI;IAC/D,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AACrB;IACA;IACA,QAAQ,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI;IAC9D,QAAQ;IACR,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACrB,YAAY,IAAI,CAAC,CAAC,CAAC,MAAM,GAAG,SAAS;AACrC;IACA,YAAY,IAAI,GAAG,CAAC,CAAC,MAAM,CAAC;IAC5B,YAAY,SAAS,GAAG,CAAC,CAAC;IAC1B,YAAY;IACZ,YAAY;IACZ,gBAAgB,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC;IAC7B,gBAAgB,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;IAC/B,gBAAgB;IAChB,oBAAoB,CAAC,CAAC,CAAC,GAAG,cAAc,CAAC;IACzC,oBAAoB,cAAc,EAAE,CAAC;IACrC,iBAAiB;IACjB,gBAAgB,SAAS,EAAE,CAAC;IAC5B,gBAAgB,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;IAClC,aAAa;IACb,mBAAmB,IAAI,KAAK,CAAC,CAAC,MAAM,EAAE;AACtC;IACA,YAAY,MAAM,EAAE,SAAS,IAAI,QAAQ,EAAE,CAAC;AAC5C;IACA,YAAY,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC;IAC/B,YAAY,EAAE,YAAY,CAAC;IAC3B,SAAS;AACT;IACA,QAAQ,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACzC,QAAQ,IAAI,WAAW,IAAI,KAAK,CAAC,kBAAkB;IACnD,YAAY,YAAY,IAAI,CAAC,CAAC;IAC9B;IACA;IACA;IACA;IACA;IACA;IACA;IACA,QAAQ,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;IAC3B,QAAQ,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,YAAY,GAAG,QAAQ,CAAC;AACvD;IACA,QAAQ,IAAI,CAAC,WAAW,GAAG,cAAc,CAAC;IAC1C;IACA;IACA;IACA;IACA;IACA;IACA;IACA,QAAQ,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;IAC3B,QAAQ,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,cAAc,GAAG,UAAU,CAAC;AAC3D;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,QAAQ,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;IAChC,QAAQ,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,cAAc,CAAC;AACnD;AACA;IACA;IACA,QAAQ,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,IAAI,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI;IAC/D,QAAQ;IACR,YAAY,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IAC1B,YAAY;IACZ;IACA,gBAAgB,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC;IAC3C,gBAAgB,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IACnD,gBAAgB,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IACnD,gBAAgB,KAAK,UAAU,GAAG,CAAC;IACnC,oBAAoB,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IACvD;IACA,gBAAgB,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;IAChD,aAAa;IACb,SAAS;AACT;IACA;IACA,QAAQ,IAAI,GAAG,GAAG,CAAC,CAAC;IACpB,QAAQ,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,IAAI,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI;IAC/D,QAAQ;IACR,YAAY,KAAK,CAAC,CAAC,CAAC,MAAM,GAAG,SAAS;AACtC;IACA;IACA,YAAY,IAAI,GAAG,CAAC,CAAC,MAAM,CAAC;IAC5B,YAAY,SAAS,GAAG,CAAC,CAAC;IAC1B,YAAY;IACZ,YAAY;IACZ,gBAAgB,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC;IAC7B,gBAAgB,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC3C,gBAAgB,SAAS,EAAE,CAAC;IAC5B,gBAAgB,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;IAClC,aAAa;IACb,mBAAmB,IAAI,KAAK,CAAC,CAAC,MAAM,EAAE;IACtC;IACA,YAAY,KAAK,CAAC,GAAG,SAAS,EAAE,CAAC,GAAG,QAAQ,EAAE,EAAE,CAAC;IACjD,gBAAgB,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;AAC1C;IACA;IACA,YAAY,KAAK,WAAW,IAAI,KAAK,CAAC,kBAAkB;IACxD,YAAY;IACZ,gBAAgB,IAAI,GAAG,CAAC,CAAC,MAAM,CAAC;IAChC,gBAAgB;IAChB,gBAAgB;IAChB,oBAAoB,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,iBAAiB,EAAE,IAAI,EAAE,CAAC;IAC1E,oBAAoB,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;IACtC,iBAAiB;IACjB,uBAAuB,IAAI,KAAK,CAAC,CAAC,MAAM,EAAE;IAC1C;IACA,gBAAgB,KAAK,CAAC,GAAG,SAAS,EAAE,CAAC,GAAG,QAAQ,EAAE,EAAE,CAAC;IACrD,oBAAoB,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;IAC9C,aAAa;IACb,SAAS;IACT,KAAK;AACL;IACA;IACA,IAAI,eAAe,EAAE,UAAU,IAAI,EAAE,UAAU,GAAG;IAClD,QAAQ,IAAI,CAAC,CAAC;IACd,QAAQ,IAAI,IAAI,CAAC;IACjB,QAAQ,IAAI,KAAK,CAAC;IAIlB,QAAQ,IAAI,SAAS,GAAG,CAAC,CAAC;IAC1B,QAAQ,IAAI,SAAS,GAAG,CAAC,CAAC;AAC1B;IACA,QAAQ,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;IAC7B,QAAQ,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;AAC9B;IACA,QAAQ,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,IAAI,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI;IAC/D,QAAQ;IACR,YAAY,KAAK,CAAC,CAAC,CAAC,MAAM,GAAG,SAAS;AACtC;IACA,YAAY,KAAK,GAAG,IAAI,GAAG,CAAC,CAAC,MAAM,CAAC;IACpC,YAAY;IACZ,YAAY;IACZ,gBAAgB,IAAI,CAAC,WAAW,EAAE,CAAC;IACnC,gBAAgB,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;IAClC,aAAa;IACb,oBAAoB,IAAI,KAAK,KAAK,GAAG;AACrC;IACA,YAAY,IAAI,CAAC,YAAY,EAAE,CAAC;IAChC,SAAS;AACT;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,QAAQ,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;IAC3B,QAAQ,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;AACrD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,QAAQ,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;IAC3B,QAAQ,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;AAC7D;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,QAAQ,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;IAChC,QAAQ,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC;AACrD;IACA,QAAQ,IAAI,EAAE,GAAG,CAAC,CAAC;IACnB,QAAQ,IAAI,GAAG,GAAG,CAAC,CAAC;IACpB,QAAQ,IAAI,GAAG,GAAG,CAAC,CAAC;IACpB,QAAQ,SAAS,GAAG,CAAC,CAAC;AACtB;IACA,QAAQ,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,IAAI,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI;IAC/D,QAAQ;IACR,YAAY,KAAK,CAAC,CAAC,CAAC,MAAM,GAAG,SAAS;AACtC;IACA,YAAY,SAAS,GAAG,CAAC,CAAC;IAC1B,YAAY,KAAK,GAAG,IAAI,GAAG,CAAC,CAAC,MAAM,CAAC;IACpC,YAAY;IACZ,YAAY;IACZ,gBAAgB,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IACzD,gBAAgB,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IACzD,gBAAgB,KAAK,UAAU,GAAG,CAAC;IACnC,oBAAoB,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC7D,gBAAgB,IAAI,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC;IACzD,gBAAgB,SAAS,EAAE,CAAC;IAC5B,gBAAgB,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;IAClC,aAAa;IACb,oBAAoB,IAAI,KAAK,KAAK,GAAG;AACrC;IACA,YAAY,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,GAAG,SAAS,CAAC;IAC7C,YAAY,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,GAAG,SAAS,CAAC;AAC7C;IACA,YAAY,SAAS,IAAI,SAAS,CAAC;IACnC,SAAS;IACT,KAAK;AACL;IACA,IAAI,UAAU,EAAE,UAAU,IAAI,EAAE,QAAQ;IACxC,IAAI;IACJ,QAAQ,IAAI,CAAC,CAAC;IACd,QAAQ,IAAI,CAAC,CAAC;AACd;IACA,QAAQ,KAAK,IAAI,CAAC,IAAI,KAAK,IAAI;IAC/B,YAAY,IAAI,CAAC,IAAI,GAAG,IAAI,QAAQ,EAAE,CAAC;IACvC;IACA;IACA;IACA;AACA;IACA,QAAQ,KAAK,IAAI,GAAG,CAAC;IACrB,YAAY,IAAI,GAAG,CAAC,CAAC;IACrB,QAAQ,KAAK,IAAI,GAAG,CAAC;IACrB,YAAY,IAAI,GAAG,CAAC,CAAC;AACrB;IACA,QAAQ,CAAC,GAAG,IAAI,CAAC;AACjB;IACA,QAAQ,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,IAAI,IAAI;IAClD,QAAQ;IACR,YAAY,IAAI,CAAC,IAAI,IAAI,GAAG;IAC5B;IACA,gBAAgB,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;IACzC;IACA;IACA;IACA;IACA,gBAAgB,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC;IAC7C,aAAa,MAAM;IACnB;IACA;IACA;IACA,gBAAgB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC;IACzC,gBAAgB,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC;IAC5B,aAAa;AACb;IACA;IACA,YAAY,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5C,YAAY,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5C,YAAY,KAAK,IAAI,GAAG,CAAC;IACzB,gBAAgB,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAChD;IACA,gBAAgB,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;IACtC;IACA,YAAY,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;AAClD;IACA;IACA;IACA;IACA;IACA;IACA,YAAY,CAAC,CAAC,OAAO,GAAG,CAAC,CAAC;IAC1B,YAAY,CAAC,CAAC,GAAG,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC;IAC/B,SAAS;IACT,KAAK;AACL;IACA;IACA,IAAI,SAAS,EAAE,UAAU,WAAW,EAAE,WAAW,EAAE,QAAQ,EAAE,UAAU,EAAE,MAAM,GAAG;IAClF,QAAQ,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;IAC3B,QAAQ,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;IAC3B,QAAQ,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;AAChC;IACA,QAAQ,IAAI,CAAC,kBAAkB,GAAG,CAAC,CAAC;AACpC;IACA,QAAQ,IAAI,MAAM;IAClB,QAAQ;IACR,YAAY,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IACvC,YAAY,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IACvC,YAAY,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IACvC,SAAS;AACT;IACA,QAAQ,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;AACvC;IACA,QAAQ,IAAI,UAAU,GAAG,CAAC;IAC1B,YAAY,UAAU,GAAG,CAAC,CAAC;IAC3B,QAAQ,IAAI,UAAU,GAAG,CAAC;IAC1B,YAAY,UAAU,GAAG,CAAC,CAAC;AAC3B;IACA;IACA;IACA;IACA;AACA;IACA,QAAQ,IAAI,CAAC,IAAI,CAAC,IAAI;IACtB,QAAQ;IACR,YAAY,OAAO,KAAK,CAAC;IACzB,SAAS;AACT;IACA;IACA;IACA;IACA,QAAQ,IAAI,CAAC,eAAe,EAAE,CAAC;AAC/B;IACA;IACA;IACA;IACA;IACA;IACA;IACA,QAAQ,KAAK,CAAC,eAAe,EAAE,IAAI,EAAE,CAAC;AACtC;IACA,QAAQ,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;AAC7B;IACA;IACA;IACA;IACA;IACA,QAAQ,IAAI,WAAW,IAAI,KAAK,CAAC,iBAAiB,EAAE;IACpD,YAAY,IAAI,CAAC,iBAAiB,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC;IACpD,SAAS,MAAM;IACf,YAAY,IAAI,CAAC,mBAAmB,EAAE,IAAI,EAAE,CAAC;IAC7C,SAAS;IACT;AACA;IACA,QAAQ,IAAI,CAAC,KAAK,EAAE,CAAC;AACrB;IACA,QAAQ,IAAI,WAAW,IAAI,KAAK,CAAC,iBAAiB,EAAE;IACpD,YAAY,IAAI,CAAC,eAAe,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC;IACrD,SAAS;IACT;IACA,QAAQ;IACR,YAAY,IAAI,CAAC,eAAe,EAAE,IAAI,EAAE,WAAW,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC;IAC5E,SAAS;AACT;IACA;AACA;IACA,QAAQ,OAAO,IAAI,CAAC;IACpB,KAAK;IACL,CAAC;;IC/1GD;IACA;IACA;IACA;IACA;IACA,MAAM,aAAa,GAAG;IACtB,IAAI,IAAI,IAAI,MAAM;IAClB,IAAI,KAAK,GAAG,eAAe;IAC3B,IAAI,KAAK,GAAG,OAAO;IACnB,IAAI,MAAM,EAAE,gBAAgB;IAC5B,IAAI,KAAK,GAAG,KAAK;IACjB,IAAI,MAAM,EAAE,cAAc;IAC1B,IAAI,OAAO,EAAE,OAAO;IACpB,CAAC,CAAC;AACF;IACA;IACA;IACA;IACA;IACA;IACA,MAAM,UAAU,CAAC;IACjB;IACA;IACA;IACA;IACA;IACA,IAAI,WAAW,CAAC,KAAK,EAAE,SAAS,EAAE,IAAI,EAAE;IACxC,QAAQ,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC,WAAW,CAAC;IAC7C,QAAQ,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;IACnC,QAAQ,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC,OAAO,CAAC;IAC5C,QAAQ,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC,eAAe,CAAC;IAClD,QAAQ,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACzB,QAAQ,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IACnC,KAAK;AACL;IACA,IAAI,OAAO,eAAe,CAAC,KAAK,EAAE,IAAI,EAAE;IACxC,QAAQ,OAAO,IAAI,UAAU,CAAC,KAAK,CAAC,SAAS,EAAE,EAAE,KAAK,CAAC,WAAW,CAAC,SAAS,EAAE,EAAE,IAAI,CAAC,CAAC;IACtF,KAAK;AACL;IACA,IAAI,UAAU,CAAC,EAAE,CAAC,KAAK,EAAE;IACzB,QAAQ,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACtB,QAAQ,EAAE,CAAC,aAAa,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC,EAAE,KAAK,CAAC,WAAW,CAAC,CAAC;IAChE,KAAK;AACL;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAAC,EAAE,EAAE;IACb,QAAQ,MAAM,IAAI,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACnC;IACA,QAAQ,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;IAC1B,YAAY,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;IACzB,YAAY,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC,YAAY,EAAE,CAAC;IAC5C,YAAY,EAAE,CAAC,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IAC7C,YAAY,EAAE,CAAC,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,EAAE,EAAE,CAAC,WAAW,CAAC,CAAC;AAClE;IACA;IACA,YAAY,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;IACpC,SAAS,MAAM;IACf,YAAY,EAAE,CAAC,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IAC7C,SAAS;IACT,KAAK;AACL;IACA,IAAI,gBAAgB,CAAC,CAAC,EAAE,EAAE,OAAO,EAAE;IACnC,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACzD,YAAY,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IAC9C,YAAY,MAAM,WAAW,GAAG,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACrD,YAAY,IAAI,WAAW,KAAK,SAAS,EAAE;IAC3C,gBAAgB,EAAE,CAAC,uBAAuB,CAAC,WAAW,CAAC,CAAC;IACxD,aAAa;IACb,SAAS;IACT,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,uBAAuB,CAAC,EAAE,EAAE,OAAO,EAAE,YAAY,EAAE;IACvD,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACzD,YAAY,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IAC9C,YAAY,MAAM,WAAW,GAAG,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACrD;IACA,YAAY,IAAI,WAAW,KAAK,SAAS,EAAE;IAC3C,gBAAgB,EAAE,CAAC,mBAAmB;IACtC,oBAAoB,WAAW;IAC/B,oBAAoB,MAAM,CAAC,UAAU;IACrC,oBAAoB,EAAE,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAClD,oBAAoB,KAAK;IACzB,oBAAoB,IAAI,CAAC,SAAS,CAAC,eAAe;IAClD,oBAAoB,MAAM,CAAC,MAAM,IAAI,IAAI,CAAC,SAAS,CAAC,eAAe,GAAG,YAAY,IAAI,CAAC,CAAC;IACxF,iBAAiB,CAAC;IAClB,aAAa;IACb,SAAS;IACT,KAAK;AACL;IACA;IACA;IACA;IACA;IACA,IAAI,OAAO,GAAG;IACd,QAAQ,IAAI,IAAI,CAAC,MAAM,EAAE;IACzB,YAAY,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC9C,SAAS;IACT,KAAK;IACL,CAAC;AACD;IACA;IACA;IACA;IACA;IACA;IACA,UAAU,CAAC,UAAU,GAAG;IACxB,IAAI,MAAM,EAAE,cAAc;IAC1B,IAAI,OAAO,EAAE,sBAAsB;IACnC,CAAC;;IC7GD,MAAM,SAAS,GAAG;IAClB,IAAI,MAAM,EAAE,SAAS;IACrB,IAAI,OAAO,EAAE,UAAU;IACvB,IAAI,cAAc,EAAE,iBAAiB;IACrC,IAAI,OAAO,EAAE,UAAU;IACvB,IAAI,QAAQ,EAAE,WAAW;IACzB,IAAI,OAAO,EAAE,UAAU;IACvB,IAAI,QAAQ,EAAE,WAAW;IACzB,IAAI,SAAS,EAAE,YAAY;IAC3B,IAAI,SAAS,EAAE,YAAY;IAC3B,CAAC,CAAC;AACF;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA,MAAM,MAAM,CAAC;IACb;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,WAAW,CAAC,WAAW,EAAE,KAAK,EAAE;IACpC,QAAQ,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;IACxC,QAAQ,IAAI,CAAC,KAAK,GAAG,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;IACvC,QAAQ,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;IACpC,QAAQ,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;IACpC,QAAQ,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;IACpC,KAAK;IACL,CAAC;AACD;IACA,MAAM,gBAAgB,GAAG,GAAG,CAAC;IAC7B,MAAM,iBAAiB,GAAG,CAAC,CAAC;AAC5B;IACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA;IACA;IACA,MAAM,WAAW,CAAC;IAClB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,WAAW,CAAC,UAAU,EAAE,MAAM,EAAE;IACpC,QAAQ,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;AACnC;IACA,QAAQ,IAAI,UAAU,KAAK,SAAS,EAAE;IACtC;IACA,YAAY,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC,WAAW,CAAC;IACtD,YAAY,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;IAC5C,YAAY,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,GAAG,IAAI,CAAC,eAAe,CAAC;IAC/E,YAAY,IAAI,CAAC,aAAa,EAAE,CAAC;AACjC;IACA;IACA,SAAS,MAAM;IACf,YAAY,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC;IAC/B,YAAY,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC3B,SAAS;IACT,KAAK;AACL;IACA;IACA;IACA;IACA,IAAI,OAAO,SAAS,GAAG;IACvB,QAAQ,OAAO;IACf,YAAY,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO;IAC3C,YAAY,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,SAAS;IACpE,YAAY,eAAe,EAAE,IAAI,CAAC,SAAS,CAAC,eAAe;IAC3D,SAAS,CAAC;IACV,KAAK;AACL;IACA;IACA;IACA;IACA,IAAI,SAAS,CAAC,aAAa,EAAE;IAC7B;AACA;IACA,QAAQ,IAAI,CAAC,KAAK,EAAE,CAAC;AACrB;IACA,QAAQ,IAAI,aAAa,EAAE;IAC3B,YAAY,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;IACtC,YAAY,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACjD,SAAS;IACT,QAAQ,OAAO;IACf,YAAY,MAAM,EAAE,IAAI,CAAC,MAAM;IAC/B,YAAY,WAAW,EAAE,IAAI,CAAC,WAAW;IACzC,SAAS,CAAC;IACV,KAAK;AACL;IACA;IACA;IACA;IACA;IACA,IAAI,GAAG,CAAC,KAAK,EAAE;IACf;IACA,QAAQ,OAAO,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAChD,KAAK;AACL;IACA;IACA;IACA;IACA,IAAI,KAAK,GAAG;IACZ,QAAQ,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,QAAQ,EAAE;IAC3C,YAAY,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC;IACxC,YAAY,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,CAAC;IAC7F,YAAY,IAAI,CAAC,aAAa,EAAE,CAAC;IACjC,SAAS;IACT,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,MAAM,CAAC,CAAC,EAAE;IACd;AACA;IACA,QAAQ,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;IACxB,QAAQ,IAAI,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE;IAC/B,YAAY,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,GAAG,iBAAiB,CAAC,EAAE,gBAAgB,CAAC,CAAC;IACzG,YAAY,IAAI,CAAC,WAAW,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,CAAC;AACrF;IACA,YAAY,MAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC;IAC7C,YAAY,IAAI,CAAC,aAAa,EAAE,CAAC;IACjC,YAAY,IAAI,aAAa,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;IAC7D,SAAS;IACT,KAAK;AACL;IACA;IACA;IACA;IACA,IAAI,aAAa,GAAG;IACpB,QAAQ,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,UAAU,EAAE;IAC5C;IACA,YAAY,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACjF,SAAS;IACT,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,OAAO,CAAC,UAAU,EAAE,QAAQ,EAAE;IAClC;AACA;IACA,QAAQ,MAAM,KAAK,GAAG,EAAE,CAAC;AACzB;IACA,QAAQ,KAAK,IAAI,CAAC,GAAG,UAAU,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,EAAE;IACpD,YAAY,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACvC,YAAY,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC/B,SAAS;AACT;IACA,QAAQ,OAAO,KAAK,CAAC;IACrB,KAAK;IACL,CAAC;AACD;IACA,MAAM,oBAAoB,GAAG,EAAE,CAAC;AAChC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA,SAAS,qBAAqB,CAAC,OAAO,EAAE,IAAI,EAAE,UAAU;IACxD,EAAE,SAAS,EAAE;AACb;IACA,IAAI,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;AACxC;IACA,IAAI,IAAI,oBAAoB,CAAC,GAAG,CAAC,EAAE;IACnC,QAAQ,OAAO,oBAAoB,CAAC,GAAG,CAAC,CAAC;IACzC,KAAK;AACL;IACA,IAAI,SAAS,GAAG,CAAC,OAAO,CAAC,SAAS,KAAK,SAAS;IAChD,MAAM,CAAC,GAAG,OAAO,CAAC,SAAS,CAAC;AAC5B;IACA,IAAI,IAAI,MAAM,GAAG,CAAC,CAAC;IACnB,IAAI,IAAI,OAAO,GAAG,CAAC,CAAC;IACpB,IAAI,MAAM,SAAS,GAAG,CAAC,OAAO,CAAC,CAAC;AAChC;IACA,IAAI,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,KAAK;IACpD;IACA;AACA;IACA,QAAQ,IAAI,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAC5E;IACA,QAAQ,MAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC7C,QAAQ,MAAM,YAAY,GAAG,MAAM,GAAG,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC,CAAC;IACnF,QAAQ,MAAM,UAAU,GAAG,MAAM,CAAC,UAAU,IAAI,CAAC,CAAC;AAClD;IACA,QAAQ,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IAC9C,QAAQ,MAAM,IAAI,QAAQ,GAAG,UAAU,CAAC;AACxC;IACA,QAAQ,OAAO;IACf,YAAY,IAAI,EAAE,MAAM,CAAC,IAAI;IAC7B,YAAY,IAAI,EAAE,MAAM,CAAC,IAAI;IAC7B,YAAY,UAAU,EAAE,UAAU;IAClC,YAAY,MAAM,EAAE,YAAY;IAChC,SAAS,CAAC;IACV,KAAK,CAAC,CAAC;AACP;IACA,IAAI,MAAM,IAAI,GAAG,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,CAAC;AAC7D;IACA,IAAI,MAAM,UAAU,SAAS,MAAM,CAAC,EAAE;AACtC;IACA,IAAI,UAAU,CAAC,SAAS,CAAC,SAAS,GAAG,SAAS,CAAC;IAC/C,IAAI,UAAU,CAAC,SAAS,CAAC,IAAI,GAAG,IAAI,CAAC;AACrC;IACA,IAAI,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;IAClC,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC,EAAE,EAAE;IACpD,YAAY,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,IAAI,MAAM,CAAC,UAAU,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;IAC1E,YAAY,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC,SAAS,EAAE,IAAI,EAAE;IAC9D,gBAAgB,GAAG,EAAE,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC;IAC5C,gBAAgB,GAAG,EAAE,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC;IAC5C,aAAa,CAAC,CAAC;IACf,SAAS;IACT,KAAK;AACL;IACA,IAAI,MAAM,eAAe,SAAS,WAAW,CAAC,EAAE;AAChD;IACA,IAAI,eAAe,CAAC,SAAS,CAAC,OAAO,GAAG,OAAO,CAAC;IAChD,IAAI,eAAe,CAAC,SAAS,CAAC,UAAU,GAAG,UAAU,CAAC;IACtD,IAAI,eAAe,CAAC,SAAS,CAAC,eAAe,GAAG,IAAI,CAAC;IACrD,IAAI,eAAe,CAAC,SAAS,CAAC,WAAW,GAAG,iBAAiB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IAC7E,IAAI,eAAe,CAAC,SAAS,CAAC,UAAU,GAAG,SAAS,CAAC;AACrD;IACA,IAAI,oBAAoB,CAAC,GAAG,CAAC,GAAG,eAAe,CAAC;AAChD;IACA,IAAI,OAAO,eAAe,CAAC;IAC3B,CAAC;AACD;IACA,SAAS,KAAK,CAAC,MAAM,EAAE,IAAI,EAAE;IAC7B,IAAI,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC;IAC3C,CAAC;AACD;IACA,SAAS,MAAM,CAAC,IAAI,EAAE;IACtB,IAAI,OAAO,SAAS,CAAC,IAAI,CAAC,CAAC,iBAAiB,CAAC;IAC7C,CAAC;AACD;IACA,SAAS,gBAAgB,CAAC,IAAI,EAAE;IAChC,IAAI,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC;IAC9B,CAAC;AACD;IACA;IACA;IACA;IACA;IACA;IACA,SAAS,iBAAiB,CAAC,OAAO,EAAE,eAAe,EAAE;IACrD,IAAI,MAAM,aAAa,GAAG,EAAE,CAAC;IAC7B,IAAI,MAAM,QAAQ,GAAG,EAAE,CAAC;IACxB,IAAI,IAAI,IAAI;IACZ,QAAQ,wBAAwB;IAChC,QAAQ,iCAAiC,CAAC;AAC1C;IACA,IAAI,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;IAClC,QAAQ,MAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACzC;IACA;IACA;IACA,QAAQ,IAAI,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;IAC7C,YAAY,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACrC,YAAY,IAAI,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,eAAe,GAAG,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC9F,SAAS;AACT;IACA,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC,EAAE,EAAE;IACpD;IACA;IACA,YAAY,MAAM,OAAO,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;IAClD;IACA;IACA;IACA;IACA,YAAY,MAAM,KAAK,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,GAAG,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3F,YAAY,IAAI,IAAI,CAAC,KAAK,EAAE,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;IACtF,YAAY,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACnC,SAAS;IACT,KAAK;AACL;IACA,IAAI,IAAI,IAAI,WAAW,CAAC;AACxB;IACA,IAAI,OAAO,IAAI,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,CAAC;IACnD,CAAC;AACD;IACA,SAAS,2BAA2B,CAAC,MAAM,EAAE,SAAS,EAAE;IACxD,IAAI,MAAM,aAAa,GAAG,CAAC,SAAS,EAAE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACvE,IAAI,MAAM,eAAe,GAAG,CAAC,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;IACzF,IAAI,MAAM,KAAK,GAAG,CAAC,EAAE,aAAa,CAAC,GAAG,EAAE,eAAe,CAAC,CAAC,CAAC;IAC1D,IAAI,OAAO,CAAC,kBAAkB,EAAE,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;IAC1E,CAAC;AACD;IACA,SAAS,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE;IACjC,IAAI,OAAO,IAAI,QAAQ,CAAC,CAAC,OAAO,EAAE,2BAA2B,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7E,CAAC;AACD;IACA,SAAS,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE;IACjC,IAAI,OAAO,IAAI,QAAQ,CAAC,GAAG,EAAE,CAAC,EAAE,2BAA2B,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;IAC/E;;ICvXA;IACA;IACA;IACA;IACA;IACA,SAAS,sBAAsB,CAAC,UAAU,EAAE;IAC5C,IAAI,OAAO,qBAAqB,CAAC;IACjC,QAAQ,OAAO,EAAE,CAAC;IAClB,YAAY,IAAI,EAAE,QAAQ;IAC1B,YAAY,IAAI,EAAE,UAAU;IAC5B,YAAY,UAAU,EAAE,UAAU,IAAI,CAAC;IACvC,SAAS,CAAC;IACV,KAAK,CAAC,CAAC;IACP;;ICdA;IACA;IACA;IACA;IACA;IACA,SAAS,qBAAqB,CAAC,OAAO,EAAE;IACxC,IAAI,OAAO,qBAAqB,CAAC;IACjC,QAAQ,OAAO,EAAE,OAAO;IACxB,QAAQ,SAAS,EAAE,CAAC;IACpB,KAAK,CAAC,CAAC;IACP;;ICdA;AAWA;IACA,MAAMA,kBAAgB,GAAG,CAAC,CAAC,IAAI,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC;IAC3E,MAAMC,qBAAmB,GAAG,qBAAqB,CAACD,kBAAgB,CAAC,CAAC;IACpE,MAAME,gBAAc,GAAG,sBAAsB,CAAC,CAAC,CAAC,CAAC;IACjD,MAAM,eAAe,EAAE,sBAAsB,CAAC,CAAC,CAAC,CAAC;AACjD;IACA,MAAM,gBAAgB,GAAG,IAAI,CAAC;IAC9B,MAAM,UAAU,SAAS,MAAM;IAC/B,IAAI,WAAW,CAAC,OAAO,EAAE;IACzB,QAAQ,KAAK,CAAC,OAAO,CAAC,CAAC;IACvB,QAAQ,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;IAC/C,QAAQ,IAAI,CAAC,iBAAiB,GAAG,IAAID,qBAAmB,EAAE,CAAC;IAC3D,QAAQ,IAAI,CAAC,kBAAkB,GAAG,IAAIA,qBAAmB,EAAE,CAAC;IAC5D,QAAQ,IAAI,CAAC,UAAU,GAAG,IAAIC,gBAAc,EAAE,CAAC;IAC/C,QAAQ,IAAI,CAAC,WAAW,GAAG,IAAI,eAAe,EAAE,CAAC;IACjD,QAAQ,IAAI,CAAC,QAAQ,GAAG,IAAI,aAAa,EAAE,CAAC;IAC5C,QAAQ,IAAI,CAAC,SAAS,GAAG,IAAI,aAAa,EAAE,CAAC;IAC7C,KAAK;AACL;IACA,IAAI,OAAO,GAAG;IACd,QAAQ,OAAO,IAAI,CAAC,iBAAiB,CAAC,MAAM,KAAK,CAAC,CAAC;IACnD,KAAK;AACL;IACA,IAAI,OAAO,GAAG;IACd,QAAQ,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;IAChC,QAAQ,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;IACjC,KAAK;AACL;IACA,IAAI,UAAU,CAAC,OAAO,EAAE;IACxB,QAAQ,KAAK,MAAM,OAAO,IAAI,aAAa,CAAC,OAAO,EAAE,gBAAgB,CAAC,EAAE;IACxE,YAAY,IAAI,WAAW,GAAG,CAAC,CAAC;IAChC,YAAY,IAAI,UAAU,GAAG,EAAE,CAAC;IAChC,YAAY,MAAM,WAAW,GAAG,EAAE,CAAC;AACnC;AACA;IACA,YAAY,KAAK,MAAM,IAAI,IAAI,OAAO,EAAE;IACxC,gBAAgB,MAAM,SAAS,GAAG,EAAE,CAAC;IACrC,gBAAgB,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;IACvC,oBAAoB,SAAS;IAC7B,iBAAiB;AACjB;IACA,gBAAgB,IAAI,IAAI,KAAK,OAAO,CAAC,CAAC,CAAC,EAAE;IACzC,oBAAoB,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IAC3D,iBAAiB;AACjB;IACA,gBAAgB,MAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IAC1H,gBAAgB,MAAM,SAAS,GAAG,WAAW,CAAC,YAAY,CAAC;AAC3D;IACA,gBAAgB,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1E,gBAAgB,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,SAAS,CAAC,CAAC;IACrF,gBAAgB,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1C,gBAAgB,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C;AACA;IACA,gBAAgB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACtD,oBAAoB,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9E,oBAAoB,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,SAAS,GAAG,CAAC,GAAG,CAAC,EAAE,SAAS,GAAG,CAAC,CAAC,CAAC;IACnF,oBAAoB,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9C,oBAAoB,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9C,iBAAiB;AACjB;IACA,gBAAgB,WAAW,CAAC,YAAY,IAAI,IAAI,CAAC,MAAM,CAAC;IACxD,gBAAgB,WAAW,CAAC,eAAe,IAAI,IAAI,CAAC,MAAM,CAAC;AAC3D;IACA,gBAAgB,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC3C,aAAa;AACb;AACA;IACA,YAAY,IAAI,GAAG,GAAG,KAAK,CAAC,SAAS,CAAC;IACtC,gBAAgB,QAAQ,CAAC,UAAU;IACnC,gBAAgB,WAAW,EAAE,KAAK,CAAC,WAAW;IAC9C,gBAAgB,WAAW,EAAE,KAAK,CAAC,QAAQ;IAC3C,gBAAgB,QAAQ,EAAE,CAAC;IAC3B,gBAAgB,UAAU,EAAE,CAAC;IAC7B,aAAa,CAAC,CAAC;AACf;IACA,YAAY,WAAW,GAAG,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;AAChD;AACA;IACA,YAAY,MAAM,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,WAAW,EAAE,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;IACvH,YAAY,MAAM,aAAa,GAAG,eAAe,CAAC,YAAY,CAAC;IAC/D,YAAY,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;IACrD,gBAAgB,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACvF,aAAa;AACb;AACA;IACA,YAAY,MAAM,OAAO,GAAG,GAAG,CAAC,QAAQ,CAAC;IACzC,YAAY,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;IACxD,gBAAgB,IAAI,CAAC,UAAU,CAAC,WAAW;IAC3C,oBAAoB,aAAa,GAAG,OAAO,CAAC,CAAC,CAAC;IAC9C,oBAAoB,aAAa,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;IAClD,oBAAoB,aAAa,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACpD,aAAa;AACb;IACA,YAAY,eAAe,CAAC,YAAY,IAAI,WAAW,CAAC;IACxD,YAAY,eAAe,CAAC,eAAe,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;AAClaAAa,EAAE;IAC7B,QAAQ,OAAO;IACf,YAAY,IAAI,CAAC,IAAI,CAAC,IAAI;IAC1B,YAAY,KAAK,CAAC,IAAI,CAAC,KAAK;IAC5B,YAAY,QAAQ,EAAE,IAAI,CAAC,QAAQ;IACnC,YAAY,iBAAiB,EAAE,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,aAAa,CAAC;IAC9E,YAAY,kBAAkB,EAAE,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,aAAa,CAAC;IAChF,YAAY,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,aAAa,CAAC;IACjE,YAAY,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,aAAa,CAAC;IAClE,YAAY,QAAQ,EAAE,IAAI,CAAC,QAAQ;IACnC,YAAY,SAAS,EAAE,IAAI,CAAC,SAAS;IACrC,SAAS,CAAC;IACV,KAAK;AACL;IACA,IAAI,OAAO,YAAY,CAAC,MAAM,CAAC;IAC/B,QAAQ,MAAM,CAAC,kBAAkB,GAAG,IAAI,UAAU,CAAC,MAAM,CAAC,iBAAiB;IAC3E,YAAYD,qBAAmB,CAAC,SAAS,EAAE,EAAE,UAAU,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;IAC3E,QAAQ,MAAM,CAAC,mBAAmB,GAAG,IAAI,UAAU,CAAC,MAAM,CAAC,kBAAkB;IAC7E,YAAYA,qBAAmB,CAAC,SAAS,EAAE,EAAE,UAAU,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;IAC3E,QAAQ,MAAM,CAAC,WAAW,GAAG,IAAI,UAAU,CAAC,MAAM,CAAC,UAAU;IAC7D,YAAYC,gBAAc,CAAC,SAAS,EAAE,EAAE,UAAU,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IACvE,QAAQ,MAAM,CAAC,YAAY,GAAG,IAAI,UAAU,CAAC,MAAM,CAAC,WAAW;IAC/D,YAAY,eAAe,CAAC,SAAS,EAAE,EAAE,UAAU,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IACxE,KAAK;IACL;;ICrPA;AAQA;IACA,MAAM,gBAAgB,GAAG,CAAC,CAAC,IAAI,EAAE,OAAO,GAAG,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,CAAC;IAC1E,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,OAAO,CAAC;IAClD,IAAI,CAAC,IAAI,EAAE,OAAO,GAAG,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;IACpD,MAAM,mBAAmB,GAAG,qBAAqB,CAAC,gBAAgB,CAAC,CAAC;IACpE,MAAM,cAAc,GAAG,sBAAsB,CAAC,CAAC,CAAC,CAAC;AACjD;IACA,MAAM,aAAa,GAAG,EAAE,CAAC;IACzB,MAAM,MAAM,GAAG,IAAI,CAAC;AACpB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,MAAM,qBAAqB,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,IAAI,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC;IACjE,MAAM,mBAAmB,GAAG,EAAE,CAAC;AAC/B;IACA;IACA,MAAM,yBAAyB,GAAG,EAAE,CAAC;AACrC;IACA;IACA;IACA;IACA,MAAM,mBAAmB,GAAG,CAAC,GAAG,CAAC,CAAC;AAClC;IACA;IACA,MAAM,iBAAiB,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,yBAAyB,GAAG,CAAC,CAAC,EAAE,mBAAmB,CAAC;AAC1F;IACA,SAAS,aAAa,CAAC,kBAAkB,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,SAAS,EAAE;IACnF,IAAI,kBAAkB,CAAC,WAAW;IAClC;IACA,QAAQ,KAAK,CAAC,CAAC;IACf,QAAQ,KAAK,CAAC,CAAC;IACf;IACA;IACA,QAAQ,IAAI,CAAC,KAAK,CAAC,aAAa,GAAG,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG;IACnD,QAAQ,IAAI,CAAC,KAAK,CAAC,aAAa,GAAG,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG;IACnD;IACA;IACA;IACA;IACA;IACA,QAAQ,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,SAAS,GAAG,mBAAmB,IAAI,IAAI,KAAK,CAAC,CAAC;IACtG,QAAQ,CAAC,SAAS,GAAG,mBAAmB,KAAK,CAAC;IAC9C,QAAQ,EAAE;IACV,QAAQ,EAAE,CAAC,CAAC;IACZ,CAAC;IACD;IACA;IACA;IACA,MAAM,UAAU,SAAS,MAAM;IAC/B,IAAI,WAAW,CAAC,OAAO,EAAE;IACzB,QAAQ,KAAK,CAAC,OAAO,CAAC,CAAC;IACvB,QAAQ,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC;AAC7C;IACA,QAAQ,IAAI,CAAC,iBAAiB,GAAG,IAAI,mBAAmB,EAAE,CAAC;IAC3D,QAAQ,IAAI,CAAC,UAAU,GAAG,IAAI,cAAc,EAAE,CAAC;IAC/C,QAAQ,IAAI,CAAC,QAAQ,GAAG,IAAI,aAAa,EAAE,CAAC;IAC5C,KAAK;AACL;IACA,IAAI,MAAM,CAAC,OAAO,EAAE;IACpB,QAAQ,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IAC7B,KAAK;AACL;IACA,IAAI,OAAO,GAAG;IACd,QAAQ,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;IAChC,KAAK;AACL;IACA,IAAI,UAAU,CAAC,OAAO,EAAE;IACxB,QAAQ,MAAM,IAAI,GAAG,OAAO,CAAC;IAC7B,QAAQ,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC;IACvE,QAAQ,MAAM,UAAU,GAAG,CAAC,CAAC;IAC7B,QAAQ,MAAM,UAAU,GAAG,CAAC,CAAC;AAC7B;IACA,QAAQ,KAAK,MAAM,IAAI,IAAI,OAAO,EAAE;IACpC,YAAY,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;IAC3E,SAAS;IACT,KAAK;AACL;IACA,IAAI,OAAO,CAAC,QAAQ,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,UAAU,EAAE,UAAU,EAAE;IAIlE;IACA,QAAQ,IAAI,GAAG,GAAG,QAAQ,CAAC,MAAM,CAAC;IAClC,QAAQ,OAAO,GAAG,IAAI,CAAC,IAAI,QAAQ,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE;IACxE,YAAY,GAAG,EAAE,CAAC;IAClB,SAAS;IACT,QAAQ,IAAI,KAAK,GAAG,CAAC,CAAC;IACtB,QAAQ,OAAO,KAAK,GAAG,GAAG,GAAG,CAAC,IAAI,QAAQ,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,EAAE;IAC/E,YAAY,KAAK,EAAE,CAAC;IACpB,SAAS;AACT;IACA;IACA,QAAQ,IAAI,GAAG,IAAoB,CAAC,CAAC,EAAE,OAAO;AAC9C;IACA,QAAQ,IAAI,IAAI,KAAK,OAAO,EAAE,UAAU,GAAG,IAAI,CAAC;AAChD;IACA,QAAQ,MAAM,iBAAiB,GAAG,mBAAmB,IAAI,MAAM,IAAI,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;AAC5F;IACA,QAA4B,QAAQ,CAAC,KAAK,EAAE;IAC5C;AACA;IACA;IACA;AACA;IACA,QAAQ,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,GAAG,GAAG,EAAE,EAAE,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;IACxG,QAAQ,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;AAC1B;IACA,QAAQ,MAAM,QAAQ,GAAG,GAAG;IAC5B,YAAY,MAAM,GAAwB,GAAG,CAAC;IAC9C,QAAQ,IAAI,WAAW,GAAG,IAAI,CAAC;IAC/B,QAAQ,IAAI,aAAa,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,CAAC;AAC5F;IACA;IACA,QAAQ,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;AAMzC;IACA,QAAQ,KAAK,IAAI,CAAC,GAAG,KAAK,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;AAC1C;IACA,YAAY,UAAU,GACgB;IACtC,gBAAgB,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AAChC;IACA;IACA,YAAY,IAAI,UAAU,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,SAAS;AACvE;IACA,YAAY,IAAI,UAAU,EAAE,UAAU,GAAG,UAAU,CAAC;IACpD,YAAY,IAAI,aAAa,EAAE,UAAU,GAAG,aAAa,CAAC;AAC1D;IACA,YAAY,aAAa,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;AACxC;IACA;IACA;IACA;IACA,YAAY,UAAU,GAAG,UAAU,GAAG,UAAU,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,KAAK,EAAE,CAAC,KAAK,EAAE,GAAG,UAAU,CAAC;AACjG;IACA;IACA;IACA,YAAY,UAAU,GAAG,UAAU,IAAI,UAAU,CAAC;AAClD;IACA;IACA;IACA;IACA;IACA;IACA;IACA,YAAY,IAAI,UAAU,GAAG,UAAU,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IACxD,YAAY,IAAI,UAAU,CAAC,CAAC,KAAK,CAAC,IAAI,UAAU,CAAC,CAAC,KAAK,CAAC,EAAE;IAC1D,gBAAgB,UAAU,CAAC,KAAK,EAAE,CAAC;IACnC,aAAa;IACb;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;IACA,YAAY,MAAM,YAAY,GAAG,UAAU,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC;IAC3F,YAAY,MAAM,WAAW,GAAG,YAAY,KAAK,CAAC,GAAG,CAAC,GAAG,YAAY,GAAG,QAAQ,CAAC;AACjF;IACA,YAAY,MAAM,aAAa,GAAG,YAAY,GAAG,qBAAqB,IAAI,UAAU,IAAI,UAAU,CAAC;AACnG;IACA,YAAY,IAAI,aAAa,IAAI,CAAC,GAAG,KAAK,EAAE;IAC5C,gBAAgB,MAAM,iBAAiB,GAAG,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACzE,gBAAgB,IAAI,iBAAiB,GAAG,CAAC,GAAG,iBAAiB,EAAE;IAC/D,oBAAoB,MAAM,aAAa,GAAG,aAAa,CAAC,GAAG,CAAC,aAAa,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,iBAAiB,GAAG,iBAAiB,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC;IACjJ,oBAAoB,IAAI,CAAC,QAAQ,IAAI,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACpE,oBAAoB,IAAI,CAAC,gBAAgB,CAAC,aAAa,EAAE,IAAI,CAAC,QAAQ,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;IAClH,oBAAoB,UAAU,GAAG,aAAa,CAAC;IAC/C,iBAAiB;IACjB,aAAa;AACb;IACA;IACA,YAAY,MAAM,YAAY,GAAG,UAAU,IAAI,UAAU,CAAC;IAC1D,YAAY,IAAI,WAAW,GAAG,YAAY,GAAG,IAAI,GAAG,UAAU,GAAG,QAAQ,GAAG,MAAM,CAAC;AACnF;IACA,YAAY,IAAI,YAAY,IAAI,WAAW,KAAK,OAAO,EAAE;IACzD,gBAAgB,IAAI,WAAW,GAAG,UAAU,EAAE;IAC9C,oBAAoB,WAAW,GAAG,OAAO,CAAC;IAC1C,iBAAiB,MAAM,IAAI,WAAW,IAAI,CAAC,EAAE;IAC7C,oBAAoB,WAAW,GAAG,WAAW,CAAC;IAC9C,iBAAiB;IACjB,aAAa;AACb;IACA,YAAY,IAAI,WAAW,KAAK,OAAO,IAAI,WAAW,GAAG,UAAU,EAAE;IACrE,gBAAgB,WAAW,GAAG,OAAO,CAAC;IACtC,aAAa;AACb;IACA,YAAY,IAAI,WAAW,KAAK,OAAO,EAAE;IACzC;IACA;IACA,gBAAgB,IAAI,WAAW,GAAG,CAAC,EAAE,WAAW,GAAG,WAAW,CAAC;AAC/D;IACA;IACA;IACA,gBAAgB,IAAI,WAAW,GAAG,UAAU,EAAE,WAAW,GAAG,OAAO,CAAC;IACpE,aAAa;AACb;IACA;IACA,YAAY,IAAI,UAAU,EAAE,IAAI,CAAC,QAAQ,IAAI,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AAC5E;IACA,YAAY,IAAI,WAAW,KAAK,OAAO,EAAE;AACzC;IACA,gBAAgB,UAAU,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;IAC9C,gBAAgB,IAAI,CAAC,gBAAgB,CAAC,aAAa,EAAE,IAAI,CAAC,QAAQ,EAAE,UAAU,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;AACtG;IACA,aAAa,MAAM,IAAI,WAAW,KAAK,WAAW,EAAE;IACpD;AACA;IACA,gBAAgB,IAAI,WAAW,GAAG,GAAG,EAAE;IACvC;IACA,oBAAoB,UAAU,GAAG,UAAU,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7D;IACA,iBAAiB,MAAM;IACvB,oBAAoB,MAAM,SAAS,GAAG,UAAU,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;IAC7G,oBAAoB,MAAM,WAAW,GAAG,WAAW,GAAG,UAAU,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,GAAG,EAAE,GAAG,UAAU,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,GAAG,EAAE,CAAC;IAC1H,oBAAoB,UAAU,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,WAAW,GAAG,SAAS,CAAC,CAAC;IACtE,iBAAiB;IACjB,gBAAgB,IAAI,CAAC,gBAAgB,CAAC,aAAa,EAAE,IAAI,CAAC,QAAQ,EAAE,UAAU,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;IACtG,gBAAgB,IAAI,CAAC,gBAAgB,CAAC,aAAa,EAAE,IAAI,CAAC,QAAQ,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;AAC/G;IACA,aAAa,MAAM,IAAI,WAAW,KAAK,OAAO,IAAI,WAAW,KAAK,WAAW,EAAE;IAC/E,gBAAgB,MAAM,aAAa,GAAG,CAAC,UAAU,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC;IACtG,gBAAgB,MAAM,MAAM,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,GAAG,WAAW,GAAG,CAAC,CAAC,CAAC;IACzE,gBAAgB,IAAI,aAAa,EAAE;IACnC,oBAAoB,OAAO,GAAG,CAAC,CAAC;IAChC,oBAAoB,OAAO,GAAG,MAAM,CAAC;IACrC,iBAAiB,MAAM;IACvB,oBAAoB,OAAO,GAAG,CAAC,CAAC;IAChC,oBAAoB,OAAO,GAAG,MAAM,CAAC;IACrC,iBAAiB;AACjB;IACA;IACA,gBAAgB,IAAI,CAAC,WAAW,EAAE;IAClC,oBAAoB,IAAI,CAAC,gBAAgB,CAAC,aAAa,EAAE,IAAI,CAAC,QAAQ,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;IACtH,iBAAiB;AACjB;IACA,gBAAgB,IAAI,WAAW,KAAK,WAAW,EAAE;IACjD;IACA;IACA;IACA;AACA;IACA;IACA;IACA,oBAAoB,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,YAAY,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3E,oBAAoB,IAAI,0BAA0B,CAAC;AACnD;IACA,oBAAoB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;IAChD,wBAAwB,0BAA0B,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,KAAK,EAAE,CAAC;IACjH,wBAAwB,IAAI,CAAC,iBAAiB,CAAC,aAAa,EAAE,IAAI,CAAC,QAAQ,EAAE,0BAA0B,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;IACjI,qBAAqB;AACrB;IACA,oBAAoB,IAAI,CAAC,iBAAiB,CAAC,aAAa,EAAE,IAAI,CAAC,QAAQ,EAAE,UAAU,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;AAC7G;IACA,oBAAoB,KAAK,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;IACrD,wBAAwB,0BAA0B,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,KAAK,EAAE,CAAC;IACjH,wBAAwB,IAAI,CAAC,iBAAiB,CAAC,aAAa,EAAE,IAAI,CAAC,QAAQ,EAAE,0BAA0B,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;IACjI,qBAAqB;IACrB,iBAAiB;AACjB;IACA;IACA,gBAAgB,IAAI,UAAU,EAAE;IAChC,oBAAoB,IAAI,CAAC,gBAAgB,CAAC,aAAa,EAAE,IAAI,CAAC,QAAQ,EAAE,UAAU,EAAE,CAAC,OAAO,EAAE,CAAC,OAAO,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;IACxH,iBAAiB;AACjB;IACA,aAAa,MAAM,IAAI,WAAW,KAAK,MAAM,EAAE;IAC/C,gBAAgB,IAAI,CAAC,WAAW,EAAE;IAClC;IACA,oBAAoB,IAAI,CAAC,gBAAgB,CAAC,aAAa,EAAE,IAAI,CAAC,QAAQ,EAAE,UAAU,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;IAC1G,iBAAiB;AACjB;IACA;IACA,gBAAgB,IAAI,UAAU,EAAE;IAChC,oBAAoB,IAAI,CAAC,gBAAgB,CAAC,aAAa,EAAE,IAAI,CAAC,QAAQ,EAAE,UAAU,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;IAC1G,iBAAiB;AACjB;IACA,aAAa,MAAM,IAAI,WAAW,KAAK,QAAQ,EAAE;AACjD;IACA,gBAAgB,IAAI,CAAC,WAAW,EAAE;IAClC;IACA,oBAAoB,IAAI,CAAC,gBAAgB,CAAC,aAAa,EAAE,IAAI,CAAC,QAAQ,EAAE,UAAU,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;AAC1G;IACA;IACA,oBAAoB,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;IAC3C,iBAAiB;AACjB;IACA;IACA,gBAAgB,IAAI,UAAU,EAAE;IAChC,oBAAoB,IAAI,CAAC,gBAAgB,CAAC,aAAa,EAAE,IAAI,CAAC,QAAQ,EAAE,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;IAC5G,iBAAiB;AACjB;IACA,aAAa,MAAM,IAAI,WAAW,KAAK,OAAO,EAAE;AAChD;IACA,gBAAgB,IAAI,CAAC,WAAW,EAAE;IAClC;IACA,oBAAoB,IAAI,CAAC,gBAAgB,CAAC,aAAa,EAAE,IAAI,CAAC,QAAQ,EAAE,UAAU,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;AAC1G;IACA;IACA,oBAAoB,IAAI,CAAC,gBAAgB,CAAC,aAAa,EAAE,IAAI,CAAC,QAAQ,EAAE,UAAU,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;AACzG;IACA;IACA,oBAAoB,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;IAC3C,iBAAiB;AACjB;AACA;IACA;IACA,gBAAgB,IAAI,UAAU,EAAE;IAChC;IACA,oBAAoB,IAAI,CAAC,gBAAgB,CAAC,aAAa,EAAE,IAAI,CAAC,QAAQ,EAAE,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;AAC3G;IACA,oBAAoB,IAAI,CAAC,gBAAgB,CAAC,aAAa,EAAE,IAAI,CAAC,QAAQ,EAAE,UAAU,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;IAC1G,iBAAiB;IACjB,aAAa;AACb;IACA,YAAY,IAAI,aAAa,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,EAAE;IAC9C,gBAAgB,MAAM,iBAAiB,GAAG,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACzE,gBAAgB,IAAI,iBAAiB,GAAG,CAAC,GAAG,iBAAiB,EAAE;IAC/D,oBAAoB,MAAM,gBAAgB,GAAG,aAAa,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,KAAK,CAAC,iBAAiB,GAAG,iBAAiB,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC;IACpJ,oBAAoB,IAAI,CAAC,QAAQ,IAAI,gBAAgB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC1E,oBAAoB,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,IAAI,CAAC,QAAQ,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;IACrH,oBAAoB,aAAa,GAAG,gBAAgB,CAAC;IACrD,iBAAiB;IACjB,aAAa;AACb;IACA,YAAY,WAAW,GAAG,KAAK,CAAC;IAChC,SAAS;AACT;IACA;IACA,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,gBAAgB,CAAC,aAAa,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE;IACzF,QAAQ,MAAM,EAAE,GAAG,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;IACjC,QAAQ,IAAI,OAAO,CAAC;IACpB;IACA;IACA;AACA;IACA,QAAQ,OAAO,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC;IACjC,QAAQ,IAAI,OAAO,EAAE,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;IAChE,QAAQ,aAAa,CAAC,IAAI,CAAC,iBAAiB,EAAE,aAAa,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;IAChG,QAAQ,IAAI,CAAC,EAAE,GAAG,OAAO,CAAC,YAAY,EAAE,CAAC;IACzC,QAAQ,IAAI,IAAI,CAAC,EAAE,IAAI,CAAC,IAAI,IAAI,CAAC,EAAE,IAAI,CAAC,EAAE;IAC1C,YAAY,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;IACnE,YAAY,OAAO,CAAC,eAAe,EAAE,CAAC;IACtC,SAAS;IACT,QAAQ,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;IAC1B,QAAQ,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;AAC1B;IACA,QAAQ,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAClC,QAAQ,IAAI,QAAQ,EAAE,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;IAClE,QAAQ,aAAa,CAAC,IAAI,CAAC,iBAAiB,EAAE,aAAa,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAClG,QAAQ,IAAI,CAAC,EAAE,GAAG,OAAO,CAAC,YAAY,EAAE,CAAC;IACzC,QAAQ,IAAI,IAAI,CAAC,EAAE,IAAI,CAAC,IAAI,IAAI,CAAC,EAAE,IAAI,CAAC,EAAE;IAC1C,YAAY,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;IACnE,YAAY,OAAO,CAAC,eAAe,EAAE,CAAC;IACtC,SAAS;IACT,QAAQ,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;IAC1B,QAAQ,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;AAC1B;IACA;IACA;IACA;IACA;IACA,QAAQ,IAAI,QAAQ,GAAG,iBAAiB,GAAG,CAAC,EAAE;IAC9C,YAAY,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;IAC9B,YAAY,IAAI,CAAC,gBAAgB,CAAC,aAAa,EAAE,IAAI,CAAC,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;IAC3G,SAAS;IACT,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,iBAAiB,CAAC,aAAa,EAAE,QAAQ,EAAE,OAAO,EAAE,aAAa,EAAE,OAAO,EAAE;IAChF,QAAQ,MAAM,EAAE,GAAG,aAAa,GAAG,CAAC,GAAG,CAAC,CAAC;IACzC,QAAQ,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACvD;IACA;IACA;AACA;IACA,QAAQ,aAAa,CAAC,IAAI,CAAC,iBAAiB,EAAE,aAAa,EAAE,OAAO,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAC;IAC1F,QAAQ,IAAI,CAAC,EAAE,GAAG,OAAO,CAAC,YAAY,EAAE,CAAC;IACzC,QAAQ,IAAI,IAAI,CAAC,EAAE,IAAI,CAAC,IAAI,IAAI,CAAC,EAAE,IAAI,CAAC,EAAE;IAC1C,YAAY,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;IACnE,YAAY,OAAO,CAAC,eAAe,EAAE,CAAC;IACtC,SAAS;AACT;IACA,QAAQ,IAAI,aAAa,EAAE;IAC3B,YAAY,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;IAC9B,SAAS,MAAM;IACf,YAAY,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;IAC9B,SAAS;IACT,KAAK;AACL;AACA;IACA,IAAI,SAAS,CAAC,aAAa,EAAE;IAC7B,QAAQ,OAAO;IACf,YAAY,IAAI,CAAC,IAAI,CAAC,IAAI;IAC1B,YAAY,KAAK,CAAC,IAAI,CAAC,KAAK;IAC5B,YAAY,QAAQ,EAAE,IAAI,CAAC,QAAQ;IACnC,YAAY,iBAAiB,EAAE,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,aAAa,CAAC;IAC9E,YAAY,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,aAAa,CAAC;IACjE,YAAY,QAAQ,EAAE,IAAI,CAAC,QAAQ;IACnC,SAAS,CAAC;IACV,KAAK;AACL;AACA;IACA,IAAI,OAAO,YAAY,CAAC,MAAM,CAAC;IAC/B,QAAQ,MAAM,CAAC,kBAAkB,GAAG,IAAI,UAAU,CAAC,MAAM,CAAC,iBAAiB;IAC3E,YAAY,mBAAmB,CAAC,SAAS,EAAE,EAAE,UAAU,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;IAC3E,QAAQ,MAAM,CAAC,WAAW,GAAG,IAAI,UAAU,CAAC,MAAM,CAAC,UAAU;IAC7D,YAAY,cAAc,CAAC,SAAS,EAAE,EAAE,UAAU,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IACvE,KAAK;IACL;;ICxcA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;AACA;IACA;IACA,IAAI,SAAS,SAAS,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE;AACzC;IACA,QAAQ,IAAI,EAAE,GAAG,GAAG,GAAG,GAAG;IAC1B,YAAY,EAAE,GAAG,GAAG,GAAG,GAAG,CAAC;AAC3B;IACA,QAAQ,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;IACjC,KAAK;AACL;IACA;IACA,IAAI,SAAS,YAAY,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE;AACjD;IACA,QAAQ,IAAI,CAAC,GAAG,GAAG;IACnB,YAAY,CAAC,GAAG,GAAG;IACnB,YAAY,EAAE,GAAG,GAAG,GAAG,CAAC;IACxB,YAAY,EAAE,GAAG,GAAG,GAAG,CAAC,CAAC;AACzB;IACA,QAAQ,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE;AAClC;IACA,YAAY,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;AAC1E;IACA,YAAY,IAAI,CAAC,GAAG,CAAC,EAAE;IACvB,gBAAgB,CAAC,GAAG,GAAG,CAAC;IACxB,gBAAgB,CAAC,GAAG,GAAG,CAAC;AACxB;IACA,aAAa,MAAM,IAAI,CAAC,GAAG,CAAC,EAAE;IAC9B,gBAAgB,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAC5B,gBAAgB,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAC5B,aAAa;IACb,SAAS;AACT;IACA,QAAQ,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IACpB,QAAQ,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;AACpB;IACA,QAAQ,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;IACjC,KAAK;IACL;AACA;IACA;IACA,IAAI,SAAS,kBAAkB,CAAC,MAAM,EAAE,WAAW,EAAE;AACrD;IACA,QAAQ,IAAI,UAAU,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IACnC,QAAQ,IAAI,UAAU,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IACnC,QAAQ,IAAI,SAAS,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9C,QAAQ,IAAI,MAAM,CAAC;IACnB,QAAQ,IAAI,MAAM,CAAC;IACnB,QAAQ,IAAI,GAAG,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;IACpC,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;IACvC,YAAY,MAAM,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACnC,YAAY,MAAM,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;AACvC;IACA,YAAY,IAAI,SAAS,CAAC,MAAM,CAAC,MAAM,EAAE,UAAU,CAAC,UAAU,CAAC,GAAG,WAAW,EAAE;IAC/E,gBAAgB,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACvC,gBAAgB,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACvC,gBAAgB,UAAU,GAAG,MAAM,CAAC;IACpC,gBAAgB,UAAU,GAAG,MAAM,CAAC;IACpC,aAAa;IACb,SAAS;AACT;IACA,QAAQ,IAAI,UAAU,KAAK,MAAM,IAAI,UAAU,KAAK,MAAM,EAAE;IAC5D,YAAY,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACnC,YAAY,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACnC;IACA,SAAS;AACT;IACA,QAAQ,OAAO,SAAS,CAAC;IACzB,KAAK;AACL;IACA,IAAI,SAAS,cAAc,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,WAAW,EAAE,UAAU,EAAE;IAC1E,QAAQ,IAAI,SAAS,GAAG,WAAW;IACnC,YAAY,KAAK,CAAC;AAClB;IACA,QAAQ,KAAK,IAAI,CAAC,GAAG,KAAK,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;IAC/C,YAAY,IAAI,MAAM,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC/J,YAAY,IAAI,MAAM,GAAG,SAAS,EAAE;IACpC,gBAAgB,KAAK,GAAG,CAAC,CAAC;IAC1B,gBAAgB,SAAS,GAAG,MAAM,CAAC;IACnC,aAAa;IACb,SAAS;AACT;IACA,QAAQ,IAAI,SAAS,GAAG,WAAW,EAAE;IACrC,YAAY,IAAI,KAAK,GAAG,KAAK,GAAG,CAAC,EAAE;IACnC,gBAAgB,cAAc,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC;IAC9E,aAAa;AACb;IACA,YAAY,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;IAC/C,YAAY,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACnD;IACA,YAAY,IAAI,IAAI,GAAG,KAAK,GAAG,CAAC,EAAE;IAClC,gBAAgB,cAAc,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC;IAC7E,aAAa;IACb,SAAS;IACT,KAAK;AACL;IACA;IACA,IAAI,SAAS,sBAAsB,CAAC,MAAM,EAAE,WAAW,EAAE;IACzD,QAAQ,IAAI,IAAI,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;AACzC;IACA,QAAQ,IAAI,UAAU,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/C;IACA,QAAQ,cAAc,CAAC,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,WAAW,GAAG,UAAU,CAAC,CAAC;IAClE,QAAQ,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACjE;IACA,QAAQ,OAAO,UAAU,CAAC;IAC1B,KAAK;AACL;IACA;IACA,IAAI,SAAS,QAAQ,CAAC,MAAM,EAAE,SAAS,EAAE,cAAc,EAAE;AACzD;IACA,QAAQ,IAAI,MAAM,CAAC,MAAM,IAAI,CAAC,EAAE,OAAO,MAAM,CAAC;AAC9C;IACA,QAAQ,IAAI,WAAW,GAAG,SAAS,KAAK,SAAS,GAAG,SAAS,GAAG,SAAS,GAAG,CAAC,CAAC;AAC9E;IACA,QAAQ,MAAM,GAAG,cAAc,GAAG,MAAM,GAAG,kBAAkB,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;IACnF,QAAQ,MAAM,GAAG,sBAAsB,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;AAC7D;IACA,QAAQ,OAAO,MAAM,CAAC;IACtB;;IC7HA,SAAS,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE;IACrB,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;IACf,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;IACf,CAAC;AACD;IACA,KAAK,CAAC,SAAS,GAAG;IAClB,IAAI,KAAK,EAAE,WAAW,EAAE,OAAO,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;AAC3D;IACA,IAAI,GAAG,MAAM,SAAS,CAAC,EAAE,EAAE,OAAO,IAAI,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM;IAC7D,IAAI,GAAG,MAAM,SAAS,CAAC,EAAE,EAAE,OAAO,IAAI,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM;IAC7D,IAAI,IAAI,KAAK,SAAS,CAAC,EAAE,EAAE,OAAO,IAAI,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK;IAC7D,IAAI,GAAG,MAAM,SAAS,CAAC,EAAE,EAAE,OAAO,IAAI,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM;IAC7D,IAAI,MAAM,GAAG,SAAS,CAAC,EAAE,EAAE,OAAO,IAAI,CAAC,KAAK,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG;IAC7D,IAAI,OAAO,EAAE,SAAS,CAAC,EAAE,EAAE,OAAO,IAAI,CAAC,KAAK,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE;IAC7D,IAAI,IAAI,KAAK,WAAW,EAAE,OAAO,IAAI,CAAC,KAAK,EAAE,CAAC,KAAK,EAAE,CAAC,EAAE;IACxD,IAAI,IAAI,KAAK,WAAW,EAAE,OAAO,IAAI,CAAC,KAAK,EAAE,CAAC,KAAK,EAAE,CAAC,EAAE;IACxD,IAAI,KAAK,IAAI,WAAW,EAAE,OAAO,IAAI,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,EAAE;AACzD;IACA,IAAI,GAAG,EAAE,WAAW;IACpB,QAAQ,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;IAC5D,KAAK;AACL;IACA,IAAI,MAAM,EAAE,SAAS,CAAC,EAAE;IACxB,QAAQ,OAAO,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;IAC7B,YAAY,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC3B,KAAK;AACL;IACA,IAAI,IAAI,EAAE,SAAS,CAAC,EAAE;IACtB,QAAQ,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1C,KAAK;AACL;IACA,IAAI,OAAO,EAAE,SAAS,CAAC,EAAE;IACzB,QAAQ,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;IAC7B,YAAY,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;IAC9B,QAAQ,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;IACjC,KAAK;AACL;IACA,IAAI,KAAK,EAAE,WAAW;IACtB,QAAQ,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;IAC1C,KAAK;AACL;IACA,IAAI,OAAO,EAAE,SAAS,CAAC,EAAE;IACzB,QAAQ,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACtD,KAAK;AACL;IACA,IAAI,SAAS,EAAE,SAAS,CAAC,EAAE;IAC3B,QAAQ,OAAO,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3C,KAAK;AACL;IACA;IACA,IAAI,YAAY,EAAE,SAAS,CAAC,EAAE,CAAC,EAAE;IACjC,QAAQ,OAAO,IAAI,CAAC,KAAK;IACzB,YAAY,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC;IACnC,YAAY,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACrC,KAAK;AACL;IACA,IAAI,QAAQ,EAAE,SAAS,CAAC,EAAE;IAC1B,QAAQ,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;IAC7C,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;IAC9C,QAAQ,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;IACnB,QAAQ,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;IACnB,QAAQ,OAAO,IAAI,CAAC;IACpB,KAAK;AACL;IACA,IAAI,IAAI,EAAE,SAAS,CAAC,EAAE;IACtB,QAAQ,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACtB,QAAQ,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACtB,QAAQ,OAAO,IAAI,CAAC;IACpB,KAAK;AACL;IACA,IAAI,IAAI,EAAE,SAAS,CAAC,EAAE;IACtB,QAAQ,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACtB,QAAQ,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACtB,QAAQ,OAAO,IAAI,CAAC;IACpB,KAAK;AACL;IACA,IAAI,KAAK,EAAE,SAAS,CAAC,EAAE;IACvB,QAAQ,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;IACpB,QAAQ,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;IACpB,QAAQ,OAAO,IAAI,CAAC;IACpB,KAAK;AACL;IACA,IAAI,IAAI,EAAE,SAAS,CAAC,EAAE;IACtB,QAAQ,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;IACpB,QAAQ,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;IACpB,QAAQ,OAAO,IAAI,CAAC;IACpB,KAAK;AACL;IACA,IAAI,KAAK,EAAE,WAAW;IACtB,QAAQ,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;IAC9B,QAAQ,OAAO,IAAI,CAAC;IACpB,KAAK;AACL;IACA,IAAI,KAAK,EAAE,WAAW;IACtB,QAAQ,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;IACvB,QAAQ,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;IACxB,QAAQ,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACpB,QAAQ,OAAO,IAAI,CAAC;IACpB,KAAK;AACL;IACA,IAAI,OAAO,EAAE,SAAS,KAAK,EAAE;IAC7B,QAAQ,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC;IACjC,YAAY,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC;IACjC,YAAY,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC;IAC3C,YAAY,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC;IAC5C,QAAQ,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;IACnB,QAAQ,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;IACnB,QAAQ,OAAO,IAAI,CAAC;IACpB,KAAK;AACL;IACA,IAAI,MAAM,EAAE,WAAW;IACvB,QAAQ,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACpC,QAAQ,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACpC,QAAQ,OAAO,IAAI,CAAC;IACpB,KAAK;IACL,CAAC,CAAC;AACF;IACA;IACA,KAAK,CAAC,OAAO,GAAG,UAAU,CAAC,EAAE;IAC7B,IAAI,IAAI,CAAC,YAAY,KAAK,EAAE;IAC5B,QAAQ,OAAO,CAAC,CAAC;IACjB,KAAK;IACL,IAAI,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;IAC1B,QAAQ,OAAO,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACrC,KAAK;IACL,IAAI,OAAO,CAAC,CAAC;IACb,CAAC;;;;;;;;;;;"}