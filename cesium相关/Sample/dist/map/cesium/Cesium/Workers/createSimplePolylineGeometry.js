define(["./when-c2e8ef35","./Check-c4f3a3fc","./Math-d30358ed","./Cartesian2-f9492f23","./BoundingSphere-dcb1d5fc","./Transforms-8b7e0d39","./RuntimeError-6122571f","./Rectangle-3285eeb3","./WebGLConstants-4ae0db90","./ComponentDatatype-5d3f6452","./GeometryAttribute-a5c051b9","./GeometryAttributes-57608efc","./IndexDatatype-e3260434","./IntersectionTests-525ff5aa","./Plane-dbdf17bf","./ArcType-29cf2197","./EllipsoidRhumbLine-01c8204c","./EllipsoidGeodesic-c0017f17","./PolylinePipeline-b34abe5b","./Color-73b261ab"],(function(e,o,r,t,a,l,i,n,s,p,d,f,c,y,u,h,C,g,T,m){"use strict";function b(e,o,r,t,a,l,i){var n,s=T.PolylinePipeline.numberOfPoints(e,o,a),p=r.red,d=r.green,f=r.blue,c=r.alpha,y=t.red,u=t.green,h=t.blue,C=t.alpha;if(m.Color.equals(r,t)){for(n=0;n<s;n++)l[i++]=m.Color.floatToByte(p),l[i++]=m.Color.floatToByte(d),l[i++]=m.Color.floatToByte(f),l[i++]=m.Color.floatToByte(c);return i}var g=(y-p)/s,b=(u-d)/s,v=(h-f)/s,P=(C-c)/s,_=i;for(n=0;n<s;n++)l[_++]=m.Color.floatToByte(p+n*g),l[_++]=m.Color.floatToByte(d+n*b),l[_++]=m.Color.floatToByte(f+n*v),l[_++]=m.Color.floatToByte(c+n*P);return _}function v(o){var a=(o=e.defaultValue(o,e.defaultValue.EMPTY_OBJECT)).positions,l=o.colors,i=e.defaultValue(o.colorsPerVertex,!1);this._positions=a,this._colors=l,this._colorsPerVertex=i,this._arcType=e.defaultValue(o.arcType,h.ArcType.GEODESIC),this._granularity=e.defaultValue(o.granularity,r.CesiumMath.RADIANS_PER_DEGREE),this._ellipsoid=e.defaultValue(o.ellipsoid,t.Ellipsoid.WGS84),this._workerName="createSimplePolylineGeometry";var n=1+a.length*t.Cartesian3.packedLength;n+=e.defined(l)?1+l.length*m.Color.packedLength:1,this.packedLength=n+t.Ellipsoid.packedLength+3}v.pack=function(o,r,a){var l;a=e.defaultValue(a,0);var i=o._positions,n=i.length;for(r[a++]=n,l=0;l<n;++l,a+=t.Cartesian3.packedLength)t.Cartesian3.pack(i[l],r,a);var s=o._colors;for(n=e.defined(s)?s.length:0,r[a++]=n,l=0;l<n;++l,a+=m.Color.packedLength)m.Color.pack(s[l],r,a);return t.Ellipsoid.pack(o._ellipsoid,r,a),a+=t.Ellipsoid.packedLength,r[a++]=o._colorsPerVertex?1:0,r[a++]=o._arcType,r[a]=o._granularity,r},v.unpack=function(o,r,a){var l;r=e.defaultValue(r,0);var i=o[r++],n=new Array(i);for(l=0;l<i;++l,r+=t.Cartesian3.packedLength)n[l]=t.Cartesian3.unpack(o,r);var s=(i=o[r++])>0?new Array(i):void 0;for(l=0;l<i;++l,r+=m.Color.packedLength)s[l]=m.Color.unpack(o,r);var p=t.Ellipsoid.unpack(o,r);r+=t.Ellipsoid.packedLength;var d=1===o[r++],f=o[r++],c=o[r];return e.defined(a)?(a._positions=n,a._colors=s,a._ellipsoid=p,a._colorsPerVertex=d,a._arcType=f,a._granularity=c,a):new v({positions:n,colors:s,ellipsoid:p,colorsPerVertex:d,arcType:f,granularity:c})};var P=new Array(2),_=new Array(2),B={positions:P,height:_,ellipsoid:void 0,minDistance:void 0,granularity:void 0};return v.createGeometry=function(o){var l,i,n,s,y,u=o._positions,C=o._colors,g=o._colorsPerVertex,v=o._arcType,A=o._granularity,E=o._ellipsoid,k=r.CesiumMath.chordLength(A,E.maximumRadius),G=e.defined(C)&&!g,w=u.length,D=0;if(v===h.ArcType.GEODESIC||v===h.ArcType.RHUMB){var L,V,S;v===h.ArcType.GEODESIC?(L=r.CesiumMath.chordLength(A,E.maximumRadius),V=T.PolylinePipeline.numberOfPoints,S=T.PolylinePipeline.generateArc):(L=A,V=T.PolylinePipeline.numberOfPointsRhumbLine,S=T.PolylinePipeline.generateRhumbArc);var x=T.PolylinePipeline.extractHeights(u,E),R=B;if(v===h.ArcType.GEODESIC?R.minDistance=k:R.granularity=A,R.ellipsoid=E,G){var I=0;for(l=0;l<w-1;l++)I+=V(u[l],u[l+1],L)+1;i=new Float64Array(3*I),s=new Uint8Array(4*I),R.positions=P,R.height=_;var O=0;for(l=0;l<w-1;++l){P[0]=u[l],P[1]=u[l+1],_[0]=x[l],_[1]=x[l+1];var M=S(R);if(e.defined(C)){var U=M.length/3;y=C[l];for(var N=0;N<U;++N)s[O++]=m.Color.floatToByte(y.red),s[O++]=m.Color.floatToByte(y.green),s[O++]=m.Color.floatToByte(y.blue),s[O++]=m.Color.floatToByte(y.alpha)}i.set(M,D),D+=M.length}}else if(R.positions=u,R.height=x,i=new Float64Array(S(R)),e.defined(C)){for(s=new Uint8Array(i.length/3*4),l=0;l<w-1;++l){D=b(u[l],u[l+1],C[l],C[l+1],k,s,D)}var F=C[w-1];s[D++]=m.Color.floatToByte(F.red),s[D++]=m.Color.floatToByte(F.green),s[D++]=m.Color.floatToByte(F.blue),s[D++]=m.Color.floatToByte(F.alpha)}}else{n=G?2*w-2:w,i=new Float64Array(3*n),s=e.defined(C)?new Uint8Array(4*n):void 0;var H=0,W=0;for(l=0;l<w;++l){var Y=u[l];if(G&&l>0&&(t.Cartesian3.pack(Y,i,H),H+=3,y=C[l-1],s[W++]=m.Color.floatToByte(y.red),s[W++]=m.Color.floatToByte(y.green),s[W++]=m.Color.floatToByte(y.blue),s[W++]=m.Color.floatToByte(y.alpha)),G&&l===w-1)break;t.Cartesian3.pack(Y,i,H),H+=3,e.defined(C)&&(y=C[l],s[W++]=m.Color.floatToByte(y.red),s[W++]=m.Color.floatToByte(y.green),s[W++]=m.Color.floatToByte(y.blue),s[W++]=m.Color.floatToByte(y.alpha))}}var q=new f.GeometryAttributes;q.position=new d.GeometryAttribute({componentDatatype:p.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:i}),e.defined(C)&&(q.color=new d.GeometryAttribute({componentDatatype:p.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:4,values:s,normalize:!0}));var z=2*((n=i.length/3)-1),J=c.IndexDatatype.createTypedArray(n,z),j=0;for(l=0;l<n-1;++l)J[j++]=l,J[j++]=l+1;return new d.Geometry({attributes:q,indices:J,primitiveType:d.PrimitiveType.LINES,boundingSphere:a.BoundingSphere.fromPoints(u)})},function(o,r){return e.defined(r)&&(o=v.unpack(o,r)),o._ellipsoid=t.Ellipsoid.clone(o._ellipsoid),v.createGeometry(o)}}));
